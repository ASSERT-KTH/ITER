bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	39	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(ch    ==    JsonToken.VALUE_NULL)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	39	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
4	[BUG]  [BUGGY]  if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
5	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
6	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
7	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken  ==  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken  ==  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  if(_currToken  ==  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
8	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _skipWS(ch);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _skipWS(ch);  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _skipWS(ch);  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
9	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
10	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
11	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
12	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
13	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
14	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
15	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
16	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
17	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    if(ch!=  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
18	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    If(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
19	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  ch);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_STRING,  ch);	  _parseToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
20	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  _currToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  _currToken);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_STRING,  _currToken);	  _parseToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
21	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_ERROR);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_ERROR);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_ERROR);	  _parseToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
22	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  _minorState);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_STRING,  _minorState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_STRING,  _minorState);	  _parseToken(JsonToken.VALUE_STRING);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
23	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
24	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
25	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
26	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
27	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
29	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
30	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	84	1	replace
31	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT    ||    _currToken    ==    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	84	1	replace
32	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
33	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
34	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_currToken  >=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
35	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_parrToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  if(_parrToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    if(_parrToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
37	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
39	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
40	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
41	[BUG]  [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	||  ch  ==  INT_QUOTE)  {  return  _startString();	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
42	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NULL,  ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NULL,  ch);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NULL,  ch);	  _parseToken(JsonToken.VALUE_NULL);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
43	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_ERROR,  JsonToken.VALUE_NULL);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_ERROR,  JsonToken.VALUE_NULL);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_ERROR,  JsonToken.VALUE_NULL);	  _parseToken(JsonToken.VALUE_NULL);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
45	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
46	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_minorState!=  MINOR_VALUE_LEADING_WS)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
47	[BUG]  [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState!=  MINOR_VALUE_LEADING_WS)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
48	[BUG]  [BUGGY]  if(_minorState  ==  JsonToken.VALUE_NULL)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  JsonToken.VALUE_NULL)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	12	None	replace
49	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_FLOAT);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_FLOAT);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_FLOAT);	  _parseToken(JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
50	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_FLOAT,  JsonToken.VALUE_NUMBER_INT);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_FLOAT,  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_FLOAT,  JsonToken.VALUE_NUMBER_INT);	  _parseToken(JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
51	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  _currToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  _currToken);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  _currToken);	  _parseToken(JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
53	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
55	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
56	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	123	None	replace
57	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  ||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	||  ch  ==  JsonToken.VALUE_NULL)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
58	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NUMBER_INT)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	123	None	replace
59	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.START_OBJECT)  {	  if    (ch    ==    0x0020)    {    if    (ch    ==    0x0020    ||    ch    <    =    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
60	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.START_OBJECT)  {	  if    (ch    ==    0x0020)    {    if    (ch    ==    0x0020    ||    ch    <    =    0)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
61	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
62	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
63	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
64	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
65	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
66	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
67	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
68	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
69	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
70	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_FUNCTION  ||  _currToken  ==  JsonToken.VALUE_FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_FUNCTION  ||  _currToken  ==  JsonToken.VALUE_FUNCTION)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_FUNCTION  ||  _currToken  ==  JsonToken.VALUE_FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
71	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
72	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
73	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
74	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
75	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	108	1	replace
76	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.VALUE_STRING)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	108	1	replace
77	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)!=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
78	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null  ||  _skipWS(ch)!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null  ||  _skipWS(ch)!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken!=  null  ||  _skipWS(ch)!=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)!=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
79	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||!_skipWS(ch)!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||!_skipWS(ch)!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken  ==  null  ||!_skipWS(ch)!=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)!=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
80	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
81	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  =  0x0010)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  =  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  =  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
82	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
83	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  ==  0x0010)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  ==  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  ==  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
85	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
86	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
87	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null  ||  _skipWS(ch)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null  ||  _skipWS(ch)  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null  ||  _skipWS(ch)  <  =  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
88	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||!_skipWS(ch)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||!_skipWS(ch)  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||!_skipWS(ch)  <  =  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
89	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  ==  0x7F)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  ==  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  ==  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
90	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
91	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  0x7F)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  <  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
92	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  =  0x7F)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  =  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  <  =  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
93	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  >=  0x7F)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  >=  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  >=  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
94	[BUG]  [BUGGY]  if(ch  <  =  0x800)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x800)  {	  if(ch    ==    0x800)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  INT_QUOTE)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
96	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  INT_QUOTE)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
97	[BUG]  [BUGGY]  if(ch  ==  INT_WEEK)  {  [CE]  cannot  find  symbol  INT_WEEK  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WEEK)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WEEK)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_WEEK)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WEEK	83	None	replace
98	[BUG]  [BUGGY]  if(ch  <  =  INT_WEEK)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  =  INT_WEEK)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  INT_WEEK)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_WEEK)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
99	[BUG]  [BUGGY]  if(ch  <  =  0x00)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x00)  {	  if(ch    ==    0x00)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
101	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
102	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	68	1	replace
103	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	68	1	replace
104	[BUG]  [BUGGY]  if(ch  ==  INT_WS)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WS)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WS)  {  if(ch  <  =  0)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
105	[BUG]  [BUGGY]  if(ch  <  =  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x0010)  {	  if(ch    <    0x0010)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
106	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  >=  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  >=  0x0010)  {	  if(ch    <    0x0010)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	2	1	replace
107	[BUG]  [BUGGY]  if(ch  >=  0x0010)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  >=  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  >=  0x0010)  {	  if(ch    <    0x0010)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	2	1	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
109	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
110	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTES  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_SINGLE_QUOTES)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    <    =    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTES	29	None	replace
111	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
112	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
113	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  <  =  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
114	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
115	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  <  =  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
116	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
117	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  0x800)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  ==  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
118	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  0x800)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  <  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
119	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
120	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  =  0x800)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  =  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  <  =  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
121	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
122	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
123	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
124	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
125	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	replace
126	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	replace
127	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  <  =  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  <  =  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE  ||  ch  <  =  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
128	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	replace
129	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE  ||  ch!=  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	replace
130	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  =  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
131	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	||  ch  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
132	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	121	None	replace
133	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	121	None	replace
134	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
135	[BUG]  [BUGGY]  if(ch  ==  INT_WORD)  {  [CE]  cannot  find  symbol  INT_WORD  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WORD)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WORD)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_WORD)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WORD	82	None	replace
136	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
137	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
138	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
139	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
140	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _minorState  =  MINOR_VALUE_LEADING_WS;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _minorState  =  MINOR_VALUE_LEADING_WS;  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _minorState  =  MINOR_VALUE_LEADING_WS;	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
141	[BUG]  [BUGGY]  if(ch  ==  INT_SCRIPT)  {  [CE]  cannot  find  symbol  INT_SCRIPT  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_SCRIPT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_SCRIPT)  {	  if(ch    ==    INT_WS)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SCRIPT	80	None	replace
142	[BUG]  [BUGGY]  if(ch  ==  INT_FIELD_NAMES)  {  [CE]  cannot  find  symbol  INT_FIELD_NAMES  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_FIELD_NAMES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_FIELD_NAMES)  {	  if(ch    ==    INT_WS)    {    	non-compiled	[CE]  cannot  find  symbol  INT_FIELD_NAMES	80	None	replace
143	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  ==  0x00)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  ==  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  ==  0x00)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
144	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
145	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  =  0x00)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  =  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  <  =  0x00)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
146	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  0x00)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  <  0x00)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
147	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  >=  0x00)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  >=  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  >=  0x00)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
148	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    >=    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
149	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
151	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
152	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
153	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _skipWS(ch);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _skipWS(ch);  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _skipWS(ch);  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
154	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	96	1	replace
155	[BUG]  [BUGGY]  if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	96	1	replace
156	[BUG]  [BUGGY]  if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
157	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	96	1	replace
158	[BUG]  [BUGGY]  if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	96	1	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	88	1	replace
160	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	88	1	replace
161	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x80)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x80)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	60	1	replace
162	[BUG]  [BUGGY]  if(ch  <  0x80)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x80)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x80)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	60	1	replace
163	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
164	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
166	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  AssertionFailedError  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
167	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
168	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
169	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
170	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	20	1	replace
171	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  ==  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  ==  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  ==  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
172	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
173	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  0x0010)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  <  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
174	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
175	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  =  0x0010)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  =  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  <  =  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
177	[BUG]  [BUGGY]  if(ch  <  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
178	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x7F  ||  ch  >  0x0020)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x7F)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	3	1	replace
179	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x0020)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x7F  ||  ch  >  0x0020)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x7F)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	3	1	replace
180	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x7F)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x7F)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	3	1	replace
181	[BUG]  [BUGGY]  if(ch  <  0x7F)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x7F)  {	  if    (ch    <    0x0020)    {    if    (ch    <    0x0020    ||    ch    >    0x7F)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	3	1	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
183	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NUMBER_INT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NUMBER_INT)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
184	[BUG]  [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	||  ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
185	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	aughtExceptionHandler.handleMissingException( " ");	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
186	[BUG]  [BUGGY]  AssertionFailedError  <  JsonToken>  m  =  _skipWS(ch);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  AssertionFailedError  <  JsonToken>  m  =  _skipWS(ch);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	AssertionFailedError  <  JsonToken>  m  =  _skipWS(ch);	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	101	1	replace
188	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	101	1	replace
189	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	101	1	replace
190	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	101	1	replace
191	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	101	None	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
193	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	27	1	replace
194	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _minorState);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _minorState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _minorState);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
195	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currToken);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currToken);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
196	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _maximumSize);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _maximumSize);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _maximumSize);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
197	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currentState);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currentState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _currentState);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x10FFFF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x10FFFF)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
199	[BUG]  [BUGGY]  if(ch  ==  0x10FFFF)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x10FFFF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x10FFFF)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x20  ||  ch  ==  0x80)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
201	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x80)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x20  ||  ch  ==  0x80)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
202	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
203	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
204	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
205	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WEEK)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WEEK)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_WEEK)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
206	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState!=    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
207	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState!=    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
209	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
210	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	109	1	replace
211	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	109	1	replace
212	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	109	1	replace
213	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	109	1	replace
214	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
215	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
216	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
217	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
218	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  If(_currToken  ==  null)  {  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  If(_currToken  ==  null)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  If(_currToken  ==  null)  {	  if(_currToken    ==    null)    {    If(_currToken    ==    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
219	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
220	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
221	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
222	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
223	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x7F)  {	  if(ch    ==    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7FF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x7FF)  {	  if(ch    ==    0x7F)    {    	compilable	  [FE]  AssertionFailedError  	103	1	replace
225	[BUG]  [BUGGY]  if(ch  ==  0x7FF)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7FF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x7FF)  {	  if(ch    ==    0x7F)    {    	compilable	  [FE]  AssertionFailedError  	103	1	replace
226	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
227	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  ==  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
228	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken  >=  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken  >=  JsonToken.FIELD_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
229	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_NAME)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
230	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  <  =  0x20  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
231	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
232	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
233	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
234	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
235	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
236	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
237	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  >=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
238	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  AssertionFailedError  	100	1	replace
240	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  AssertionFailedError  	100	1	replace
241	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	100	1	replace
242	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NUMBER_FLOAT)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NUMBER_FLOAT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	100	1	replace
243	[BUG]  [BUGGY]  if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {  [CE]  cannot  find  symbol  INT_WORD  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WORD	50	None	replace
244	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
245	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	124	None	replace
246	[BUG]  [BUGGY]  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {        [BUGGY]  ||  ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	||  ch  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x0020  ||  ch  >  0x7F)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
248	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x0020  ||  ch  >  0x7F)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  <  0x0020  ||  ch  >  0x7FF)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
250	[BUG]  [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  <  0x0020  ||  ch  >  0x7FF)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  0x0020  ||  ch  >  0x7FF)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
251	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
252	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.END_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
253	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
254	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
255	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
256	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTES  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_SINGLE_QUOTES  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTES	104	None	replace
257	[BUG]  [BUGGY]  if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	104	None	replace
258	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch!=    INT_QUOTE)    {    if(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
259	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
260	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
261	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch!=  INT_QUOTE)  {  if(ch  >>  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch!=    INT_QUOTE)    {    if(ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
263	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
264	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
265	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
266	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  <  =  INT_QUOTE  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
267	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
268	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
270	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
271	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	85	1	replace
272	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.FIELD_NAME)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken!=  JsonToken.FIELD_NAME)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.FIELD_NAME)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	85	1	replace
273	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
274	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
275	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_FULL  ||  _currToken!=  JsonToken.VALUE_FULL)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_FULL  ||  _currToken!=  JsonToken.VALUE_FULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_FULL  ||  _currToken!=  JsonToken.VALUE_FULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
276	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  >=  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  >=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  >=  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x80)  {	  if(ch    ==    0x00)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
278	[BUG]  [BUGGY]  if(ch  ==  0x80)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x80)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x80)  {	  if(ch    ==    0x00)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
279	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  >=  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  >=  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  >=  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
280	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
281	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  0x0020)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  ==  0x0020)  {	  if    (ch    ==    0x0020)    {    if    (ch    <    0x0020)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
282	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_ZEROS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState!=    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
283	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_KEY)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_KEY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_KEY)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState!=    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
284	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WEEK)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WEEK)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState!=  MINOR_VALUE_LEADING_WEEK)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState!=    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
285	[BUG]  [BUGGY]  if(ch  ==  INT_SINGLE_QUOTE)  {  [CE]  cannot  find  symbol  INT_SINGLE_QUOTE  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_SINGLE_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_SINGLE_QUOTE)  {	  if(ch!=    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_SINGLE_QUOTE	106	None	replace
286	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
287	[BUG]  [BUGGY]  if(_skipWS(ch))  {  [CE]  incompatible  types  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_skipWS(ch))  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_skipWS(ch))  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null)    {    	non-compiled	[CE]  incompatible  types	56	None	replace
288	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_skipWS(ch)  ==  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_skipWS(ch)  ==  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	56	1	replace
289	[BUG]  [BUGGY]  if(_skipWS(ch)  ==  0)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_skipWS(ch)  ==  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_skipWS(ch)  ==  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	56	1	replace
290	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NULL,  _currToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NULL,  _currToken);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NULL,  _currToken);	  _parseToken(JsonToken.VALUE_NULL);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_STRING)    {    If(_currToken!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
292	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_STRING)    {    If(_currToken!=    JsonToken.VALUE_STRING)    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
293	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
294	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
295	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _currToken  =  _skipWS(ch);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _currToken  =  _skipWS(ch);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _currToken  =  _skipWS(ch);	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
296	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  AssertionFailedError  <  Object>  currToken  =  getCurrentToken();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  AssertionFailedError  <  Object>  currToken  =  getCurrentToken();  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    AssertionFailedError  <  Object>  currToken  =  getCurrentToken();	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
297	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	86	None	replace
298	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_STRING  ||  _minorState  ==  MINOR_VALUE_LEADING_ZEROS)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	86	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
300	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(_currToken    ==    JsonToken.VALUE_STRING)    {    if(_currToken    ==    JsonToken.VALUE_STRING    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
301	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  If(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NUMBER_INT)    {    If(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {	  	non-compiled	[CE]  ';'  expected	111	None	add
302	[BUG]  [BUGGY]  if(ch  ==  INT_WS  ||  ch  >  INT_WS)  {  [CE]  cannot  find  symbol  INT_WS  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WS  ||  ch  >  INT_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WS  ||  ch  >  INT_WS)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WS	52	None	replace
303	[BUG]  [BUGGY]  if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {  [CE]  cannot  find  symbol  INT_WARNING  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {	  if(ch    ==    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WARNING	52	None	replace
304	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  >=  0x800)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  >=  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  >=  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
305	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x20  ||  ch  ==  0x7F)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
307	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x7F)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x20  ||  ch  ==  0x7F)  {	  if(ch    ==    0x0010)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
308	[BUG]  [BUGGY]  aughtExceptionHandler(ch,  _minorState);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  aughtExceptionHandler(ch,  _minorState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	aughtExceptionHandler(ch,  _minorState);	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
309	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
310	[BUG]  [BUGGY]  aughtExceptionHandler(this,  _minorState);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  aughtExceptionHandler(this,  _minorState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	aughtExceptionHandler(this,  _minorState);	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
311	[BUG]  [BUGGY]  if(ch  ==  INT_GLOBAL)  {  [CE]  cannot  find  symbol  INT_GLOBAL  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_GLOBAL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_GLOBAL)  {	  if(ch    <    0x0010)    {    	non-compiled	[CE]  cannot  find  symbol  INT_GLOBAL	2	None	replace
312	[BUG]  [BUGGY]  ParchetState.checkState(ch!=  INT_QUOTE);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  ParchetState.checkState(ch!=  INT_QUOTE);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	ParchetState.checkState(ch!=  INT_QUOTE);	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
313	[BUG]  [BUGGY]  ParchetState.checkState(ch  ==  INT_QUOTE);  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  ParchetState.checkState(ch  ==  INT_QUOTE);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	ParchetState.checkState(ch  ==  INT_QUOTE);	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
314	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  If(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    If(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  ';'  expected	89	None	add
315	[BUG]  [BUGGY]  if(ch  ==  0x7F  ||  ch  ==  INT_VALUE_LEADING_WS)  {  [CE]  cannot  find  symbol  INT_VALUE_LEADING_WS  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F  ||  ch  ==  INT_VALUE_LEADING_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x7F  ||  ch  ==  INT_VALUE_LEADING_WS)  {	  if(ch    ==    0x7F)    {    	non-compiled	[CE]  cannot  find  symbol  INT_VALUE_LEADING_WS	103	None	replace
316	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
317	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(_currToken  ==  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
318	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
319	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _endString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _endString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _endString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
320	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  >=  'r')  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
321	[BUG]  [BUGGY]  if(_minorState  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  <  =  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
322	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  0)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)!=  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
323	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _skipWS(ch)  >=  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
324	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
325	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_WORD  ||  ch  ==  INT_WORD)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
326	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WS  ||  ch  ==  INT_WS)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WS  ||  ch  ==  INT_WS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_WS  ||  ch  ==  INT_WS)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
327	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_WARNING  ||  ch  ==  INT_WARNING)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
328	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WEEK_OF_RANGE  ||  ch  ==  INT_WEEK_OF_RANGE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  INT_WEEK_OF_RANGE  ||  ch  ==  INT_WEEK_OF_RANGE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  INT_WEEK_OF_RANGE  ||  ch  ==  INT_WEEK_OF_RANGE)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
329	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
330	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
331	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JSONToken.VALUE_NULL)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JSONToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JSONToken.VALUE_NULL)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
332	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WEEK)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_WEEK  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WEEK)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WEEK)  {	  if(_currToken!=    null)    {    if(_currToken    ==    null    ||    _currToken!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_WEEK	71	None	replace
333	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _type);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _type);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _type);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
334	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
335	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	101	1	replace
337	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _minorState  ==  FEAT_MASK_ALLOW_UNQUOTED_NAMES)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	compilable	  [FE]  AssertionFailedError  	101	1	replace
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
339	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.END_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
340	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken!=  JsonToken.VALUE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken!=  JsonToken.VALUE_UNKNOWN)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken!=  JsonToken.VALUE_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
341	[BUG]  [BUGGY]  if(_minorState  ==  com.fasterxml.jackson.core.JsonToken.VALUE_STRING)  {  [CE]  incomparable  types:  int  and  JsonToken  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  com.fasterxml.jackson.core.JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  com.fasterxml.jackson.core.JsonToken.VALUE_STRING)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    >=    INT_QUOTE)    {    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	115	None	replace
342	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  >=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    >=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	115	1	replace
343	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  >=  INT_QUOTE)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    >=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	115	1	replace
344	[BUG]  [BUGGY]  if(ch  ==  INT_WS)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WS)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WS)  {  if(ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
345	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	123	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	123	1	replace
347	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	123	1	replace
348	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	123	None	replace
349	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
350	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  <  =  0)  {	  if(ch    ==    INT_QUOTE)    {    if(ch    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
351	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JSONToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JSONToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JSONToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
352	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
353	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.START_OBJECT  ||  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	90	1	replace
354	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NUMBER_FLOAT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FLOAT)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
355	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JSONToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JSONToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JSONToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
356	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
357	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
358	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString()  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString()  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString()	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  ';'  expected	64	None	replace
359	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_KEY)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_KEY)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_KEY)  {  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
360	[BUG]  [BUGGY]  if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0x20  ||  ch  >=  INT_QUOTE)  {	  if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
361	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_KEY)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_KEY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _minorState  ==  MINOR_VALUE_LEADING_KEY)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
362	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken  ==  null  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
363	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  >=  0x0020)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  >=  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  >=  0x0020)  {	  if    (ch    ==    0x0020)    {    if    (ch    >=    0x0020)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
364	[BUG]  [BUGGY]  if(_currToken  ==  null)  {  if(ch  >=  0x0020)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  null)  {  if(ch  >=  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  null)  {  if(ch  >=  0x0020)  {	  if    (ch    ==    0x0020)    {    if    (ch    >=    0x0020)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
365	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  null)  {	  if(_currToken    ==    null)    {    if(_currToken    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
366	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {	  if(_currToken    ==    null)    {    if(_currToken    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
367	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(_currToken!=  JsonToken.START_OBJECT)  {	  if(_currToken    ==    null)    {    if(_currToken    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
368	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
369	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  0x0020)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  <  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  <  0x0020)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0x0020)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
370	[BUG]  [BUGGY]  if(_currToken  ==  null)  {  if(ch  <  0x0020)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  null)  {  if(ch  <  0x0020)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  null)  {  if(ch  <  0x0020)  {	  if    (ch    <    0x0020)    {    if    (ch    <    =    0x0020)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
371	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
372	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
373	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
374	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
375	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
376	[BUG]  [BUGGY]  if(ch  ==  INT_WARNING)  {  [CE]  cannot  find  symbol  INT_WARNING  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WARNING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WARNING)  {	  if(ch    ==    INT_WS)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WARNING	80	None	replace
377	[BUG]  [BUGGY]  if(ch  ==  INT_WEEK_OF_YEAR  ||  ch  ==  INT_WEEK_OF_YEAR)  {  [CE]  cannot  find  symbol  INT_WEEK_OF_YEAR  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_WEEK_OF_YEAR  ||  ch  ==  INT_WEEK_OF_YEAR)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_WEEK_OF_YEAR  ||  ch  ==  INT_WEEK_OF_YEAR)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_WEEK_OF_YEAR	50	None	replace
378	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  <  0x20  ||  ch  >  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
379	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  >=  0x20  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
380	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  0x20  ||  ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  ==  0x20  ||  ch  >=  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  ==  0x20  ||  ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
381	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
382	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
383	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
384	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSONToken.VALUE_STRING)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSONToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSONToken.VALUE_STRING)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
385	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	124	None	replace
386	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_NUMBER_INT)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	124	None	replace
387	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.FIELD_NAME)  {  if(_currToken!=  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.FIELD_NAME)    {    if(_currToken!=  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	74	None	add
388	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  >=  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  >=  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  >=  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
389	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.VALUE_STRING)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	121	None	replace
390	[BUG]  [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startString();  }  [CE]  incomparable  types:  int  and  JsonToken  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  JsonToken.VALUE_STRING)  {  if(_currToken!=  JsonToken.FIELD_NAME)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incomparable  types:  int  and  JsonToken	121	None	replace
391	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_STRING  ||  _currToken  ==  JsonToken.VALUE_STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
392	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_WS)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	80	None	replace
393	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
394	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x800)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x800)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  0x800)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
395	[BUG]  [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x2000)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  <  0x0010)  {  if(ch  <  0x2000)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    <    0x0010)    {    if(ch  <  0x2000)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
396	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_EMBEDDED_OBJECT);	  _parseToken(JsonToken.VALUE_NULL);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
397	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  <  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
398	[BUG]  [BUGGY]  if(ch  ==  0x00)  {  if(ch  >  0x00)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x00)  {  if(ch  >  0x00)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x00)    {    if(ch  >  0x00)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
399	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken!=  JsonToken.VALUE_UNKNOWN  ||  _currToken  ==  JsonToken.VALUE_UNKNOWN)  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
400	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FIRST)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FIRST)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER_INT  ||  _currToken  ==  JsonToken.VALUE_NUMBER_FIRST)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
401	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  if(ch  >  0x7F)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x7F)  {  if(ch  >  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x7F)    {    if(ch  >  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
402	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NUMBER)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_NUMBER)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_NUMBER)  {  if(_currToken!=  JsonToken.VALUE_NULL)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
403	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  _minorState);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  _minorState);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  _minorState);	  _parseToken(JsonToken.VALUE_NUMBER_INT);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
404	[BUG]  [BUGGY]  if(_skipWS)  {  [CE]  cannot  find  symbol  _skipWS  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_skipWS)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_skipWS)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  _skipWS	56	None	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
406	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_STRING  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken    ==    JsonToken.VALUE_STRING    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	73	1	replace
407	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_STRING)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	124	None	replace
408	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	124	None	replace
409	[BUG]  [BUGGY]  if(ch  ==  0x800)  {  if(ch  >  0x7F)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x800)  {  if(ch  >  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x800)    {    if(ch  >  0x7F)  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
410	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x10  ||  ch  ==  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  0x10  ||  ch  ==  0x7F)  {	  if(ch    ==    0x00)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
412	[BUG]  [BUGGY]  if(ch  ==  0x10  ||  ch  ==  0x7F)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x10  ||  ch  ==  0x7F)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  0x10  ||  ch  ==  0x7F)  {	  if(ch    ==    0x00)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
413	[BUG]  [BUGGY]  if(_skipWS  >  0)  {  [CE]  cannot  find  symbol  _skipWS  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_skipWS  >  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_skipWS  >  0)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _minorState    ==    MINOR_VALUE_LEADING_WS)    {    	non-compiled	[CE]  cannot  find  symbol  _skipWS	76	None	replace
414	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER  ||  _currToken!=  JsonToken.VALUE_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken!=  JsonToken.VALUE_NULL)  {  if(_currToken  ==  JsonToken.VALUE_NUMBER  ||  _currToken!=  JsonToken.VALUE_NUMBER)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    if(_currToken  ==  JsonToken.VALUE_NUMBER  ||  _currToken!=  JsonToken.VALUE_NUMBER)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
415	[BUG]  [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _origBufferLen);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      {        [BUGGY]  _parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _origBufferLen);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	_parseToken(JsonToken.VALUE_NUMBER_INT,  ch,  _origBufferLen);	  _parseToken(JsonToken.VALUE_NUMBER_INT,    ch);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
416	[BUG]  [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  >  0x20  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x20  ||  ch  ==  INT_QUOTE)  {  if(ch  >  0x20  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x20    ||    ch    ==    INT_QUOTE)    {    if(ch  >  0x20  ||  ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
417	[BUG]  [BUGGY]  if(ch  <  =  0)  {  If(_currToken  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(ch  <  =  0)  {  If(_currToken  ==  null)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  <  =  0)  {  If(_currToken  ==  null)  {	  if(_currToken    ==    null)    {    If(_currToken    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
418	[BUG]  [BUGGY]  aughtExceptionHandler(ch,  _currToken);  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  aughtExceptionHandler(ch,  _currToken);  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	aughtExceptionHandler(ch,  _currToken);	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
420	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  if(_currToken!=  null)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
421	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  return  _startString();  }  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  if(_currToken!=  null)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA	64	None	replace
422	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	64	1	replace
423	[BUG]  [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState!=  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	64	1	replace
424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
425	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_WS)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(null  ==  _currToken)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(ch  ==  INT_QUOTE)  {  if(null  ==  _currToken)  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
427	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(null  ==  _currToken)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(null  ==  _currToken)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTE)  {  if(null  ==  _currToken)  {  return  _startString();  }	  if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
428	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    if(ch  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
430	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.START_OBJECT)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
431	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  return  _startString();  }  if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    return    _startString();    }    if(ch  <  =  0)  {  if(_currToken!=  null)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
433	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  if(_currToken    ==    JsonToken.VALUE_NULL)    {    if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.END_ARRAY)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
434	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {        [BUGGY]  if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_minorState  ==  MINOR_VALUE_LEADING_COMMA)  {	  if(_currToken    ==    null)    {    if(_currToken    ==    null    ||    _skipWS(ch)    >=    INT_QUOTE)    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA	115	None	replace
435	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.START_OBJECT  ||  _currToken  ==  JsonToken.VALUE_NULL)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
436	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken    ==    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken  ==  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_ARRAY)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
437	[BUG]  [BUGGY]  if(ch  ==  0x0010)  {  if(ch  >  0x0010)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(ch  ==  0x0010)  {  if(ch  >  0x0010)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch    ==    0x0010)    {    if(ch  >  0x0010)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
438	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  ||  _currToken  ==  JsonToken.START_OBJECT)  {  if(_currToken!=  JsonToken.VALUE_NUMBER  ||  _currToken  ==  JsonToken.START_OBJECT)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.START_OBJECT)    {    if(_currToken!=  JsonToken.VALUE_NUMBER  ||  _currToken  ==  JsonToken.START_OBJECT)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
439	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(_minorState  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(_minorState  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(_minorState  ==  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
440	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  =  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  if(ch  <  =  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  null)  {  if(ch  <  =  INT_QUOTE)  {  return  _finishString();  }	  if(_currToken!=    null)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
441	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]        AssertionFailedError      [CONTEXT]      {        [BUGGY]  if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(ch  ==  INT_QUOTES  ||  ch  ==  INT_QUOTES)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTES)    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	104	None	replace
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
443	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.VALUE_NULL)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken  ==  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken    ==    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
444	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	117	1	replace
445	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken!=  JsonToken.VALUE_NULL)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken!=  JsonToken.VALUE_NULL)  {  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=  JsonToken.VALUE_NULL  &&  _currToken!=  JsonToken.VALUE_NULL)  {	  if(_currToken!=    JsonToken.VALUE_NULL    ||    _currToken!=    JsonToken.VALUE_NULL)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	117	1	replace
446	[BUG]  [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSON_COLON)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSON_COLON)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    JsonToken.VALUE_STRING)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  JsonToken.VALUE_STRING)  {  if(_currToken!=  JSON_COLON)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	123	1	replace
448	[BUG]  [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {        [BUGGY]  if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken  ==  JsonToken.VALUE_NULL)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(_currToken!=    JsonToken.VALUE_NULL)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	123	1	replace
449	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _minorState;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _minorState;  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _minorState;  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
450	[BUG]  [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {        [BUGGY]  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _startString();  }  [BUGGY]      ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  _updateTokenLocation();  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	if(_currToken!=    null)    {    ch    =    _skipWS(ch);    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(_currToken!=  null)  {  ch  =  _skipWS(ch);  if(ch  <  =  0)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
