bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  }  [CE]  orphaned  case  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  orphaned  case	35	None	replace
2	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  [CE]  duplicate  case  label  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  duplicate  case  label	35	None	replace
3	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clon  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clon  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clon	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  orphaned  case	35	None	replace
4	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;  break;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;  break;	          _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  ')'  expected	32	None	replace
5	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;  break;  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;  break;	          _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  array  required,  but  int  found	32	None	replace
6	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  MAJOR_INITIAL);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  MAJOR_INITIAL);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  MAJOR_INITIAL);	  _binaryValue    =    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
7	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
8	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneByName(ch,  _majorState);	  _binaryValue    =    _binaryValue.cloneByName(ch);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
9	[BUG]  [BUGGY]  _binaryValue  =  ch.cloneByName(_binaryValue);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  ch.cloneByName(_binaryValue);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  ch.cloneByName(_binaryValue);	  _binaryValue    =    _binaryValue.cloneByName(ch);    	non-compiled	[CE]  int  cannot  be  dereferenced	41	None	replace
10	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer,  _majorState);	  return    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  return  _binaryValue(ch,  MAJOR_INITIAL);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  MAJOR_INITIAL);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  MAJOR_INITIAL);	  return    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]  return  _binaryValue(ch,  _numTypesValid);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _numTypesValid);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _numTypesValid);	  return    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBuffer,  _inputPtr);	  _binaryValue    =    _startInitialValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr]);	  _binaryValue    =    _startInitialValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initialValue(ch,  _inputPtr);	  _binaryValue    =    _startInitialValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  _inputBuffer.length;  break;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue  +  _inputBuffer.length;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue  +  _inputBuffer.length;  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
17	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _binaryValue;  break;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _binaryValue;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  +  _binaryValue;  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
18	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  +  _binaryValue;  break;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr]  +  _binaryValue;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr]  +  _binaryValue;  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
19	[BUG]  [BUGGY]  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);	  _binaryValue    =    _binaryValue.clone();    ((    _binaryValue!=    null)&&(_binaryValue.isEmpty()))?    _binaryValue.clone()    :    null);    	non-compiled	[CE]  not  a  statement	50	None	replace
20	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.nextToken();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.nextToken();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.nextToken();	  _binaryValue    =    _binaryValue.next();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
21	[BUG]  [BUGGY]  _binaryValue  =  _startInitValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitValue(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitValue(ch,  _majorState);	  _binaryValue    =    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
22	[BUG]  [BUGGY]  _binaryValue  =  _startInitValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitValue(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitValue(ch,  _inputPtr);	  _binaryValue    =    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
23	[BUG]  [BUGGY]  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);	  _binaryValue    =    _binaryValue.clone();    ((    _binaryValue!=    null)&&(_binaryValue.length()    >    0))?    _binaryValue.clone()    :    null);    	non-compiled	[CE]  not  a  statement	51	None	replace
24	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr]);	  return    _binaryValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
25	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer.length);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer.length);	  return    _binaryValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
26	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _inputPtr);  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _inputPtr);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.get(ch,  _inputPtr);  break;	          _binaryValue    =    _binaryValue.get(ch);    break;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
27	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _majorState);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _majorState);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.get(ch,  _majorState);  break;	          _binaryValue    =    _binaryValue.get(ch);    break;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
28	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  MAJOR_INITIAL);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  MAJOR_INITIAL);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  MAJOR_INITIAL);	  _binaryValue    =    _startInitialValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
29	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr++);	  _binaryValue    =    _binaryValue(ch,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
30	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++];  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++];	  _binaryValue    =    _binaryValue(ch,    _inputPtr++];    	non-compiled	[CE]  ')'  expected	20	None	replace
31	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    _startInitialValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
32	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
33	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _majorState);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _majorState);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
34	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue(ch);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.getValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.getValue(ch);	  _binaryValue    =    _binaryValue.getValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
35	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr++]  &  0xFF;	  _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ')'  expected	19	None	replace
36	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xFF;	  _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  array  required,  but  int  found	19	None	replace
37	[BUG]  [BUGGY]  return  _binaryValue.startInit(ch);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.startInit(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.startInit(ch);	  return    _binaryValue.startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
38	[BUG]  [BUGGY]  return  _binaryValue.startInitValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.startInitValue(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.startInitValue(ch,  _majorState);	  return    _binaryValue.startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
39	[BUG]  [BUGGY]  return  _binaryValue.startInitValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.startInitValue(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.startInitValue(ch,  _inputPtr);	  return    _binaryValue.startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
40	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr]);	  _binaryValue    =    _binaryValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  return  _binaryValue[_inputPtr];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue[_inputPtr];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue[_inputPtr];	  return    _binaryValue[ch];    	non-compiled	[CE]  incompatible  types	10	None	replace
42	[BUG]  [BUGGY]  return  _binaryValue[ch]  &  0xFF;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue[ch]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue[ch]  &  0xFF;	  return    _binaryValue[ch];    	non-compiled	[CE]  incompatible  types	10	None	replace
43	[BUG]  [BUGGY]  return  _binaryValue.length;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.length;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.length;	  return    _binaryValue[ch];    	non-compiled	[CE]  incompatible  types	10	None	replace
44	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  incompatible  types	25	None	replace
45	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  ';'  expected	25	None	replace
46	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clon  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clon  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clon	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  ';'  expected	25	None	replace
47	[BUG]  [BUGGY]  return  _initValue(ch,  _binaryValue);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _initValue(ch,  _binaryValue);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _initValue(ch,  _binaryValue);	  return    _initValue(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
48	[BUG]  [BUGGY]  return  _binaryValue.initValue(ch);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.initValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.initValue(ch);	  return    _initValue(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
49	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock(ch);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneBlock(ch);	  _binaryValue    =    _binaryValue.cloneBlock();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
50	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.copyCurrentStructure(ch);	  _binaryValue    =    _binaryValue.cloneBlock();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
51	[BUG]  [BUGGY]  _binaryValue  =  _initialValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _initialValue(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initialValue(ch,  _majorState);	  _binaryValue    =    _initialValue(ch);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
52	[BUG]  [BUGGY]  nullValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [CE]  cannot  find  symbol  nullValue  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  nullValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	nullValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  cannot  find  symbol  nullValue	23	None	replace
53	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.copyCurrentStructure(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.copyCurrentStructure(ch);  break;	          _binaryValue    =    _binaryValue.cloneTree();    break;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
54	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.getValue();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.getValue();  break;	          _binaryValue    =    _binaryValue.cloneTree();    break;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
55	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  ch,  _inputPtr);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
56	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
57	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr,  _majorState);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer,  _inputPtr,  _majorState);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
58	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr++);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr++);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer,  _inputPtr++);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
59	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++];  break;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++];  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr++];  break;	          _binaryValue    =    _binaryValue[_inputPtr++];    break;    	non-compiled	[CE]  ')'  expected	34	None	replace
60	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
61	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currInputProcessed);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currInputProcessed);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currInputProcessed);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
62	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  ')'  expected	27	None	replace
63	[BUG]  [BUGGY]  return  _binaryValue.init(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.init(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch,  _majorState);	  return    _binaryValue.init(ch);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
64	[BUG]  [BUGGY]  return  _binaryValue.init(ch,  _modifiers);  [CE]  cannot  find  symbol  _modifiers  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.init(ch,  _modifiers);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch,  _modifiers);	  return    _binaryValue.init(ch);    	non-compiled	[CE]  cannot  find  symbol  _modifiers	43	None	replace
65	[BUG]  [BUGGY]  return  _binaryValue.init(ch,  _minorSize);  [CE]  cannot  find  symbol  _minorSize  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.init(ch,  _minorSize);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch,  _minorSize);	  return    _binaryValue.init(ch);    	non-compiled	[CE]  cannot  find  symbol  _minorSize	43	None	replace
66	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.get(ch,  _inputPtr);	          _binaryValue    =    _binaryValue.get(ch);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
67	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.get(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.get(ch,  _majorState);	          _binaryValue    =    _binaryValue.get(ch);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
68	[BUG]  [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  _binaryValue,  _majorState);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
69	[BUG]  [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _numTypesValid);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _numTypesValid);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  _binaryValue,  _numTypesValid);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
70	[BUG]  [BUGGY]  return  _binaryValue(ch,  _startInitValue);  [CE]  cannot  find  symbol  _startInitValue  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _startInitValue);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _startInitValue);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol  _startInitValue	8	None	replace
71	[BUG]  [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  _binaryValue,  _inputPtr);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
72	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  ch;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  ch;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  ch;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF,    _majorState;    	non-compiled	[CE]  ';'  expected	7	None	replace
73	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();  [CE]  duplicate  case  label  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  duplicate  case  label	24	None	replace
74	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _majorState);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
75	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _inputPtr);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
76	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBufferPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _inputBufferPtr);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	26	None	replace
77	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  0xFF);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
78	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  ch[_inputPtr++]);  [CE]  array  required,  but  int  found  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  ch[_inputPtr++]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  ch[_inputPtr++]);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  array  required,  but  int  found	5	None	replace
79	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  ch,  _inputPtr++]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  ch,  _inputPtr++]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  ch,  _inputPtr++]);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  ')'  expected	5	None	replace
80	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.byteValue(_inputBuffer,  _inputPtr++];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.byteValue(_inputBuffer,  _inputPtr++];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.byteValue(_inputBuffer,  _inputPtr++];	  _binaryValue    =    _binaryValue.length[_inputPtr++];    	non-compiled	[CE]  ')'  expected	46	None	replace
81	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);  }  [CE]  orphaned  case  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	non-compiled	[CE]  orphaned  case	36	None	replace
82	[BUG]  [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	non-compiled	[CE]  incompatible  types	36	None	replace
83	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getInitialValue();  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.getInitialValue();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.getInitialValue();  break;	          _binaryValue    =    _binaryValue.getIntValue();    break;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();	  	compilable	  [FE]  NullPointerException  	22	1	add
85	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();	  	compilable	  [FE]  NullPointerException  	22	1	add
86	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binary.clone();  _binaryValue  =  _binaryValue.clone();  [CE]  cannot  find  symbol  _binary  [FE]      NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binary.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binary.clone();  _binaryValue  =  _binaryValue.clone();	  	non-compiled	[CE]  cannot  find  symbol  _binary	22	None	add
87	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  break;  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  break;	  	non-compiled	[CE]  unreachable  statement	22	None	add
88	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  [CE]  duplicate  case  label  [FE]          NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:	  	non-compiled	[CE]  duplicate  case  label	22	None	add
89	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
90	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	_binaryValue  =  _binaryValue.clone();  return  _startValue(ch);	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  NullPointerException  	36	1	replace
91	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  return  _startValue(ch);	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  NullPointerException  	36	1	replace
92	[BUG]  [BUGGY]  return  _initValue(ch,  _binaryValue.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _initValue(ch,  _binaryValue.length);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _initValue(ch,  _binaryValue.length);	  return    _initValue(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
93	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  ch);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
94	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  _inputPtr);	  return    _binaryValue(ch,    _inputBuffer,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
95	[BUG]  [BUGGY]  return  _binaryValue[ch  -  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue[ch  -  1];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue[ch  -  1];	  return    _binaryValue[ch];    	non-compiled	[CE]  incompatible  types	10	None	replace
96	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  break;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  +  _inputPtr;  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  incompatible  types	33	None	replace
97	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue  +  _inputBuffer[_inputPtr++];  break;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue  +  _inputBuffer[_inputPtr++];  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue  +  _inputBuffer[_inputPtr++];  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	33	None	replace
98	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr  +  _binaryValue);  break;  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr  +  _binaryValue);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr  +  _binaryValue);  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  ']'  expected	33	None	replace
99	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.substring(0,  _binaryValue.length());	  _binaryValue    =    _binaryValue.trim();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
100	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];  break;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];  break;	          _binaryValue    =    _binaryValue[_inputPtr++];    break;    	non-compiled	[CE]  ')'  expected	34	None	replace
101	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.next();  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.next();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.next();  break;	          _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
102	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.removeFirst();  break;	          _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
103	[BUG]  [BUGGY]  _binaryValue  =  _binaryValues.get(ch);  break;  [CE]  cannot  find  symbol  _binaryValues  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValues.get(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValues.get(ch);  break;	          _binaryValue    =    _binaryValue.get(ch);    break;    	non-compiled	[CE]  cannot  find  symbol  _binaryValues	15	None	replace
104	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  break;	          _binaryValue    =    _binaryValue.toString();    break;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  AssertionFailedError  	24	1	replace
106	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  AssertionFailedError  	24	1	replace
107	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  NullPointerException  	24	1	replace
108	[BUG]  [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue  ==  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  NullPointerException  	24	1	replace
109	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBuffer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBuffer);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _inputBuffer);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
110	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _binaryValue);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _binaryValue);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _binaryValue);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
111	[BUG]  [BUGGY]  return  _binaryValue(_inputBuffer,  _inputPtr[_inputPtr++]);  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(_inputBuffer,  _inputPtr[_inputPtr++]);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(_inputBuffer,  _inputPtr[_inputPtr++]);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  array  required,  but  int  found	5	None	replace
112	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _majorState);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
113	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null	  _binaryValue    =    _binaryValue.clone();    ((    _binaryValue!=    null)&&(_binaryValue.isEmpty()))?    _binaryValue.clone()    :    null);    	non-compiled	[CE]  not  a  statement	50	None	replace
114	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  nu  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  nu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  nu	  _binaryValue    =    _binaryValue.clone();    ((    _binaryValue!=    null)&&(_binaryValue.isEmpty()))?    _binaryValue.clone()    :    null);    	non-compiled	[CE]  not  a  statement	50	None	replace
115	[BUG]  [BUGGY]  _binaryValue  =  _binaryValues.get(ch);  [CE]  cannot  find  symbol  _binaryValues  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValues.get(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValues.get(ch);	          _binaryValue    =    _binaryValue.get(ch);    	non-compiled	[CE]  cannot  find  symbol  _binaryValues	18	None	replace
116	[BUG]  [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu  [CE]  orphaned  case  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  orphaned  case	35	None	replace
117	[BUG]  [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [CE]  cannot  find  symbol  NULL  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  cannot  find  symbol  NULL	35	None	replace
118	[BUG]  [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [CE]  cannot  find  symbol  NULL  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_majorState  ==  NULL)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  cannot  find  symbol  NULL	35	None	replace
119	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneBlock();  break;	          _binaryValue    =    _binaryValue.cloneTree();    break;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
120	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;  break;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++]  &  0xFF;  break;	          _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  ')'  expected	32	None	replace
121	[BUG]  [BUGGY]  _binaryValue  =  _currInputProcessed[_inputPtr++]  &  0xFF;  [CE]  array  required,  but  long  found  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _currInputProcessed[_inputPtr++]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _currInputProcessed[_inputPtr++]  &  0xFF;	  _binaryValue    =    _binaryBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  array  required,  but  long  found	30	None	replace
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  	compilable	  [FE]  NullPointerException  	22	1	add
123	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  	compilable	  [FE]  NullPointerException  	22	1	add
124	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }	  	compilable	  [FE]  NullPointerException  	22	1	add
125	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }	  	compilable	  [FE]  NullPointerException  	22	1	add
126	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValu	  	non-compiled	[CE]  ';'  expected	22	None	add
127	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getIntValue(ch);  break;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.getIntValue(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.getIntValue(ch);  break;	          _binaryValue    =    _binaryValue.getIntValue();    break;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
128	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.intValue();  break;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.intValue();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.intValue();  break;	          _binaryValue    =    _binaryValue.getIntValue();    break;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
129	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length++];  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length++];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer.length++];	  _binaryValue    =    _binaryValue(ch,    _inputPtr++];    	non-compiled	[CE]  ')'  expected	20	None	replace
130	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1];	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  ')'  expected	27	None	replace
131	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr  +  1);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
132	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer.length);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer.length);	  _binaryValue    =    _binaryValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
133	[BUG]  [BUGGY]  _binaryValue  =  _startValue(ch);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startValue(ch);	  _binaryValue    =    _initialValue(ch);    	non-compiled	[CE]  incompatible  types	39	None	replace
134	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currInputProcessed;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currInputProcessed;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currInputProcessed;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF,    _majorState;    	non-compiled	[CE]  ';'  expected	7	None	replace
135	[BUG]  [BUGGY]  return  _startInitValue(ch,  MAJOR_INITIAL);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _startInitValue(ch,  MAJOR_INITIAL);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  MAJOR_INITIAL);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
136	[BUG]  [BUGGY]  return  _binaryValue(ch,  _minorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _minorState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _minorState);	  return    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
137	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneByName(ch,  _inputPtr);	  _binaryValue    =    _binaryValue.cloneByName(ch);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
138	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  MAJOR_INITIAL);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch,  MAJOR_INITIAL);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneByName(ch,  MAJOR_INITIAL);	  _binaryValue    =    _binaryValue.cloneByName(ch);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
139	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.substring(0,  _binaryValue.length()  -  1);	  _binaryValue    =    _binaryValue.trim();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
140	[BUG]  [BUGGY]  _binaryValue  =  _initValue(ch);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _initValue(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initValue(ch);	  return    _initValue(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
141	[BUG]  [BUGGY]  return  _binaryValue.init(ch,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.init(ch,  _origBufferLen);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch,  _origBufferLen);	  return    _binaryValue.init(ch);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
142	[BUG]  [BUGGY]  return  _binaryValue.init(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue.init(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch,  _inputPtr);	  return    _binaryValue.init(ch);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
143	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch);  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneByName(ch);  break;	          _binaryValue    =    _binaryValue.cloneTree();    break;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
144	[BUG]  [BUGGY]  return  _binaryValue(ch,  _currInputProcessed);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _currInputProcessed);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _currInputProcessed);	  return    _binaryValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
145	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValueAfterInit(ch,  _inputBuffer,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch,  _inputBuffer,  _inputPtr);	  return    _binaryValueAfterInit(ch);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
146	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState  +  1;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState  +  1;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF    +    1;    	non-compiled	[CE]  ';'  expected	45	None	replace
147	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferLen);  [CE]  cannot  find  symbol  _inputBufferLen  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferLen);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferLen);	  _binaryValue    =    _binaryValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferLen	53	None	replace
148	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
149	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);	  return    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  AssertionFailedError  	36	1	replace
151	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [FE]  AssertionFailedError  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  AssertionFailedError  	36	1	replace
152	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  NullPointerException  	36	1	replace
153	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _startValue(ch);    	compilable	  [FE]  NullPointerException  	36	1	replace
154	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  NullPointerException  	25	1	replace
155	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  NullPointerException  	25	1	replace
156	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValu  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_inputPtr  >=  _inputEnd)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValu	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    }    else    {    _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  not  a  statement	25	None	replace
157	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	          _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  incompatible  types	32	None	replace
158	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr++]  &  0xFF;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr++]  &  0xFF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferPtr++]  &  0xFF;	  _binaryValue    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ')'  expected	19	None	replace
159	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xF;  [CE]  array  required,  but  int  found  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xF;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.length[_inputPtr++]  &  0xF;	  _binaryValue    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  array  required,  but  int  found	28	None	replace
160	[BUG]  [BUGGY]  _binaryValue  =  _startInitValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitValue(ch,  _inputBufferPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitValue(ch,  _inputBufferPtr);	  _binaryValue    =    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	42	None	replace
161	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _modifiers);  [CE]  cannot  find  symbol  _modifiers  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _modifiers);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _modifiers);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer);    	non-compiled	[CE]  cannot  find  symbol  _modifiers	31	None	replace
162	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _index);  [CE]  cannot  find  symbol  _index  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _index);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _index);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer);    	non-compiled	[CE]  cannot  find  symbol  _index	31	None	replace
163	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.charAt(_inputPtr++];  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.charAt(_inputPtr++];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.charAt(_inputPtr++];	  _binaryValue    =    _binaryValue.length[_inputPtr++];    	non-compiled	[CE]  ')'  expected	46	None	replace
164	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.keySet()[_inputPtr++];  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.keySet()[_inputPtr++];  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.keySet()[_inputPtr++];	  _binaryValue    =    _binaryValue.length[_inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
165	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null	  _binaryValue    =    _binaryValue.clone();    ((    _binaryValue!=    null)&&(_binaryValue.length()    >    0))?    _binaryValue.clone()    :    null);    	non-compiled	[CE]  not  a  statement	51	None	replace
166	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]  &  _inputEnd);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
167	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++],  _currInputProcessed);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer[_inputPtr++]);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
168	[BUG]  [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initialValue(ch,  _inputBuffer,  _inputPtr);	  _binaryValue    =    _startInitialValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
169	[BUG]  [BUGGY]  _binaryValue  =  _inputInitialValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputInitialValue(ch,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputInitialValue(ch,  _inputPtr);	  _binaryValue    =    _startInitialValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
170	[BUG]  [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _initialValue(ch,  _inputBufferPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initialValue(ch,  _inputBufferPtr);	  _binaryValue    =    _initialValue(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	39	None	replace
171	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  1);	  _binaryValue    =    _startInitialValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
172	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  2);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  2);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  2);	  _binaryValue    =    _startInitialValue(ch,    _majorState);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
173	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu  [CE]  orphaned  case  [FE]        NullPointerException      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValu	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    case    MAJOR_INITIAL:    return    _binaryValue.clone();    	non-compiled	[CE]  orphaned  case	35	None	replace
174	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  break;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.trim();  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.trim();  break;	          _binaryValue    =    _binaryValue.toString();    break;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
175	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBuffer.length);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBuffer.length);	  _binaryValue    =    _startInitialValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
176	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr++);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]                  AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr++);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBufferPtr++);	  _binaryValue    =    _startInitialValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	40	None	replace
177	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr  +  1);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]                    AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr  +  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBufferPtr  +  1);	  _binaryValue    =    _startInitialValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	40	None	replace
178	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF,  _majorState;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF,  _majorState;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF,  _majorState;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xF;    	non-compiled	[CE]  ';'  expected	6	None	replace
179	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  0,  _inputPtr);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  0,  _inputPtr);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  0,  _inputPtr);	  _binaryValue    =    _binaryValue(ch,    _inputPtr);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
180	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currentState;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currentState;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _currentState;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF,    _majorState;    	non-compiled	[CE]  ';'  expected	7	None	replace
181	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.parse(ch);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.parse(ch);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.parse(ch);	          _binaryValue    =    _binaryValue.get(ch);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
182	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  1);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  1);	  _binaryValue    =    _binaryValue(ch,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
184	[BUG]  [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	if(_binaryValue!=  null)  {  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  return  _startValue(ch);  }	  _binaryValue    =    _binaryValue.clone();    _binaryValue    =    _binaryValue.clone();    	compilable	  [FE]  AssertionFailedError  	23	1	replace
185	[BUG]  [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  _binaryValue  =  _binaryValue.clone();  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  _binaryValue  =  _binaryValue.clone();  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue        =        _binaryValue.clone();        _binaryValue    =    _binaryValue.clone();    _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF;  _binaryValue  =  _binaryValue.clone();	  	non-compiled	[CE]  incompatible  types	22	None	add
186	[BUG]  [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _startInitValue(ch,  _binaryValue,  _origBufferLen);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  _binaryValue,  _origBufferLen);	  return    _startInitValue(ch,    _binaryValue);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
187	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currentState);  [CE]  cannot  find  symbol  _currentState  [FE]              AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currentState);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++,  _currentState);	  _binaryValue    =    _binaryValue(ch,    _inputBuffer,    _inputPtr++];    	non-compiled	[CE]  cannot  find  symbol  _currentState	27	None	replace
188	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++];  break;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++];  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++];  break;	          _binaryValue    =    _binaryValue    +    _inputPtr;    break;    	non-compiled	[CE]  incompatible  types	33	None	replace
189	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBufferLen);  [CE]  cannot  find  symbol  _inputBufferLen  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  return  _binaryValue(ch,  _inputBufferLen);  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBufferLen);	  return    _binaryValue(ch,    _inputBufferPtr);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferLen	49	None	replace
190	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.parse(ch);  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.parse(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.parse(ch);  break;	          _binaryValue    =    _binaryValue.get(ch);    break;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
191	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.remove(ch);  break;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:      [BUGGY]  _binaryValue  =  _binaryValue.remove(ch);  break;  [BUGGY]        case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.remove(ch);  break;	          _binaryValue    =    _binaryValue.get(ch);    break;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
