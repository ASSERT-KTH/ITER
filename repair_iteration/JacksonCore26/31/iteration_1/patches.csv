bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputPtr);	  _binaryValue    =    _startInitialValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
2	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _majorState);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _majorState);	  _binaryValue    =    _startInitialValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  return  _binaryValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue(ch,  _majorState);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _majorState);	  return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue(ch,  _inputPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);	  return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xF;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	10	None	replace
7	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF,  _majorState;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  return  _startInitValue(ch,  _binaryValue);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _startInitValue(ch,  _binaryValue);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _startInitValue(ch,  _binaryValue);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
9	[BUG]  [BUGGY]  return  _binaryValue.startInitValue(ch);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue.startInitValue(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.startInitValue(ch);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  return  _binaryValue[ch];  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue[ch];  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue[ch];	  return    _startInitValue(ch);    	non-compiled	[CE]  incompatible  types	8	None	replace
11	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.getValue();	  _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
12	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
13	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _majorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _majorState);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _majorState);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
14	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.cloneTree();  break;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.cloneTree();  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.cloneTree();  break;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
15	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.get(ch);  break;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.get(ch);  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.get(ch);  break;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
16	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.clone();  break;  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.clone();  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.clone();  break;	  	non-compiled	[CE]  unreachable  statement	6	None	add
17	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.getIntValue();  break;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.getIntValue();  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.getIntValue();  break;	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
18	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.get(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.get(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.get(ch);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
19	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;	  _binaryValue    =    _binaryValue[_inputPtr++];    	non-compiled	[CE]  incompatible  types	11	None	replace
20	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++];  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputPtr++];  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputPtr++];	  _binaryValue    =    _binaryValue[_inputPtr++];    	non-compiled	[CE]  ')'  expected	11	None	replace
21	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.next();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.next();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.next();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();	  	compilable	  [FE]  NullPointerException  	4	1	add
23	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();	  	compilable	  [FE]  NullPointerException  	4	1	add
24	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();  [CE]  duplicate  case  label  [FE]      NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  _binaryValue  =  _binaryValue.clone();	  	non-compiled	[CE]  duplicate  case  label	4	None	add
25	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  [CE]  'else'  without  'if'  [FE]        NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  }  else  {  _binaryValue  =  _binaryValue.clone();	  	non-compiled	[CE]  'else'  without  'if'	4	None	add
26	[BUG]  [BUGGY]  return  _binaryValueAfterInit(ch);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValueAfterInit(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValueAfterInit(ch);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
27	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer,  _inputPtr++];	  _binaryValue    =    _binaryValue[_inputPtr++];    	non-compiled	[CE]  ')'  expected	11	None	replace
28	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue[_inputPtr++]  &  0xF;	  _binaryValue    =    _binaryValue[_inputPtr++];    	non-compiled	[CE]  incompatible  types	11	None	replace
29	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.cloneBlock();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneBlock();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
30	[BUG]  [BUGGY]  _binaryValue  =  _binaryBuffer[_inputPtr++]  &  0xFF;  [CE]  cannot  find  symbol  _binaryBuffer  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryBuffer[_inputPtr++]  &  0xFF;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  cannot  find  symbol  _binaryBuffer	10	None	replace
31	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
32	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  	non-compiled	[CE]  incompatible  types	6	None	add
33	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue  +  _inputPtr;  break;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue  +  _inputPtr;  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue  +  _inputPtr;  break;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	add
34	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue[_inputPtr++];  break;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue[_inputPtr++];  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue[_inputPtr++];  break;	  	non-compiled	[CE]  incompatible  types	6	None	add
35	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  [CE]  duplicate  case  label  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _binaryValue.clone();	  	non-compiled	[CE]  duplicate  case  label	4	None	add
36	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);  [CE]  duplicate  case  label  [FE]      NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    _binaryValue  =  _binaryValue.clone();  case  MAJOR_INITIAL:  return  _startValue(ch);	  	non-compiled	[CE]  duplicate  case  label	4	None	add
37	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.trim();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.trim();	  _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
38	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBuffer,  _inputPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
39	[BUG]  [BUGGY]  _binaryValue  =  _initialValue(ch);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _initialValue(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _initialValue(ch);	  _binaryValue    =    _startInitialValue(ch);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
40	[BUG]  [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _startInitialValue(ch,  _inputBufferPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitialValue(ch,  _inputBufferPtr);	  _binaryValue    =    _startInitialValue(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	9	None	replace
41	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.cloneByName(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.cloneByName(ch);	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  _binaryValue  =  _startInitValue(ch);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _startInitValue(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _startInitValue(ch);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
43	[BUG]  [BUGGY]  return  _binaryValue.init(ch);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue.init(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue.init(ch);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
44	[BUG]  [BUGGY]  return  _initValue(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _initValue(ch);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _initValue(ch);	  return    _startInitValue(ch);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
45	[BUG]  [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _inputBuffer[_inputPtr++]  &  0xFF  +  1;	  _binaryValue    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  incompatible  types	10	None	replace
46	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++];  [CE]  array  required,  but  int  found  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.length[_inputPtr++];  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.length[_inputPtr++];	  _binaryValue    =    _binaryValue[_inputPtr++];    	non-compiled	[CE]  array  required,  but  int  found	11	None	replace
47	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toString();  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.toString();  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue.toString();	  _binaryValue    =    _binaryValue.clone();    	non-compiled	[CE]  incompatible  types	5	None	replace
48	[BUG]  [BUGGY]      _binaryValue  =  _binaryValue.toString();  break;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]      _binaryValue  =  _binaryValue.toString();  break;  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	        _binaryValue  =  _binaryValue.toString();  break;	  	non-compiled	[CE]  incompatible  types	6	None	add
49	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]        AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  return  _binaryValue(ch,  _inputBufferPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	return  _binaryValue(ch,  _inputBufferPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	1	None	replace
50	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    ((  _binaryValue!=  null)&&(_binaryValue.isEmpty()))?  _binaryValue.clone()  :  null);	  	non-compiled	[CE]  not  a  statement	4	None	add
51	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue.clone();  ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue    =    _binaryValue.clone();    ((  _binaryValue!=  null)&&(_binaryValue.length()  >  0))?  _binaryValue.clone()  :  null);	  	non-compiled	[CE]  not  a  statement	4	None	add
52	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBuffer[_inputPtr++]);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
53	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr);  [CE]  cannot  find  symbol  _inputBufferPtr  [FE]            AssertionFailedError    [CONTEXT]      _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  switch  (_majorState)  {  case  MAJOR_INITIAL:    [BUGGY]  _binaryValue  =  _binaryValue(ch,  _inputBufferPtr);  [BUGGY]      case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  case  MAJOR_OBJECT_VALUE:  //  expect  colon,  followed  by  value  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	_binaryValue  =  _binaryValue(ch,  _inputBufferPtr);	  _binaryValue    =    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  _inputBufferPtr	2	None	replace
