bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    ==    0xFF)&&(_minorState    >>    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
2	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    ==    0xFF)&&(_minorState    >>    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
3	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    ==    0xFF)&&(_minorState    >>    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	29	None	replace
4	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
5	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
6	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
7	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
8	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
9	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	31	1	replace
10	[BUG]  [BUGGY]  while((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	31	1	replace
11	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  while(ch  >=  0x20)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  while(ch  >=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    while(ch  >=  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
12	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [CE]  ')'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_	  	non-compiled	[CE]  ')'  expected	18	None	add
13	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
14	[BUG]  [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_LCURLY)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
18	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_QUOTE))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  <  =  INT_QUOTE))  {	  while((    ch    >=    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  while(ch  >=  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  while(ch  >=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    while(ch  >=  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
20	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  while(ch  >>  0xFF)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  while(ch  >>  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    while(ch  >>  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
21	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  while(ch!=  0xFF)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  while(ch!=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    while(ch!=  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
22	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  while(ch  <  0xFF)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  while(ch  <  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    while(ch  <  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
23	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  while(ch  ==  0xFF)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  while(ch  ==  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    while(ch  ==  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  _minorState)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
25	[BUG]  [BUGGY]  while(ch  ==  _minorState)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  _minorState)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
26	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  _minorState)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	33	1	replace
27	[BUG]  [BUGGY]  while(ch  >=  _minorState)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  _minorState)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	33	1	replace
28	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  ch  >  0x20)  {	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	70	1	replace
29	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  0x20)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  0x20)  {	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	70	1	replace
30	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  ch  =  0x20)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  ch  =  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  ch  =  0x20)  {	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
31	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  ch  =  _finishBoolean();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  ch  =  _finishBoolean();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  ch  =  _finishBoolean();	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  ch  =  _inputBuffer[ch];  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  INT_SPACE)  {  ch  =  _inputBuffer[ch];	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
33	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  ch  =  _inputBuffer[ch];  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  ch  =  _inputBuffer[ch];  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_SPACE)  {  ch  =  _inputBuffer[ch];	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  _inputEnd)  {	  while(ch    >=    0x020)    {    while(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
35	[BUG]  [BUGGY]  while(ch  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _inputEnd)  {	  while(ch    >=    0x020)    {    while(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	38	1	replace
36	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch!=  0x020)  {	  while(ch    >=    0x020)    {    while(ch!=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
37	[BUG]  [BUGGY]  while(ch!=  0x020)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=  0x020)  {	  while(ch    >=    0x020)    {    while(ch!=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
38	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x00)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  0x00)  {	  while(ch    >=    0x020)    {    while(ch!=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
39	[BUG]  [BUGGY]  while(ch  >=  0x00)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x00)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0x00)  {	  while(ch    >=    0x020)    {    while(ch!=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	88	1	replace
40	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  INT_RBRACKET)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	14	1	replace
41	[BUG]  [BUGGY]  while(ch  <  INT_RBRACKET)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_RBRACKET)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	14	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  INT_RBRACKET)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
43	[BUG]  [BUGGY]  while(ch  ==  INT_RBRACKET)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  INT_RBRACKET)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
44	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  while(ch  <  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  while(ch  <  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    while(ch  <  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
45	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
46	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [CE]  ')'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_	  	non-compiled	[CE]  ')'  expected	20	None	add
47	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
48	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch!=  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch!=  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch!=  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
49	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  >>  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  >>  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch  >>  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
50	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  >=  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  >=  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch  >=  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
51	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState  >>  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState  >>  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch  ==  0xFF)&&(_minorState  >>  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
52	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
53	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
54	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  >>  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  >>  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  &&  _minorState  >>  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
55	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  >=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  &&  _minorState  >=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  &&  _minorState  >=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
56	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    while(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
57	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
58	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
59	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    while(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
60	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    if(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  >=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(ch  >=  0xFF)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
62	[BUG]  [BUGGY]  if(ch  >=  0xFF)  {  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  >=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  >=  0xFF)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	72	1	replace
63	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  if(ch  >=  INT_RBRACKET)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  if(ch  >=  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0xFF)  {  if(ch  >=  INT_RBRACKET)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
64	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  >  0xFF)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(ch  >  0xFF)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
65	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  if(ch  >=  INT_CR)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  if(ch  >=  INT_CR)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0xFF)  {  if(ch  >=  INT_CR)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
67	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
69	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
71	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
72	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch!=  INT_QUOTE))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch!=    0x020))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	63	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch!=    0x020))    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
74	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch!=    0x020))    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
75	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	92	1	replace
76	[BUG]  [BUGGY]  while(ch  <  INT_LCURLY)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	92	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
78	[BUG]  [BUGGY]  while(ch  ==  INT_LCURLY)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
80	[BUG]  [BUGGY]  while(ch  >=  INT_LCURLY)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	compilable	  [FE]  AssertionFailedError  	92	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState  ==  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(_minorState  ==  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
82	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(_minorState  ==  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState  ==  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(_minorState  ==  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(ch  ==  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
84	[BUG]  [BUGGY]  if(ch  ==  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
86	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_QUOTE)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
88	[BUG]  [BUGGY]  if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  AssertionFailedError  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
89	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  while(ch  <  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  while(ch  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    while(ch  <  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
90	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  if(ch  <  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  if(ch  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    if(ch  <  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
91	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  for(int  ch  <  INT_SPACE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  for(int  ch  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    for(int  ch  <  INT_SPACE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
92	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
93	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  int  ch  =  _inputPtr  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  int  ch  =  _inputPtr  +  1;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    int  ch  =  _inputPtr  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
94	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
95	[BUG]  [BUGGY]  if(ch  ==  INT_TAB)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_TAB)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_TAB)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
96	[BUG]  [BUGGY]  if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
97	[BUG]  [BUGGY]  while(ch  <  INT_RANGE)  {  [CE]  cannot  find  symbol  INT_RANGE  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RANGE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_RANGE)  {	  while(ch    <    INT_Row)    {    	non-compiled	[CE]  cannot  find  symbol  INT_RANGE	59	None	replace
98	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch!=  INT_SPACE))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch!=  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	24	None	replace
99	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch  ==  INT_SPACE))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch  ==  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	24	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch!=  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
101	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch!=  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
102	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_QUOTE))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch  <  =  INT_QUOTE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
103	[BUG]  [BUGGY]  while(ch  <  =  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
104	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  INT_BOM)  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  INT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  _minorState!=  INT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	53	None	replace
105	[BUG]  [BUGGY]  while(ch  <  INT_RC)  {  [CE]  cannot  find  symbol  INT_RC  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RC)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_RC)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	58	None	replace
106	[BUG]  [BUGGY]  while(ch  ==  INT_RC)  {  [CE]  cannot  find  symbol  INT_RC  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_RC)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  INT_RC)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	58	None	replace
107	[BUG]  [BUGGY]  while(ch  >=  INT_RC)  {  [CE]  cannot  find  symbol  INT_RC  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_RC)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  INT_RC)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	58	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  _minorState  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  _minorState  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
109	[BUG]  [BUGGY]  while((  _minorState  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  _minorState  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  _minorState  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  ch  >  0xFF)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
111	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  0xFF)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  0xFF)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x7F)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  ch  >  0x7F)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
113	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  0x7F)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x7F)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  0x7F)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
114	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  <  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	91	1	replace
115	[BUG]  [BUGGY]  while(_inputPtr  <  INT_SPACE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	91	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  >=  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
117	[BUG]  [BUGGY]  while(_inputPtr  >=  INT_SPACE)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  >=  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  ==  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
119	[BUG]  [BUGGY]  while(_inputPtr  ==  INT_SPACE)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  ==  INT_SPACE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	91	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch  ==  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
121	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  ==  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
122	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_QUOTE))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  =  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
123	[BUG]  [BUGGY]  if(_minorState  ==  JsonToken.VALUE_STRING)  {  _throwInternal();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState  ==  JsonToken.VALUE_STRING)  {  _throwInternal();  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState  ==  JsonToken.VALUE_STRING)  {  _throwInternal();  }	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
124	[BUG]  [BUGGY]  if(_minorState  ==  JsonToken.VALUE_NULL)  {  _throwInternal();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState  ==  JsonToken.VALUE_NULL)  {  _throwInternal();  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState  ==  JsonToken.VALUE_NULL)  {  _throwInternal();  }	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  ch  =  _throwInternal().ch;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInternal().ch;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternal().ch;	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
126	[BUG]  [BUGGY]  ch  =  _throwInternalChar();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInternalChar();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternalChar();	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	89	1	replace
128	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	89	1	replace
129	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {  [CE]  cannot  find  symbol  INVALID_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INVALID_BOM	89	None	replace
130	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  while(ch  <  _minorState)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  while(ch  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    while(ch  <  _minorState)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
131	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  if(ch  <  _minorState)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  if(ch  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    if(ch  <  _minorState)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
132	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.intValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.intValue();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    int  ch  =  _minorState.intValue();	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
133	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  While(ch  <  _minorState)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  While(ch  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    While(ch  <  _minorState)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
134	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.getLength();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.getLength();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    int  ch  =  _minorState.getLength();	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
135	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    while(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
136	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    if(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
137	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
138	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    while(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
139	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
140	[BUG]  [BUGGY]  as(ch  <  =  0x20)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  as(ch  <  =  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	as(ch  <  =  0x20)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
141	[BUG]  [BUGGY]  as(ch  <  0x20)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  as(ch  <  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	as(ch  <  0x20)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
142	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  as(ch  >  INT_QUOTE)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  as(ch  >  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  as(ch  >  INT_QUOTE)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
143	[BUG]  [BUGGY]  as(ch  <  0x20  ||  ch  >  0xFF)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  as(ch  <  0x20  ||  ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	as(ch  <  0x20  ||  ch  >  0xFF)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
144	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
145	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch!=  0xFF)&&(ch!=  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch!=  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch!=  0xFF)&&(ch!=  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
146	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  >>  0xFF)&&(ch!=  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  >>  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch  >>  0xFF)&&(ch!=  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
147	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch  >=  0xFF)&&(ch!=  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
148	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch  >>  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch  >>  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch  ==  0xFF)&&(ch  >>  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
149	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    while((  ch  ==  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
150	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch!=  0xFF)&&(ch  <  _minorState))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch!=  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    while((  ch!=  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
151	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  >=  0xFF)&&(ch  <  _minorState))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  >=  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    while((  ch  >=  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
152	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  >>  0xFF)&&(ch  <  _minorState))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  >>  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    while((  ch  >>  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
153	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  [Delete]  0xFF)&&(ch  <  _minorState))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  while((  ch  [Delete]  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    while((  ch  [Delete]  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  ')'  expected	64	None	add
154	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
155	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
156	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
157	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
158	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
159	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch!=  0xFF)&&(ch!=  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch!=  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch!=  0xFF)&&(ch!=  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
160	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  >>  0xFF)&&(ch!=  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  >>  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch  >>  0xFF)&&(ch!=  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
161	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  >=  0xFF)&&(ch!=  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  >=  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch  >=  0xFF)&&(ch!=  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
162	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch  >>  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch  >>  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch  ==  0xFF)&&(ch  >>  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
163	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  int  ch  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
164	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _inputPtr;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  int  ch  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
165	[BUG]  [BUGGY]  while(ch  <  INT_RANGE)  {  int  ch  =  _inputPtr;  [CE]  cannot  find  symbol  INT_RANGE  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RANGE)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_RANGE)  {  int  ch  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  cannot  find  symbol  INT_RANGE	36	None	replace
166	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  <  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    while(ch  <  _currInputRow)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
167	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  <  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    if(ch  <  _currInputRow)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
168	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _currInputRowAlt;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _currInputRowAlt;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    int  ch  =  _currInputRowAlt;	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
169	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  for(int  ch  <  _currInputRow)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  for(int  ch  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    for(int  ch  <  _currInputRow)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
170	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _inputRowAlt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _inputRowAlt;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    int  ch  =  _inputRowAlt;	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
171	[BUG]  [BUGGY]  while(ch  <  =  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    =    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
172	[BUG]  [BUGGY]  while(ch  <  =  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20  &&  _minorState  ==  MINOR_ROOT_BOM)  {	  while(ch    <    =    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
173	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
174	[BUG]  [BUGGY]  ||  ch  ==  INT_TAB)  {  return  _throwInvalidSpace(ch);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ||  ch  ==  INT_TAB)  {  return  _throwInvalidSpace(ch);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	||  ch  ==  INT_TAB)  {  return  _throwInvalidSpace(ch);	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
175	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
177	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
178	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
179	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  while(ch  ==  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  while(ch  ==  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    while(ch  ==  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
180	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  while(ch  >=  0xFF)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  while(ch  >=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    while(ch  >=  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
181	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
182	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_cur  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_cur  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    if(ch  ==  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_cur	  	non-compiled	[CE]  ';'  expected	45	None	add
183	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_  [CE]  ')'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ')'  expected	73	None	replace
184	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ')'  expected	73	None	replace
185	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT_  [CE]  ')'  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT_	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ')'  expected	73	None	replace
186	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  0xFF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
187	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	43	1	replace
188	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	43	1	replace
189	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  ')'  expected	43	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  AssertionFailedError  	43	1	replace
191	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  AssertionFailedError  	43	1	replace
192	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  ';'  expected	43	None	replace
193	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    while(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
194	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    if(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
195	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    while(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
196	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  while(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    while(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
197	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
198	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	51	1	replace
199	[BUG]  [BUGGY]  while(ch  >=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	51	1	replace
200	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
201	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
202	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
203	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
204	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
205	[BUG]  [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
206	[BUG]  [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
207	[BUG]  [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRow  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRow  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CLOSE)  {  while(ch  <  0x020)  {  if(_currInputRow  >=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRow	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
208	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch  >=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    while(ch  >=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
209	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch  >=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(ch  >=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
210	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch!=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch!=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    while(ch!=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
211	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch  ==  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(ch  ==  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
212	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch!=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(ch!=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(ch!=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
213	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch  ==  0xFF)&&(ch!=  0x020))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
214	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch!=  0xFF)&&(ch!=  0x020))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch!=  0xFF)&&(ch!=  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch!=  0xFF)&&(ch!=  0x020))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
215	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch  >>  0x020))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch  >>  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch  ==  0xFF)&&(ch  >>  0x020))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
216	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch  >=  0x020))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch  >=  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch  ==  0xFF)&&(ch  >=  0x020))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
217	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  >>  0xFF)&&(ch!=  0x020))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  >>  0xFF)&&(ch!=  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch  >>  0xFF)&&(ch!=  0x020))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
218	[BUG]  [BUGGY]  While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    While    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  ';'  expected	60	None	replace
219	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  if(ch  <  INT_CR)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  if(ch  <  INT_CR)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_SPACE)  {  if(ch  <  INT_CR)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
220	[BUG]  [BUGGY]  while(ch  <  =  0x020)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x020)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x020)  {  int  ch  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x020)  {  _currInputRowAlt  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x020)  {  _currInputRowAlt  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
222	[BUG]  [BUGGY]  while(ch  <  0x020)  {  _currInputRowAlt  =  _inputPtr;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x020)  {  _currInputRowAlt  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x020)  {  _currInputRowAlt  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x020)  {  _currInputRow  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x020)  {  _currInputRow  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
224	[BUG]  [BUGGY]  while(ch  <  0x020)  {  _currInputRow  =  _inputPtr;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x020)  {  _currInputRow  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x020)  {  _currInputRow  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	81	1	replace
225	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  ==  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  ==  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    <    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	79	None	replace
226	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    <    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	79	None	replace
227	[BUG]  [BUGGY]  _throwInvalidSpace(ch,  _minorState);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _throwInvalidSpace(ch,  _minorState);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_throwInvalidSpace(ch,  _minorState);	  _throwInvalidSpace(ch);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
228	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch  ==  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    while(ch  ==  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
229	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  if(ch  ==  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  if(ch  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    if(ch  ==  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
230	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch!=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch!=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    while(ch!=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
231	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch  >=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  while(ch  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    while(ch  >=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
232	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
233	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  0)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  0)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  0)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	76	None	replace
234	[BUG]  [BUGGY]  if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_CR)  {  if(_inputPtr  >=  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	76	None	replace
235	[BUG]  [BUGGY]  while(ch  <  =  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  _currInputRow)  {	  while(ch    <    _currInputRow)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
236	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishQuote(1);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
237	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(0);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishQuote(0);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishQuote(1);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
238	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(2);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(2);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishQuote(2);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishQuote(1);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
239	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  int  ch  =  _inputBuffer.length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
240	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _inputBuffer.length;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	37	None	replace
241	[BUG]  [BUGGY]  int  ch  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
242	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  _inputBuffer.length)  {  int  ch  =  _inputBuffer.length;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  _inputBuffer.length)  {  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  _inputBuffer.length)  {  int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	37	None	replace
243	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  while(ch  <  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  while(ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    while(ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
244	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  for(int  ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  for(int  ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    for(int  ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
245	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _minorState.getQuoTE();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  =  _minorState.getQuoTE();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    int  ch  =  _minorState.getQuoTE();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
246	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
247	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    if(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
248	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  type  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  type	52	None	add
249	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
250	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  >=  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  >=  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    if(ch  >=  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
252	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  _minorState))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch  ==  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
254	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  _minorState))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  ==  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  ==  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch  <  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
256	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  INT_SPACE))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
257	[BUG]  [BUGGY]  if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [CE]  ')'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_LF)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
258	[BUG]  [BUGGY]  if(_inputPtr!=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr!=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr!=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
259	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  INT_RBRACKET)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  if(ch  >=  INT_RBRACKET)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
260	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >  _currInputEnd)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >  _currInputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  if(ch  >  _currInputEnd)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
261	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  if(ch  >=  0x20)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  if(ch  >=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  if(ch  >=  0x20)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
262	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  INT_RCURLY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  INT_RCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  if(ch  >=  INT_RCURLY)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
263	[BUG]  [BUGGY]  _throwAltInvalidSpace(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _throwAltInvalidSpace(ch);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_throwAltInvalidSpace(ch);	  _throwInvalidSpace(ch);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
264	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
265	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  [CE]  '('  expected  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  '('  expected	40	None	replace
266	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
267	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  While(ch  >=  0xFF)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0xFF)  {  While(ch  >=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0xFF)    {    While(ch  >=  0xFF)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRowAlt)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  _currInputRowAlt)  {	  while    (ch    <    0x020)    {    while    (ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
269	[BUG]  [BUGGY]  while(ch  <  _currInputRowAlt)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRowAlt)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRowAlt)  {	  while    (ch    <    0x020)    {    while    (ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
270	[BUG]  [BUGGY]  while(ch  <  INT_ARRAY)  {  [CE]  cannot  find  symbol  INT_ARRAY  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_ARRAY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_ARRAY)  {	  while(ch    <    INT_Row)    {    	non-compiled	[CE]  cannot  find  symbol  INT_ARRAY	59	None	replace
271	[BUG]  [BUGGY]  while(ch  <  _inputEnd)  {  while(ch  >=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  while(ch  >=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _inputEnd)  {  while(ch  >=  _inputEnd)  {	  while(ch    >=    0x020)    {    while(ch    >>    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
272	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  >=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  while(ch  >=  0x020)  {	  while(ch    >=    0x020)    {    while(ch    >>    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
273	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  >=  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  while(ch  >=  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  while(ch  >=  _currInputRow)  {	  while(ch    >=    0x020)    {    while(ch    >>    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
274	[BUG]  [BUGGY]  while(ch  <  _inputEnd)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  while(ch  >=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _inputEnd)  {  while(ch  >=  0x020)  {	  while(ch    >=    0x020)    {    while(ch    >>    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
275	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  While(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  While(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    While(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
276	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
277	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_RBRACKET)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishQuote(1);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
278	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRow  <  _inputEnd)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
279	[BUG]  [BUGGY]  while(_currInputRow  <  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRow  <  _inputEnd)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
280	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  While((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  While((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    While((  ch  ==  0xFF)&&(ch  <  _minorState))  {	  	non-compiled	[CE]  ';'  expected	64	None	add
281	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _throwInvalidQuote();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _throwInvalidQuote();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    AssertionFailedError  <?>  ch  =  _throwInvalidQuote();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
282	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  curr  =  _finishQuote();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  curr  =  _finishQuote();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    AssertionFailedError  <?>  curr  =  _finishQuote();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
283	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _inputBuffer[ch];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _inputBuffer[ch];  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    AssertionFailedError  <?>  ch  =  _inputBuffer[ch];	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
284	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  ch)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRow  <  ch)  {	  while(ch    <    _currInputRow)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	57	1	replace
285	[BUG]  [BUGGY]  while(_currInputRow  <  ch)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  ch)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRow  <  ch)  {	  while(ch    <    _currInputRow)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	57	1	replace
286	[BUG]  [BUGGY]  if(_currInputRow!=  _inputEnd)  {  while(ch  <  0x020)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow!=  _inputEnd)  {  while(ch  <  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_currInputRow!=  _inputEnd)  {  while(ch  <  0x020)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
287	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  ch  <  _minorState)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  ch  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    ch  <  _minorState)  {	  	non-compiled	[CE]  >  expected	32	None	add
288	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.size();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  int  ch  =  _minorState.size();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    int  ch  =  _minorState.size();	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
289	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	90	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOOLEAN))    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
291	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOOLEAN))    {    	compilable	  [FE]  AssertionFailedError  	90	1	replace
292	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  While((  ch  ==  0xFF)&&(ch!=  0x020))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  While((  ch  ==  0xFF)&&(ch!=  0x020))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    While((  ch  ==  0xFF)&&(ch!=  0x020))  {	  	non-compiled	[CE]  ';'  expected	62	None	add
293	[BUG]  [BUGGY]  while(ch  <  0x20)  {  ch  &=  0xFF)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  &=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  ch  &=  0xFF)  {	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  &=  0xF;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {  ch  &=  0xF;	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
295	[BUG]  [BUGGY]  while(ch  <  0x20)  {  ch  &=  0xF;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  &=  0xF;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  ch  &=  0xF;	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
296	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  ch  =  _minorState;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  ch  =  _minorState;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  ch  =  _minorState;	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
297	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch  >=  INT_PLUS))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  while((  ch  ==  0xFF)&&(ch  >=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    while((  ch  ==  0xFF)&&(ch  >=  INT_PLUS))  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
298	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  While((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  While((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    While((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {	  	non-compiled	[CE]  ';'  expected	84	None	add
299	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	43	1	replace
300	[BUG]  [BUGGY]  while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	43	1	replace
301	[BUG]  [BUGGY]  while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  ')'  expected	43	None	replace
302	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  ';'  expected	43	None	replace
303	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_CLOSE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_CLOSE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if(ch  >=  INT_CLOSE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  ';'  expected	43	None	replace
304	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x7F)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x7F)  {	  while    (ch    <    0x020)    {    While    (ch    <    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	80	1	replace
305	[BUG]  [BUGGY]  while(ch  <  0x7F)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x7F)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x7F)  {	  while    (ch    <    0x020)    {    While    (ch    <    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	80	1	replace
306	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >>  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >>  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >>  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
307	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputStart)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputStart)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputStart)  {  ++_currInputRowAlt;  }	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
308	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
309	[BUG]  [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
310	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
311	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAl  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAl  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAl	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
312	[BUG]  [BUGGY]  _throwInternal(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _throwInternal(ch);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_throwInternal(ch);	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
313	[BUG]  [BUGGY]  _reportUnsupportedOperation();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _reportUnsupportedOperation();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_reportUnsupportedOperation();	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
314	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch  >=  INT_TAB))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  while((  ch  ==  0xFF)&&(ch  >=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    while((  ch  ==  0xFF)&&(ch  >=  INT_TAB))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
315	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  While((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  While((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    While((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {	  	non-compiled	[CE]  ';'  expected	82	None	add
316	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	53	1	replace
317	[BUG]  [BUGGY]  while(_minorState!=  MINOR_ROOT_BOM)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	53	1	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
319	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
320	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
321	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(_currQuoTE!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(_currQuoTE!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    if(_currQuoTE!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
322	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(_currQuoTE  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  if(_currQuoTE  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    if(_currQuoTE  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
323	[BUG]  [BUGGY]  while(ch!=  INT_RC)  {  [CE]  cannot  find  symbol  INT_RC  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_RC)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=  INT_RC)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	58	None	replace
324	[BUG]  [BUGGY]  while(ch  <  =  INT_RC  &&  _currInputRow!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  INT_RC  &&  _currInputRow!=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_RC  &&  _currInputRow!=  _inputEnd)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
325	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
326	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
327	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <  INT_QUOTE)  {  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  AssertionFailedError  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    AssertionFailedError  <  INT_QUOTE)  {	  	non-compiled	[CE]  >  expected	1	None	add
328	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
329	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    AssertionFailedError  <?>  ch  =  _minorState.invoke(_currInputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
330	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr,  _currInputRowAlt);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr,  _currInputRowAlt);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    AssertionFailedError  <?>  ch  =  _minorState.invoke(_inputBuffer,  _inputPtr,  _currInputRowAlt);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
331	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputP  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputP  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputP	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
332	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_RC)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_RC)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_RC)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
333	[BUG]  [BUGGY]  while(ch  <  0x20)  {  as(_currInputRowAlt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  as(_currInputRowAlt)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  as(_currInputRowAlt)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
334	[BUG]  [BUGGY]  while(ch  <  0x20)  {  as(_currInputRowAlt  ||  ch  >  0xFF)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  as(_currInputRowAlt  ||  ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  as(_currInputRowAlt  ||  ch  >  0xFF)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
335	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  While((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  While((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    While((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
336	[BUG]  [BUGGY]  while(ch  <  _currInputRowCount)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRowCount)  {  while(ch  >=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRowCount)  {  while(ch  >=  0x020)  {	  while(ch    >=    0x020)    {    while(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
337	[BUG]  [BUGGY]  while(ch  <  _currInputRowCount)  {  while(ch  >=  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRowCount)  {  while(ch  >=  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRowCount)  {  while(ch  >=  _currInputRow)  {	  while(ch    >=    0x020)    {    while(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
338	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_RCURLY))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_RCURLY))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  <  =  INT_RCURLY))  {	  while((    ch    >=    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  >=  0xFF)&&(ch  <  INT_SPACE))  {	  while((    ch    >=    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
340	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  <  INT_SPACE))  {	  while((    ch    >=    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	23	1	replace
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_RBRACKET))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_RBRACKET))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
342	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_RBRACKET))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_RBRACKET))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_RBRACKET))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
343	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_RCURLY))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_RCURLY))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  =  INT_RCURLY))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
344	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
345	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  	non-compiled	[CE]  ')'  expected	15	None	add
346	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_LF)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT	  	non-compiled	[CE]  ')'  expected	15	None	add
347	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  	non-compiled	[CE]  ')'  expected	13	None	add
348	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
349	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >  0)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
350	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ')'  expected	73	None	replace
351	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
352	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
353	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT  [CE]  ')'  expected  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch!=  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ')'  expected	73	None	replace
354	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_RCURLY))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_RCURLY))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch  <  =  INT_RCURLY))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
355	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_minorState!=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	51	1	replace
356	[BUG]  [BUGGY]  while(_minorState!=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_minorState!=  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    &&    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	51	1	replace
357	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
358	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
359	[BUG]  [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
360	[BUG]  [BUGGY]  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
361	[BUG]  [BUGGY]  if(ch!=  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch!=  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch!=  INT_RBRACKET)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
362	[BUG]  [BUGGY]  Integer  ch  =  _throwInvalidSpace(ch);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  Integer  ch  =  _throwInvalidSpace(ch);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	Integer  ch  =  _throwInvalidSpace(ch);	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  0)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRow  <  0)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
364	[BUG]  [BUGGY]  while(_currInputRow  <  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  0)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRow  <  0)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
365	[BUG]  [BUGGY]  while(_currInputRow  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  =  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRow  <  =  _inputEnd)  {	  while(ch    ==    INT_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
366	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    AssertionFailedToken(ch,  _inputBuffer,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
367	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  if(_currQuoTE!=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  if(_currQuoTE!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    if(_currQuoTE!=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
368	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputStart,  _inputPtr);  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  AssertionFailedToken(ch,  _inputBuffer,  _inputStart,  _inputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    AssertionFailedToken(ch,  _inputBuffer,  _inputStart,  _inputPtr);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
369	[BUG]  [BUGGY]  while((  ch!=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [CE]  cannot  find  symbol  DEFAULT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch!=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BOM	27	None	replace
370	[BUG]  [BUGGY]  while(ch  <  =  _minorState)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  _minorState)  {	  while(ch    <    _minorState)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  0)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_minorState!=  0)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
372	[BUG]  [BUGGY]  while(_minorState!=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  0)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_minorState!=  0)  {	  while(ch    <    _minorState)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
373	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
374	[BUG]  [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
375	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
376	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
377	[BUG]  [BUGGY]  ch  =  _throwInternal(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInternal(ch);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternal(ch);	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
378	[BUG]  [BUGGY]  ch  =  _throwInvalidSpace();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInvalidSpace();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInvalidSpace();	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
379	[BUG]  [BUGGY]  ch  =  startInternal();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  startInternal();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  startInternal();	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
380	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(_currInputRow!=  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(_currInputRow!=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    if(_currInputRow!=  _inputEnd)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
381	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _currInputRow.getLength();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  int  ch  =  _currInputRow.getLength();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    int  ch  =  _currInputRow.getLength();	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
382	[BUG]  [BUGGY]  while(ch  <  _inputEnd)  {  int  ch  =  _inputPtr;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _inputEnd)  {  int  ch  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	81	None	replace
383	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [CE]  cannot  find  symbol  DEFAULT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  DEFAULT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    ==    0xFF)&&(_minorState    >>    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BOM	29	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  _minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  _minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
385	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  _minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  _minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  _minorState!=  MINOR_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
386	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState  >>  MINOR_ROOT_BOM)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x20  ||  _minorState  >>  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    while(ch  <  0x20  ||  _minorState  >>  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
387	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch!=  INT_RBRACKET)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
388	[BUG]  [BUGGY]  while(ch!=  INT_RBRACKET)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_RBRACKET)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=  INT_RBRACKET)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
389	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch!=  INT_LCURLY)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
390	[BUG]  [BUGGY]  while(ch!=  INT_LCURLY)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=  INT_LCURLY)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
391	[BUG]  [BUGGY]  while(_inputPtr  <  INT_Row)  {  [CE]  cannot  find  symbol  INT_Row  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  INT_Row)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  INT_Row)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_Row	91	None	replace
392	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  <  INT_QUOTE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	91	1	replace
393	[BUG]  [BUGGY]  while(_inputPtr  <  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  INT_QUOTE)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	91	1	replace
394	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [CE]  cannot  find  symbol  DEFAULT_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(_minorState!=  DEFAULT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BOM	26	None	replace
395	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  _currInputRow)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  if(ch  >=  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {  if(ch  >=  _currInputRow)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
396	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
397	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  >=  _inputEnd)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	72	1	replace
398	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	72	1	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  _currInputRow  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {  _currInputRow  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
400	[BUG]  [BUGGY]  while(ch  <  0x20)  {  _currInputRow  =  _inputPtr;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  _currInputRow  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  _currInputRow  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  _currInputRowAlt  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {  _currInputRowAlt  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
402	[BUG]  [BUGGY]  while(ch  <  0x20)  {  _currInputRowAlt  =  _inputPtr;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  _currInputRowAlt  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  _currInputRowAlt  =  _inputPtr;	  while(ch    <    0x20)    {    int    ch    =    _inputPtr;    	compilable	  [FE]  AssertionFailedError  	36	1	replace
403	[BUG]  [BUGGY]  while(ch  <  _inputEnd)  {  int  ch  =  _inputBuffer.length;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _inputEnd)  {  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _inputEnd)  {  int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	37	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  =  _inputBuffer.length  -  1;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {  ch  =  _inputBuffer.length  -  1;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
405	[BUG]  [BUGGY]  while(ch  <  0x20)  {  ch  =  _inputBuffer.length  -  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  =  _inputBuffer.length  -  1;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  ch  =  _inputBuffer.length  -  1;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	compilable	  [FE]  AssertionFailedError  	37	1	replace
406	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  0x20)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    if(ch  >=  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
407	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  ch  >=  0x20)  {  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  ch  >=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    ch  >=  0x20)  {	  	non-compiled	[CE]  not  a  statement	18	None	add
408	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  if(ch  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    if(ch  >=  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
409	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
410	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_LEADING_ZEROS))  {  [CE]  cannot  find  symbol  MINOR_LEADING_ZEROS  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_LEADING_ZEROS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  MINOR_LEADING_ZEROS))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_LEADING_ZEROS	25	None	replace
411	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(ch  <  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(ch  <  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(ch  <  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
412	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  	non-compiled	[CE]  ')'  expected	20	None	add
413	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  <  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  <  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(_inputPtr  <  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  	non-compiled	[CE]  ')'  expected	20	None	add
414	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    if(_inputPtr  >=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowAlt  =  _inputPtr;  }  else  if  (ch  ==  INT	  	non-compiled	[CE]  ')'  expected	20	None	add
415	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  if(ch  ==  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    if(ch  ==  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
416	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  While(ch  ==  0xFF)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  While(ch  ==  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    While(ch  ==  0xFF)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
417	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
418	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_ROOT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_ROOT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    MINOR_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ROOT_BOM	89	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(ch  ==  INT_RBRACKET)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
420	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_RBRACKET)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  AssertionFailedError  	78	1	replace
421	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	78	1	replace
422	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt!=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	78	1	replace
423	[BUG]  [BUGGY]  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [CE]  illegal  start  of  type  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
424	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
425	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
427	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
428	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRow  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRow  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRow	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
429	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
430	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur  [CE]  ';'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    ++_cur    	non-compiled	[CE]  ';'  expected	73	None	replace
431	[BUG]  [BUGGY]  while(ch  <  _currInputRowAlt)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRowAlt)  {  while(ch  >=  0x020)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRowAlt)  {  while(ch  >=  0x020)  {	  while(ch    >=    0x020)    {    while(ch    >>    0x020)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
432	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  ch  <  =  0x20)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  ch  <  =  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  ch  <  =  0x20)  {	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
433	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  ch  =  _finishBOM(1);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  ch  =  _finishBOM(1);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  ch  =  _finishBOM(1);	  while(ch    <    0x20)    {    ch    <    0x20)    {    	non-compiled	[CE]  incompatible  types	70	None	replace
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  =  _minorState;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {  ch  =  _minorState;	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
435	[BUG]  [BUGGY]  while(ch  <  0x20)  {  ch  =  _minorState;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20)  {  ch  =  _minorState;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {  ch  =  _minorState;	  while(ch    <    0x20)    {    ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  <  _inputEnd)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
437	[BUG]  [BUGGY]  while(_inputPtr  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  _inputEnd)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr  <  _minorState)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
439	[BUG]  [BUGGY]  while(_inputPtr  <  _minorState)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  _minorState)  {	  while(ch    ==    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
440	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  While(ch  >=  INT_QUOTE)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  While(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    While(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
441	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_QUOTE)  {  while(ch  >>  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_QUOTE)    {    while(ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >  0xFF)  {	  while(ch    >=    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
443	[BUG]  [BUGGY]  while(ch  >  0xFF)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >  0xFF)  {	  while(ch    >=    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
444	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  While(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  While(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    While(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
445	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  int  ch  <  _minorState)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _minorState)  {  int  ch  <  _minorState)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _minorState)    {    int  ch  <  _minorState)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
446	[BUG]  [BUGGY]  if(ch!=  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(ch!=  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch!=  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }	  if(ch    ==    INT_TAB)    {    if(_throwInvalidSpace(ch))    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	8	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_TAB))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
448	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_TAB))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_TAB))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_TAB))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_TAB))    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
449	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
450	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
451	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
452	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputBuffer.length)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputBuffer.length)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputBuffer.length)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	76	None	replace
453	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  INT_RANGE)  {  return  _throwInvalidSpace(ch);  }  [CE]  cannot  find  symbol  INT_RANGE  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  INT_RANGE)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  INT_RANGE)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  cannot  find  symbol  INT_RANGE	76	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_inputPtr  <  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
455	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  <  _minorState))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  <  _minorState))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_inputPtr  <  _minorState))  {	  while((    ch    ==    0xFF)&&(ch    <    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
456	[BUG]  [BUGGY]  while(_inputPtr  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr  <  =  0)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  =  0)  {	  while(_inputPtr    <    =    INT_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
457	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch!=  0x00))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  while((  ch  ==  0xFF)&&(ch!=  0x00))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(ch!=    0x020))    {    while((  ch  ==  0xFF)&&(ch!=  0x00))  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
458	[BUG]  [BUGGY]  while((  ch  >>  INT_FF)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  INT_FF)&&(ch  <  =  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  INT_FF)&&(ch  <  =  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
459	[BUG]  [BUGGY]  while((  ch  >>  INT_CR)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  INT_CR)&&(ch  <  =  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  INT_CR)&&(ch  <  =  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
460	[BUG]  [BUGGY]  while((  ch  >>  INT_LCURLY)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  INT_LCURLY)&&(ch  <  =  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  INT_LCURLY)&&(ch  <  =  INT_SPACE))  {	  while((    ch    >>    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
461	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  while(ch!=  0x20)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  while(ch!=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    while(ch!=  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
462	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  while(ch  >>  0x20)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  while(ch  >>  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    while(ch  >>  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
463	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  While(ch  >=  0x20)  {  [CE]  ';'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  0x20)  {  While(ch  >=  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x20)    {    While(ch  >=  0x20)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
464	[BUG]  [BUGGY]  while(_minorState!=  INT_CLOSE)  {  [CE]  cannot  find  symbol  INT_CLOSE  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_minorState!=  INT_CLOSE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_minorState!=  INT_CLOSE)  {	  while(ch    <    _minorState)    {    	non-compiled	[CE]  cannot  find  symbol  INT_CLOSE	33	None	replace
465	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  While(ch  <  0xFF)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  While(ch  <  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    While(ch  <  0xFF)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
466	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0xFF)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0xFF)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
467	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  While(ch  ==  INT_QUOTE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_QUOTE)  {  While(ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_QUOTE)    {    While(ch  ==  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
468	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  as(ch  <  =  0x20)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  as(ch  <  =  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  as(ch  <  =  0x20)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
469	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  as(ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  as(ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {  as(ch  <  INT_QUOTE)  {	  while(ch    <    0x20)    {    as(ch    <    0x20)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
470	[BUG]  [BUGGY]  _reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  argument ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  argument ");  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  argument ");	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
471	[BUG]  [BUGGY]  _reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  start  of  type "+_currInputPtr);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  start  of  type "+_currInputPtr);  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_reportError( "Current  token( "+_getClass().getName()  + ")not  a  valid  start  of  type "+_currInputPtr);	  _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
472	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  While(ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  While(ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    While(ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
473	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  int  ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    int  ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
474	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  whil(ch  <  INT_QUOTE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_QUOTE)  {  whil(ch  <  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_QUOTE)    {    whil(ch  <  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
475	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currInputPtr+ ")not  a  valid  character( "+_origBufferLen+ ") ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _reportError( "Current  token( "+_currInputPtr+ ")not  a  valid  character( "+_origBufferLen+ ") ");  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_reportError( "Current  token( "+_currInputPtr+ ")not  a  valid  character( "+_origBufferLen+ ") ");	  _throwInvalidSpace(ch);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
476	[BUG]  [BUGGY]  _reportError( "Current  token( "+_currInputPtr+ ")not  in  the  range  [ "+_minorState+ "] ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  _reportError( "Current  token( "+_currInputPtr+ ")not  in  the  range  [ "+_minorState+ "] ");  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_reportError( "Current  token( "+_currInputPtr+ ")not  in  the  range  [ "+_minorState+ "] ");	  _throwInvalidSpace(ch);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
477	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  While(ch  <  INT_SPACE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  While(ch  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    While(ch  <  INT_SPACE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
478	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  as(ch  <  INT_SPACE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_SPACE)  {  as(ch  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    INT_SPACE)    {    as(ch  <  INT_SPACE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
479	[BUG]  [BUGGY]  while(ch  <  =  INT_RC  ||  ch  >  INT_RC)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  INT_RC  ||  ch  >  INT_RC)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_RC  ||  ch  >  INT_RC)  {	  while(ch    <    =    INT_RC)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
480	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  While(ch!=  INT_QUOTE)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  While(ch!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    While(ch!=  INT_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
481	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch  >>  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch!=  INT_QUOTE)  {  while(ch  >>  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=    INT_QUOTE)    {    while(ch  >>  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
482	[BUG]  [BUGGY]  while(ch  <  INT_RANGE)  {  int  ch  =  _inputBuffer.length;  [CE]  cannot  find  symbol  INT_RANGE  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_RANGE)  {  int  ch  =  _inputBuffer.length;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_RANGE)  {  int  ch  =  _inputBuffer.length;	  while(ch    <    0x20)    {    int    ch    =    _inputBuffer.length;    	non-compiled	[CE]  cannot  find  symbol  INT_RANGE	37	None	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
484	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  _minorState  ==  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _currInputRowAlt!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  _currInputRowAlt!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
486	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _currInputRowAlt!=  MINOR_ROOT_BOM)  {  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  _currInputRowAlt!=  MINOR_ROOT_BOM)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  _currInputRowAlt!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20    ||    _minorState!=    MINOR_ROOT_BOM)    {    	compilable	  [FE]  AssertionFailedError  	53	1	replace
487	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  >  0)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	78	1	replace
488	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >  0)  {  if(_inputPtr  >=  _inputEnd)  {  ++_currInputRowAlt;  }	  if(_inputPtr    >=    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    ++_currInputRowAlt;    }    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	78	1	replace
489	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
490	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _input	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	compilable	  [FE]  AssertionFailedError  	69	1	replace
492	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	compilable	  [FE]  AssertionFailedError  	69	1	replace
493	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRow;  _currInputRowAlt  =	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    ==    INT_SPACE)    {    ++_currInputRow;    _currInputRowAlt    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
494	[BUG]  [BUGGY]  ch  =  _throwInternalState();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInternalState();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternalState();	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
495	[BUG]  [BUGGY]  ch  =  _throwInternalSpace();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  ch  =  _throwInternalSpace();  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternalSpace();	  ch    =    _throwInternal();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
496	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  While(ch  ==  INT_SPACE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  INT_SPACE)  {  While(ch  ==  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    INT_SPACE)    {    While(ch  ==  INT_SPACE)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
497	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  if(ch  <  0x20)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  0x20)  {  if(ch  <  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {  if(ch  <  0x20)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
498	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow!=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_currInputRow!=  _inputEnd)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	35	1	replace
499	[BUG]  [BUGGY]  if(_currInputRow!=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow!=  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_currInputRow!=  _inputEnd)  {	  while(ch    <    0x20)    {    if(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	35	1	replace
500	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [CE]  ')'  expected  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  >=  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT	  while(ch    >=    0x020)    {    if(ch    >=    INT_SPACE)    {    if    (ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if    (ch    ==    INT_CLOSE)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
501	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  if(_inputEnd  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  if(_inputEnd  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >  0)  {  if(_inputEnd  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	  if(_inputPtr    <    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  incompatible  types	79	None	replace
502	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)return  _throwInvalidSpace(ch);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)return  _throwInvalidSpace(ch);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)return  _throwInvalidSpace(ch);  }	  if(_inputPtr    <    _inputEnd)    {    if(_currInputRowAlt    ==    _inputEnd)    {    return    _throwInvalidSpace(ch);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
503	[BUG]  [BUGGY]  while(ch  <  INT_0)  {  int  ch  =  _inputPtr;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  INT_0)  {  int  ch  =  _inputPtr;  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_0)  {  int  ch  =  _inputPtr;	  while    (ch    <    0x020)    {    int    ch    =    _inputPtr;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	81	None	replace
504	[BUG]  [BUGGY]  while((  ch  >>  INT_LCURLY)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  INT_LCURLY)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  INT_LCURLY)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch    >=    INT_SPACE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	16	None	replace
505	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x10)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  ch  >  0x10)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	34	1	replace
506	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  0x10)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  0x10)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  0x10)  {	  while(ch    <    0x20)    {    while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	34	1	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  <  _inputEnd)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
508	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_currInputRow  ==  _inputEnd)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
510	[BUG]  [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_currInputRow  ==  _inputEnd)  {	  while    (ch    <    0x020)    {    if(ch    <    0x020)    {    	compilable	  [FE]  AssertionFailedError  	42	1	replace
511	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
512	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
513	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  while(ch  <  0x020)  {  if(ch  >=  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT	  while    (ch    <    0x020)    {    if(ch    >=    INT_SPACE)    {    if(ch    ==    INT_CR)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    else    if(ch    ==    INT_TAB)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
514	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >  0x20)  {	  while(ch    >=    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	19	1	replace
515	[BUG]  [BUGGY]  while(ch  >  0x20)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >  0x20)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >  0x20)  {	  while(ch    >=    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	19	1	replace
516	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  ch  >  INT_LCURLY)  {	  while(ch    >=    0x20)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
517	[BUG]  [BUGGY]  while(ch  <  0x20  ||  ch  >  INT_LCURLY)  {  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  0x20  ||  ch  >  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  ch  >  INT_LCURLY)  {	  while(ch    >=    0x20)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
519	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_PLUS))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_PLUS))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_inputPtr  >=  INT_PLUS))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	compilable	  [FE]  AssertionFailedError  	85	1	replace
520	[BUG]  [BUGGY]  while((  ch!=  INT_PLUS)&&(ch!=  INT_FF))  {  [CE]  cannot  find  symbol  INT_FF  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  INT_PLUS)&&(ch!=  INT_FF))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch!=  INT_PLUS)&&(ch!=  INT_FF))  {	  while((    ch    ==    0xFF)&&(ch!=    INT_PLUS))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	85	None	replace
521	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  while(ch!=  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  ==  0xFF)  {  while(ch!=  0xFF)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    ==    0xFF)    {    while(ch!=  0xFF)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
522	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  While(ch  <  _currInputRow)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  While(ch  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    While(ch  <  _currInputRow)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
523	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  as(ch  <  _currInputRow)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  _currInputRow)  {  as(ch  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    _currInputRow)    {    as(ch  <  _currInputRow)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_CR))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_CR))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
525	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_CR))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_CR))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_CR))  {	  while((    ch    ==    0xFF)&&(ch    <    =    _minorState))    {    	compilable	  [FE]  AssertionFailedError  	61	1	replace
526	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_QUOTES))  {  [CE]  cannot  find  symbol  INT_QUOTES  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_QUOTES))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_QUOTES))  {	  while((    ch    ==    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	22	None	replace
527	[BUG]  [BUGGY]  if(_inputPtr  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishQuote(1);    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
528	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState  >=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  while((  ch  ==  0xFF)&&(_minorState  >=  INT_SPACE))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((    ch    ==    0xFF)&&(_minorState!=    INT_SPACE))    {    while((  ch  ==  0xFF)&&(_minorState  >=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
529	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_LCURLY))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_LCURLY))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  <  =  INT_LCURLY))  {	  while((    ch    >=    0xFF)&&(ch    <    =    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
530	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >  0)  {  while(ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  while    (ch    <    0x020)    {    if(_currInputRow!=    _inputEnd)    {    if(ch    >=    INT_SPACE)    {    ++_currInputRowAlt;    _currInputRowStart    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
531	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRow  <  INT_SPACE)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
532	[BUG]  [BUGGY]  while(_currInputRow  <  INT_SPACE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRow  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRow  <  INT_SPACE)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
533	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRowAlt  <  INT_SPACE)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
534	[BUG]  [BUGGY]  while(_currInputRowAlt  <  INT_SPACE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRowAlt  <  INT_SPACE)  {	  while(ch    <    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
535	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch!=  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
536	[BUG]  [BUGGY]  while((  ch!=  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch!=  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch!=  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
537	[BUG]  [BUGGY]  while((  ch  >>  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  >>  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch!=    INT_QUOTE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	55	None	replace
538	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_inputPtr!=  INT_QUOTE)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
539	[BUG]  [BUGGY]  while(_inputPtr!=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_inputPtr!=  INT_QUOTE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr!=  INT_QUOTE)  {	  while(ch!=    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	55	1	replace
540	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  0xFF)&&(_inputPtr!=  INT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_inputPtr!=  INT_BOM))  {	  while((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	49	None	replace
541	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow!=  _inputPtr)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_currInputRow!=  _inputPtr)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	72	1	replace
542	[BUG]  [BUGGY]  if(_currInputRow!=  _inputPtr)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  if(_currInputRow!=  _inputPtr)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_currInputRow!=  _inputPtr)  {	  while(ch    >=    0x020)    {    if(ch    >=    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	72	1	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
544	[BUG]  [BUGGY]  while((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  while(ch    ==    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
545	[BUG]  [BUGGY]  while(ch  <  =  INT_LCURLY  ||  ch  >  INT_LCURLY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  <  =  INT_LCURLY  ||  ch  >  INT_LCURLY)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_LCURLY  ||  ch  >  INT_LCURLY)  {	  while(ch    <    =    INT_LCURLY)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
546	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  While(ch  >=  INT_SPACE)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  While(ch  >=  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    While(ch  >=  INT_SPACE)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
547	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch  >>  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(ch  >=  INT_SPACE)  {  while(ch  >>  INT_SPACE)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    INT_SPACE)    {    while(ch  >>  INT_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
548	[BUG]  [BUGGY]  while(_currInputRowAlt  <  _currInputPtr)  {  [CE]  cannot  find  symbol  _currInputPtr  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  _currInputPtr)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRowAlt  <  _currInputPtr)  {	  while(ch    <    _currInputRow)    {    	non-compiled	[CE]  cannot  find  symbol  _currInputPtr	57	None	replace
549	[BUG]  [BUGGY]  while(_currInputRowAlt  <  _currInputColumn)  {  [CE]  cannot  find  symbol  _currInputColumn  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  _currInputColumn)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRowAlt  <  _currInputColumn)  {	  while(ch    <    _currInputRow)    {    	non-compiled	[CE]  cannot  find  symbol  _currInputColumn	57	None	replace
550	[BUG]  [BUGGY]  while(_currInputRowAlt  <  _currInputEnd)  {  [CE]  cannot  find  symbol  _currInputEnd  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  _currInputEnd)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRowAlt  <  _currInputEnd)  {	  while(ch    <    _currInputRow)    {    	non-compiled	[CE]  cannot  find  symbol  _currInputEnd	57	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(_currInputRowAlt  <  _currInputRow)  {	  while(ch    <    _currInputRow)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
552	[BUG]  [BUGGY]  while(_currInputRowAlt  <  _currInputRow)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }        [BUGGY]  while(_currInputRowAlt  <  _currInputRow)  {  [BUGGY]      if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_currInputRowAlt  <  _currInputRow)  {	  while(ch    <    _currInputRow)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
