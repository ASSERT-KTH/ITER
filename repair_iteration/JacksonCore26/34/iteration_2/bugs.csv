bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
2	[BUG]  [BUGGY]  while(ch  <  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
4	[BUG]  [BUGGY]  while(ch  ==  INT_QUOTE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
5	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
6	[BUG]  [BUGGY]  while(ch  >=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
7	[BUG]  [BUGGY]  _throwInvalidSpace(ch);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  _throwInvalidSpace(ch);  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_throwInvalidSpace(ch);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(ch  ==  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_TAB)  {  if(_throwInvalidSpace(ch))  {  return  _throwInvalidSpace(ch);  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
9	[BUG]  [BUGGY]  _throwInternal();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  _throwInternal();  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	_throwInternal();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishQuote(1);  }	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
12	[BUG]  [BUGGY]  while(ch  <  INT_SPACE)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
14	[BUG]  [BUGGY]  while(ch  ==  INT_SPACE)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
15	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	13	1	replace
16	[BUG]  [BUGGY]  while(ch  >=  INT_SPACE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	13	1	replace
17	[BUG]  [BUGGY]  while(ch  <  =  0x20)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  =  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0x20)  {	  while(ch    <    0x20)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  0x20)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	11	1	replace
19	[BUG]  [BUGGY]  while(ch  >=  0x20)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0x20)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	11	1	replace
20	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0xFF)  {	  while    (ch    <    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	4	1	replace
21	[BUG]  [BUGGY]  while(ch  <  0xFF)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0xFF)  {	  while    (ch    <    0x020)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	4	1	replace
22	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  INT_SPACE))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  =  INT_SPACE))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  >=  0xFF)&&(ch  <  =  INT_SPACE))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >=  0xFF)&&(ch  <  =  INT_SPACE))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  >>  0xFF)&&(ch  <  =  INT_SPACE))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  >>  0xFF)&&(ch  <  =  INT_SPACE))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while  ((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  while  ((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    while  ((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
31	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  _minorState)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  _minorState)  {	  while(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
33	[BUG]  [BUGGY]  while(ch  <  _minorState)  {  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  _minorState)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _minorState)  {	  while(ch    >=    0x020)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
34	[BUG]  [BUGGY]  while(ch  <  0x20)  {  while(ch  <  0x20)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  while(ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    while(ch  <  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
35	[BUG]  [BUGGY]  while(ch  <  0x20)  {  if(ch  <  0x20)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  if(ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    if(ch  <  0x20)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
36	[BUG]  [BUGGY]  while(ch  <  0x20)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  int  ch  =  _inputPtr;  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
37	[BUG]  [BUGGY]  while(ch  <  0x20)  {  int  ch  =  _inputBuffer.length;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  int  ch  =  _inputBuffer.length;  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    int  ch  =  _inputBuffer.length;	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
38	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  while(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  while(ch  >=  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    while(ch  >=  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
39	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
40	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CLOSE)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CLOSE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    if(ch  >=  INT_SPACE)  {  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CLOSE)  {  	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
41	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  while  (ch  <  0x020)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  while  (ch  <  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    while  (ch  <  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
42	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(ch  <  0x020)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(ch  <  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(ch  <  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
43	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_	  	non-compiled	[CE]  ')'  expected	3	None	add
44	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  ==  0xFF)  {	  while(ch    <    =    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
46	[BUG]  [BUGGY]  while(ch  ==  0xFF)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  ==  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  ==  0xFF)  {	  while(ch    <    =    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  0xFF)  {	  while(ch    <    =    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
48	[BUG]  [BUGGY]  while(ch  >=  0xFF)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0xFF)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0xFF)  {	  while(ch    <    =    0xFF)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
49	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	2	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
51	[BUG]  [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  &&  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
52	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	11	1	replace
53	[BUG]  [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20  ||  _minorState!=  MINOR_ROOT_BOM)  {	  while(ch    <    0x20)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	11	1	replace
54	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch!=  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch!=  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
55	[BUG]  [BUGGY]  while(ch!=  INT_QUOTE)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch!=  INT_QUOTE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch!=  INT_QUOTE)  {	  while(ch    <    =    INT_QUOTE)    {    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	12	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  _currInputRow)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  _currInputRow)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
57	[BUG]  [BUGGY]  while(ch  <  _currInputRow)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  _currInputRow)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  _currInputRow)  {	  while(ch    <    =    INT_SPACE)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
58	[BUG]  [BUGGY]  while(ch  <  =  INT_RC)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  =  INT_RC)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_RC)  {	  while(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  while(ch  <  INT_Row)  {  [CE]  cannot  find  symbol  INT_Row  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  INT_Row)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  INT_Row)  {	  while(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  INT_Row	13	None	replace
60	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    While  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
61	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  _minorState))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  =  _minorState))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  =  _minorState))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  0x020))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
63	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  0x020))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  0x020))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch  <  _minorState))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
65	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch  <  _minorState))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch  <  _minorState))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
66	[BUG]  [BUGGY]  ch  =  _throwInternal();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  ch  =  _throwInternal();  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	ch  =  _throwInternal();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
68	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(_currInputRow!=  _inputEnd)  {  if(ch  >=  INT_SPACE)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
69	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    if(_currInputRow!=  _inputEnd)  {  if(ch  ==  INT_SPACE)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
70	[BUG]  [BUGGY]  while(ch  <  0x20)  {  ch  <  0x20)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    ch  <  0x20)  {	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
71	[BUG]  [BUGGY]  while(ch  <  0x20)  {  While(ch  <  0x20)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  While(ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    While(ch  <  0x20)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
72	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  0x020)  {  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    if(ch  >=  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
73	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur  [CE]  ';'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    if(ch  >=  INT_SPACE)  {  if(ch  ==  INT_CR)  {  ++_currInputRow;  _currInputRowAlt  =  _inputPtr;  }  else  if(ch  ==  INT_TAB)  {  ++_cur	  	non-compiled	[CE]  ';'  expected	8	None	add
74	[BUG]  [BUGGY]  while(ch  <  0x20)  {  whil(ch  <  0x20)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  whil(ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    whil(ch  <  0x20)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
75	[BUG]  [BUGGY]  while(ch  <  0x20)  {  as(ch  <  0x20)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  0x20)  {  as(ch  <  0x20)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    <    0x20)    {    as(ch  <  0x20)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
76	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
77	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }	      	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	6	1	replace
78	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  ++_currInputRowAlt;  }	      	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	6	1	replace
79	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	if(_inputPtr  <  _inputEnd)  {  if(_currInputRowAlt  ==  _inputEnd)  {  return  _throwInvalidSpace(ch);  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
80	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  While  (ch  <  0x020)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  While  (ch  <  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    While  (ch  <  0x020)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
81	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  int  ch  =  _inputPtr;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while  (ch  <  0x020)  {  int  ch  =  _inputPtr;  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while    (ch    <    0x020)    {    int  ch  =  _inputPtr;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
83	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_TAB))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
85	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(ch!=  INT_PLUS))  {	  while    ((    ch    ==    0xFF)&&(ch    <    =    0x020))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
86	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  While(ch  >=  0x020)  {  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  While(ch  >=  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    While(ch  >=  0x020)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
87	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  while(ch  >>  0x020)  {  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  while(ch  >>  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    while(ch  >>  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
88	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  while(ch!=  0x020)  {  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  >=  0x020)  {  while(ch!=  0x020)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch    >=    0x020)    {    while(ch!=  0x020)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
89	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM))  {  [CE]  cannot  find  symbol  MINOR_BOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOM	2	None	replace
90	[BUG]  [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOLEAN))  {  [CE]  cannot  find  symbol  MINOR_BOOLEAN  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOLEAN))  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOLEAN))  {	  while    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOOLEAN	2	None	replace
91	[BUG]  [BUGGY]  while(_inputPtr  <  =  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(_inputPtr  <  =  INT_SPACE)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(_inputPtr  <  =  INT_SPACE)  {	  while(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
92	[BUG]  [BUGGY]  while(ch  <  =  INT_LCURLY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }      [BUGGY]  while(ch  <  =  INT_LCURLY)  {  [BUGGY]    if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_LCURLY)  {	  while(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
