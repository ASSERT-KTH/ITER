bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
2	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while  (ch  <  0x020)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while  (ch  <  0x020)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
4	[BUG]  [BUGGY]  while  (ch  <  0x020)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while  (ch  <  0x020)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while  (ch  <  0x020)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
5	[BUG]  [BUGGY]  while  ((  ch  ==  0xFF)&&(ch  <  =  0x020))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while  ((  ch  ==  0xFF)&&(ch  <  =  0x020))  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while  ((  ch  ==  0xFF)&&(ch  <  =  0x020))  {	while  (ch  <=  0x020)  {  	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]    [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	  	while  (ch  <=  0x020)  {  	non-compiled	[CE]  illegal  start  of  type	67	None	replace
7	[BUG]  [BUGGY]  while(ch  <  =  0xFF)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  <  =  0xFF)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  0xFF)  {	while  (ch  <=  0x020)  {  	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
8	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  >=  0x020)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  >=  0x020)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	67	1	replace
9	[BUG]  [BUGGY]  while(ch  >=  0x020)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]      AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  >=  0x020)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  >=  0x020)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	67	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  <  0x20)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	while(ch  <  0x20)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
11	[BUG]  [BUGGY]  while(ch  <  0x20)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  <  0x20)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  0x20)  {	while  (ch  <=  0x020)  {  	compilable	  [FE]  AssertionFailedError  	67	1	replace
12	[BUG]  [BUGGY]  while(ch  <  =  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  <  =  INT_QUOTE)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_QUOTE)  {	while  (ch  <=  0x020)  {  	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
13	[BUG]  [BUGGY]  while(ch  <  =  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  {  ch  &=  0xFF;  if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }    [BUGGY]  while(ch  <  =  INT_SPACE)  {  [BUGGY]  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  ++_currInputRowAlt;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  !=  INT_TAB)  {  _throwInvalidSpace(ch);  }  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	while(ch  <  =  INT_SPACE)  {	while  (ch  <=  0x020)  {  	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
