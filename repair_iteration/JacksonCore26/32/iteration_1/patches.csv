bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ch  &=  2;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    2;    ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	add
2	[BUG]  [BUGGY]  ch  &=  2;  ch  &=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ch  &=  2;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    2;    ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	5	1	add
3	[BUG]  [BUGGY]  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    2;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	5	None	add
4	[BUG]  [BUGGY]  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    2;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	5	None	add
5	[BUG]  [BUGGY]  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    2;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	5	None	add
6	[BUG]  [BUGGY]  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    2;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	5	None	add
7	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.clone();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =(Integer)_minorState.clone();  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.clone();	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
8	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.getValue();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =(Integer)_minorState.getValue();  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.getValue();	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
9	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =(Integer)_minorState;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState;	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
10	[BUG]  [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_inputBuffer.get(ch);	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
11	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  1;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  1;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number  	4	1	replace
12	[BUG]  [BUGGY]  ch  -=  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  1;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  1;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number  	4	1	replace
13	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  2;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  2;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  	4	1	replace
14	[BUG]  [BUGGY]  ch  -=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  2;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  2;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  	4	1	replace
15	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  4;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  4;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  	4	1	replace
16	[BUG]  [BUGGY]  ch  -=  4;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  4;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  4;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  	4	1	replace
17	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  3;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  3;	  ch    &=    2;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	6	1	replace
18	[BUG]  [BUGGY]  ch  &=  3;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  3;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  3;	  ch    &=    2;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	6	1	replace
19	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    -=    0xFF;    ch  -=  0xFF;	  	compilable	  [FE]  JsonParseException  	3	1	add
20	[BUG]  [BUGGY]  ch  -=  0xFF;  ch  -=  0xFF;  [FE]  JsonParseException  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ch  -=  0xFF;	  	compilable	  [FE]  JsonParseException  	3	1	add
21	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	3	None	add
22	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	3	None	add
23	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	3	None	add
24	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	3	None	add
25	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ch  &=  1;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    1;    ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
26	[BUG]  [BUGGY]  ch  &=  1;  ch  &=  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ch  &=  1;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
27	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	1	None	add
28	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	1	None	add
29	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	1	None	add
30	[BUG]  [BUGGY]      Integer  ch  =(Integer)_minorState.get(ch);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]      Integer  ch  =(Integer)_minorState.get(ch);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	        Integer  ch  =(Integer)_minorState.get(ch);	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	7	None	add
31	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  3;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  3;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  	4	1	replace
32	[BUG]  [BUGGY]  ch  -=  3;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  3;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  3;	  ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  	4	1	replace
33	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	1	None	add
34	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	1	None	add
35	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error: "  +  _minorState);	      	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	8	None	replace
36	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_NULL);	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
37	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorState);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorState);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(_minorState);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
38	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT);	      	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
39	[BUG]  [BUGGY]      AssertionFailedError  c  =  new  AssertionFailedError();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]      AssertionFailedError  c  =  new  AssertionFailedError();  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	        AssertionFailedError  c  =  new  AssertionFailedError();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
40	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	3	None	add
41	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  ')'  expected  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  ')'  expected	3	None	add
42	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  ')'  expected  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  ')'  expected	3	None	add
43	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  0x7F;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  0x7F;	  ch    &=    2;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
45	[BUG]  [BUGGY]  ch  &=  0x7F;  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  0x7F;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7F;	  ch    &=    2;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
46	[BUG]  [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    1;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	1	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  0xff;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  0xff;	  ch    &=    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
48	[BUG]  [BUGGY]  ch  &=  0xff;  [FE]  AssertionFailedError  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]    {    [BUGGY]  ch  &=  0xff;  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0xff;	  ch    &=    1;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
49	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	3	None	add
50	[BUG]  [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r    [CONTEXT]    {    [BUGGY]  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    0xFF;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  not  a  statement	3	None	add
51	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]      if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {    [BUGGY]      if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [BUGGY]      if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	        if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
