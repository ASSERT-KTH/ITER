bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	21	None	replace
2	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
3	[BUG]  [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	21	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	21	None	replace
5	[BUG]  [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	33	None	replace
7	[BUG]  [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
9	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('_'  (code  95)):  expected  a  valid  value  (number  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        -=        0xFF;        ch    -=    0xFF;    ch  -=  0xFF;  ch  -=  0xFF;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('_'  (code  95)):  expected  a  valid  value  (number  	19	1	add
10	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ch  -=  0xFF;  ch  -=  0xFF;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('_'  (code  95)):  expected  a  valid  value  (number  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ch  -=  0xFF;  ch  -=  0xFF;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('_'  (code  95)):  expected  a  valid  value  (number  	19	1	add
11	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	19	None	add
12	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]        JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	19	None	add
13	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  int  ch  -=  0xFF;  ch  -=  0xFF;  [CE]  ';'  expected  [FE]          JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  int  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    int  ch  -=  0xFF;  ch  -=  0xFF;	  	non-compiled	[CE]  ';'  expected	19	None	add
14	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	19	None	add
15	[BUG]  [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
16	[BUG]  [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
17	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
20	[BUG]  [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	29	None	replace
21	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
22	[BUG]  [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	29	None	replace
23	[BUG]  [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]                    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	29	None	replace
24	[BUG]  [BUGGY]  &=  0xFF;  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  &=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0xFF;	  ch    &=    1;    ch    &=    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
25	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
26	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
27	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  1;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        &=        2;        ch    &=    2;    ch  &=  1;  ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
28	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  1;  ch  &=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  1;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    ch  &=  1;  ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
29	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  &=  2;  ch  &=  2;  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  &=  2;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    &=  2;  ch  &=  2;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
30	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
31	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  3;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
32	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
33	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  ch  &=  2;  ch  &=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    ch  &=  2;  ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	1	1	add
34	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(ch);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(ch);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
35	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(ch,  _minorState);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(ch,  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(ch,  _minorState);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
36	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(STATE_MASK_ALLOW_UNQUOTED_NAMES);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(STATE_MASK_ALLOW_UNQUOTED_NAMES);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(STATE_MASK_ALLOW_UNQUOTED_NAMES);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
37	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(CH);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(CH);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(CH);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
38	[BUG]  [BUGGY]  Integer  ch  =(int)_minorState;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(int)_minorState;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(int)_minorState;	  Integer    ch    =(Integer)_minorState;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	9	None	replace
39	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState  +  1;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState  +  1;	  Integer    ch    =(Integer)_minorState;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	9	None	replace
40	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.intValue();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.intValue();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.intValue();	  Integer    ch    =(Integer)_minorState;    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	9	None	replace
41	[BUG]  [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	28	None	replace
42	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
43	[BUG]  [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
44	[BUG]  [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
45	[BUG]  [BUGGY]  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
46	[BUG]  [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
47	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.get(ch  -  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.get(ch  -  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.get(ch  -  1);	          Integer    ch    =(Integer)_minorState.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	30	None	replace
48	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.get(ch  +  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.get(ch  +  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.get(ch  +  1);	          Integer    ch    =(Integer)_minorState.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	30	None	replace
49	[BUG]  [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch  -  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch  -  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_inputBuffer.get(ch  -  1);	  Integer    ch    =(Integer)_inputBuffer.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	10	None	replace
50	[BUG]  [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch  +  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_inputBuffer.get(ch  +  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_inputBuffer.get(ch  +  1);	  Integer    ch    =(Integer)_inputBuffer.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	10	None	replace
51	[BUG]  [BUGGY]  Integer  ch  =(int)_inputBuffer.get(ch);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(int)_inputBuffer.get(ch);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(int)_inputBuffer.get(ch);	  Integer    ch    =(Integer)_inputBuffer.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	10	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
53	[BUG]  [BUGGY]  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [CE]  cannot  find  symbol  INT_FIRST  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  cannot  find  symbol  INT_FIRST	55	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  INT_EXTENDS)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_EXTENDS)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_EXTENDS)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
55	[BUG]  [BUGGY]  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
56	[BUG]  [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
57	[BUG]  [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
58	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	49	None	replace
62	[BUG]  [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	49	None	replace
63	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  ch  &=  1;  ch  &=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch        &=        1;        ch    &=    1;    ch  &=  1;  ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	25	1	add
64	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  ch  &=  1;  ch  &=  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  ch  &=  1;  ch  &=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    ch  &=  1;  ch  &=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	25	1	add
65	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  &=  1;  ch  &=  1;  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  &=  1;  ch  &=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    &=  1;  ch  &=  1;	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
66	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
67	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FLOAT)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FLOAT)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  JsonToken.VALUE_NUMBER_INT)  {  if(ch  ==  INT_FLOAT)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
68	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  JsonToken.VALUE_NUMBER_FLOAT)  {  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
69	[BUG]  [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    -=    0xFF;    ((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7FF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  0x7FF;	  ch    &=    0x7F;    	compilable	  [FE]  AssertionFailedError  	45	1	replace
71	[BUG]  [BUGGY]  ch  &=  0x7FF;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7FF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7FF;	  ch    &=    0x7F;    	compilable	  [FE]  AssertionFailedError  	45	1	replace
72	[BUG]  [BUGGY]  ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM;	  ch    &=    0x7F;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	45	None	replace
73	[BUG]  [BUGGY]  ch  &=  0x7F  ||  _minorState  ==  MINOR_ROOT_BOM;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F  ||  _minorState  ==  MINOR_ROOT_BOM;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7F  ||  _minorState  ==  MINOR_ROOT_BOM;	  ch    &=    0x7F;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	45	None	replace
74	[BUG]  [BUGGY]  if(ch  ==  INT_SPACE)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_SPACE)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_SPACE)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
75	[BUG]  [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
76	[BUG]  [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
77	[BUG]  [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
78	[BUG]  [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
79	[BUG]  [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
80	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  ch);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  ch);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  ch);	  AssertionFailedError.error(   "Unexpected    error:   "    +    _minorState);    	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	35	None	replace
81	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  ch);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  ch);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error: "  +  ch);	  AssertionFailedError.error(   "Unexpected    error:   "    +    _minorState);    	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	35	None	replace
82	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _inputBuffer,  _minorState);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _inputBuffer,  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error: "  +  _inputBuffer,  _minorState);	  AssertionFailedError.error(   "Unexpected    error:   "    +    _minorState);    	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	35	None	replace
83	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  6;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  6;	  ch    -=    4;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  	16	1	replace
84	[BUG]  [BUGGY]  ch  -=  6;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  6;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  6;	  ch    -=    4;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  	16	1	replace
85	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  1);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
86	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorState);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorState);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
87	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT  +  1);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT  +  1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT  +  1);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
88	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.END_OBJECT);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.END_OBJECT);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.END_OBJECT);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
89	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(false);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(false);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(false);	          AssertionFailedError    c    =    new    AssertionFailedError();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
90	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('S'  (code  83)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ch  -=  4;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    -=    4;    ch  -=  4;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('S'  (code  83)):  expected  a  valid  value  (number  	15	1	add
91	[BUG]  [BUGGY]  ch  -=  4;  ch  -=  4;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('S'  (code  83)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ch  -=  4;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ch  -=  4;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('S'  (code  83)):  expected  a  valid  value  (number  	15	1	add
92	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	15	None	add
93	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	15	None	add
94	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	15	None	add
95	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	15	None	add
96	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
97	[BUG]  [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	24	None	replace
98	[BUG]  [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(0);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(0);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(0);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(0);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
101	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ch  -=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    -=    1;    ch  -=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  	11	1	add
102	[BUG]  [BUGGY]  ch  -=  1;  ch  -=  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ch  -=  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ch  -=  1;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number  	11	1	add
103	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	11	None	add
104	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	11	None	add
105	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	11	None	add
106	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	11	None	add
107	[BUG]  [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
108	[BUG]  [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_FF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
109	[BUG]  [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
110	[BUG]  [BUGGY]  Integer  ch  =(int)_minorState.getValue();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(int)_minorState.getValue();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(int)_minorState.getValue();	  Integer    ch    =(Integer)_minorState.getValue();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
111	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.getValue()  +  1;  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.getValue()  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.getValue()  +  1;	  Integer    ch    =(Integer)_minorState.getValue();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
112	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.getLongValue();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.getLongValue();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.getLongValue();	  Integer    ch    =(Integer)_minorState.getValue();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
113	[BUG]  [BUGGY]  Integer  ch  =(int)_minorState.clone();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(int)_minorState.clone();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(int)_minorState.clone();	  Integer    ch    =(Integer)_minorState.clone();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	7	None	replace
114	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.reset();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.reset();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.reset();	  Integer    ch    =(Integer)_minorState.clone();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	7	None	replace
115	[BUG]  [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	22	None	replace
116	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
117	[BUG]  [BUGGY]  |=  0xff;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  |=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	|=  0xff;	  ch    &=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
118	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
119	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	40	None	replace
120	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('ｍ'  (code  65357  /  0xff4d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch  -=  0xFF;  ch  -=  0xF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  0xFF;  ch  -=  0xF;	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('ｍ'  (code  65357  /  0xff4d)):  only  regular  white  space  (\r  	20	1	replace
121	[BUG]  [BUGGY]  ch  -=  0xFF;  ch  -=  0xF;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('ｍ'  (code  65357  /  0xff4d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch  -=  0xFF;  ch  -=  0xF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  0xFF;  ch  -=  0xF;	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('ｍ'  (code  65357  /  0xff4d)):  only  regular  white  space  (\r  	20	1	replace
122	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ch  -=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  -=  1;  ch  -=  2;	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  	20	1	replace
123	[BUG]  [BUGGY]  ch  -=  1;  ch  -=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ch  -=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  1;  ch  -=  2;	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number  	20	1	replace
124	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
125	[BUG]  [BUGGY]  if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ch  &=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    0xff;    ch  &=  0xff;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
127	[BUG]  [BUGGY]  ch  &=  0xff;  ch  &=  0xff;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ch  &=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ch  &=  0xff;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
128	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	47	None	add
129	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	47	None	add
130	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	47	None	add
131	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	47	None	add
132	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
133	[BUG]  [BUGGY]  if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch!=  0xEF)  {  ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  _minorState  =  MINOR_ROOT_BOM;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(ch  ==  0xEF)  {  ch  &=  2;  _minorState  =  MINOR_ROOT_BOM;  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
135	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  _minorState  =  MINOR_ROOT_BOM;  }  [FE]  AssertionFailedError  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  2;  _minorState  =  MINOR_ROOT_BOM;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  ch  &=  2;  _minorState  =  MINOR_ROOT_BOM;  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	compilable	  [FE]  AssertionFailedError  	3	1	replace
136	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ch  -=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    -=    2;    ch  -=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  	13	1	add
137	[BUG]  [BUGGY]  ch  -=  2;  ch  -=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ch  -=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ch  -=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number  	13	1	add
138	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	13	None	add
139	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	13	None	add
140	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	13	None	add
141	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	13	None	add
142	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ch  -=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    -=    3;    ch  -=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  	31	1	add
143	[BUG]  [BUGGY]  ch  -=  3;  ch  -=  3;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ch  -=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ch  -=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('U'  (code  85)):  expected  a  valid  value  (number  	31	1	add
144	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	31	None	add
145	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	31	None	add
146	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	31	None	add
147	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	31	None	add
148	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EMPTY);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EMPTY);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_EMPTY);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
149	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _minorState);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _minorState);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
150	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_TRUE);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_TRUE);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_TRUE);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
151	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_EMBEDDED_OBJECT);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
152	[BUG]  [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
153	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
154	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    3;    ch  &=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
155	[BUG]  [BUGGY]  ch  &=  3;  ch  &=  3;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ch  &=  3;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
156	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  4;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    3;    ch  &=  4;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
157	[BUG]  [BUGGY]  ch  &=  3;  ch  &=  4;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  4;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ch  &=  4;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
158	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    3;    ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
159	[BUG]  [BUGGY]  ch  &=  3;  ch  &=  2;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ch  &=  2;	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	17	1	add
160	[BUG]  [BUGGY]  ch  &=  3;  &=  3;  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    &=  3;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
161	[BUG]  [BUGGY]  ch  &=  3;  c  &=  3;  [CE]  cannot  find  symbol  c  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  c  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    c  &=  3;	  	non-compiled	[CE]  cannot  find  symbol  c	17	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  ch  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch    &=    0x7F;    ch  &=  0x7F;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
163	[BUG]  [BUGGY]  ch  &=  0x7F;  ch  &=  0x7F;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  ch  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    ch  &=  0x7F;	  	compilable	  [FE]  AssertionFailedError  	44	1	add
164	[BUG]  [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	44	None	add
165	[BUG]  [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	44	None	add
166	[BUG]  [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    (ch  &=  0x7F)  ||(_minorState!=  MINOR_ROOT_BOM);	  	non-compiled	[CE]  not  a  statement	44	None	add
167	[BUG]  [BUGGY]  ch  &=  0x7F;  int  ch  &=  0x7F;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  int  ch  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    int  ch  &=  0x7F;	  	non-compiled	[CE]  ';'  expected	44	None	add
168	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  <  =  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
169	[BUG]  [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
170	[BUG]  [BUGGY]  Integer  ch  =(int)_minorState.get(ch);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(int)_minorState.get(ch);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(int)_minorState.get(ch);	          Integer    ch    =(Integer)_minorState.get(ch);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	30	None	replace
171	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	49	None	replace
172	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
173	[BUG]  [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xFF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
174	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
175	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_EOF);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_EOF);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_EOF);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
176	[BUG]  [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
177	[BUG]  [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
178	[BUG]  [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
179	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	23	None	replace
180	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  2;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	23	None	replace
181	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  _origBufferLen);  [CE]  cannot  find  symbol  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  _origBufferLen);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error: "  +  _minorState,  _origBufferLen);	  AssertionFailedError.error(   "Unexpected    error:   "    +    _minorState);    	non-compiled	[CE]  cannot  find  symbol  AssertionFailedError	35	None	replace
182	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_inputBuffer,  _minorState);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_inputBuffer,  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(_inputBuffer,  _minorState);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
183	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorState,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorState,  _origBufferLen);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(_minorState,  _origBufferLen);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
184	[BUG]  [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
185	[BUG]  [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
186	[BUG]  [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(0);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(0);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
187	[BUG]  [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(3);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(3);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ||(ch  ==  0xff)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(3);	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
188	[BUG]  [BUGGY]  &=  0xff;  ch  &=  0xff;  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  &=  0xff;  ch  &=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0xff;  ch  &=  0xff;	  ch    &=    2;    ch    &=    2;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
189	[BUG]  [BUGGY]  &=  0x7F;  ch  &=  0x7F;  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  &=  0x7F;  ch  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0x7F;  ch  &=  0x7F;	  ch    &=    2;    ch    &=    2;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
190	[BUG]  [BUGGY]  &=  0xFF;  ch  &=  0xff;  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  &=  0xFF;  ch  &=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0xFF;  ch  &=  0xff;	  ch    &=    2;    ch    &=    2;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
191	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    }    	non-compiled	[CE]  not  a  statement	50	None	replace
192	[BUG]  [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
193	[BUG]  [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_EF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
194	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
195	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	22	None	replace
196	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
197	[BUG]  [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
198	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
199	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xFF)  {  return  _finishBOM(2);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(2);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
200	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	15	None	add
201	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
202	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
203	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
204	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(1);  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
205	[BUG]  [BUGGY]  &&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
206	[BUG]  [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
207	[BUG]  [BUGGY]  &&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
208	[BUG]  [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
209	[BUG]  [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
210	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  2;  ch  &=  2;  }  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  2;  ch  &=  2;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  2;  ch  &=  2;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
211	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
212	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
213	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
214	[BUG]  [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
215	[BUG]  [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
216	[BUG]  [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	||  _minorState!=  MINOR_ROOT_BOM)  {  if(ch  <  0xEF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
217	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  <  =  0xEF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
218	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  1;  ch  &=  1;  }  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  1;  ch  &=  1;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonParseException  ch  &=  1;  ch  &=  1;  }	  	non-compiled	[CE]  ';'  expected	25	None	add
219	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
220	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  getJsonToken();  if(ch  ==  INT_RBOM)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
221	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _maximumSize();  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _maximumSize();  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _maximumSize();  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
222	[BUG]  [BUGGY]  if(_finishBOM(1)  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  if(_finishBOM(1)  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_finishBOM(1)  ==  0xFF)  {  ch  -=  0xFF;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	24	None	replace
223	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  1;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	21	None	replace
224	[BUG]  [BUGGY]  ch  &=  0x7F;  Character  ch  &=  0x7F;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  Character  ch  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    Character  ch  &=  0x7F;	  	non-compiled	[CE]  ';'  expected	44	None	add
225	[BUG]  [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    (ch  &=  0x7F);	  	non-compiled	[CE]  not  a  statement	44	None	add
226	[BUG]  [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F;  (ch  &=  0x7F));  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0x7F;    (ch  &=  0x7F));	  	non-compiled	[CE]  not  a  statement	44	None	add
227	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('｜'  (code  65372  /  0xff5c)):  only  regular  white  space  (\r      [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  -=  1;  ((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    -=    0xFF;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	43	None	replace
228	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(0);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  0x7F  +  1;	  ch    &=    0x7F;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	45	1	replace
230	[BUG]  [BUGGY]  ch  &=  0x7F  +  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7F  +  1;	  ch    &=    0x7F;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	45	1	replace
231	[BUG]  [BUGGY]  &=  0x7F;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  &=  0x7F;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0x7F;	  ch    &=    0x7F;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
232	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  Integer  ch  -=  0xFF;  ch  -=  0xFF;  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  Integer  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    Integer  ch  -=  0xFF;  ch  -=  0xFF;	  	non-compiled	[CE]  ';'  expected	19	None	add
233	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  (ch  -=  0xFF;  ch  -=  0xFF);  [CE]  ')'  expected  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  (ch  -=  0xFF;  ch  -=  0xFF);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    (ch  -=  0xFF;  ch  -=  0xFF);	  	non-compiled	[CE]  ')'  expected	19	None	add
234	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  Character  ch  -=  0xFF;  ch  -=  0xFF;  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  Character  ch  -=  0xFF;  ch  -=  0xFF;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    Character  ch  -=  0xFF;  ch  -=  0xFF;	  	non-compiled	[CE]  ';'  expected	19	None	add
235	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EOF);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_EOF);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_EOF);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
236	[BUG]  [BUGGY]  &&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
237	[BUG]  [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
238	[BUG]  [BUGGY]  &&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch!=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
239	[BUG]  [BUGGY]  &=  0xff;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  &=  0xff;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  0xff;	  ch    &=    0xff;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
240	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	ch  &=  0xff  +  1;	  ch    &=    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	48	1	replace
241	[BUG]  [BUGGY]  ch  &=  0xff  +  1;  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff  +  1;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0xff  +  1;	  ch    &=    0xff;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	48	1	replace
242	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.getKey();  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.getKey();  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.getKey();	  Integer    ch    =(Integer)_minorState.getValue();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
243	[BUG]  [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
244	[BUG]  [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Y'  (code  89)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    2;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	13	None	add
245	[BUG]  [BUGGY]  ch  &=  3;  JsonToken  ch  &=  3;  [CE]  ';'  expected  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  JsonToken  ch  &=  3;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    JsonToken  ch  &=  3;	  	non-compiled	[CE]  ';'  expected	17	None	add
246	[BUG]  [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	17	None	add
247	[BUG]  [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0x7F))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0x7F))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ((  ch  >>  3)&  0x7F))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	17	None	add
248	[BUG]  [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ((  ch  >>  3)&  0xFF))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	17	None	add
249	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	11	None	add
250	[BUG]  [BUGGY]  ch  -=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('Z'  (code  90)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  1;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    1;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	11	None	add
251	[BUG]  [BUGGY]  &=  2;  ch  &=  2;  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  &=  2;  ch  &=  2;  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&=  2;  ch  &=  2;	  ch    &=    1;    ch    &=    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
252	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	31	None	add
253	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	31	None	add
254	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(0);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(0);	          AssertionFailedError    c    =    new    AssertionFailedError();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
255	[BUG]  [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
256	[BUG]  [BUGGY]  &&(_minorState!=  INT_PLUS))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  INT_PLUS))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  INT_PLUS))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
257	[BUG]  [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorFeatures);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError  c  =  new  AssertionFailedError(_minorFeatures);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError  c  =  new  AssertionFailedError(_minorFeatures);	  AssertionFailedError    c    =    new    AssertionFailedError(_minorState);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
258	[BUG]  [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
259	[BUG]  [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
260	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	26	1	replace
261	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	26	1	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState  ==  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
263	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [FE]  AssertionFailedError  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  AssertionFailedError  	26	1	replace
264	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  else  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  else  {  return  _finishBOM(1);  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	26	1	replace
265	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  else  {  return  _finishBOM(1);  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  else  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  &=  1;  ch  &=  1;  }  else  {  return  _finishBOM(1);  }	  ch    &=    1;    ch    &=    1;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR  	26	1	replace
266	[BUG]  [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xF))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xF))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ((  ch  >>  3)&  0xF))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	17	None	add
267	[BUG]  [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xF))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch  &=  3;  ((  ch  >>  3)&  0xF))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    3;    ((  ch  >>  3)&  0xF))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	17	None	add
268	[BUG]  [BUGGY]  if(_finishBOM(1))  {  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(_finishBOM(1))  {  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_finishBOM(1))  {  ch  &=  2;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	3	None	replace
269	[BUG]  [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
270	[BUG]  [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(2);	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
271	[BUG]  [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
272	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _maxContiguous);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _maxContiguous);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _maxContiguous);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
273	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorFeatures);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorFeatures);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.START_OBJECT,  _minorFeatures);	  Integer    ch    =    _parseInt(JsonToken.START_OBJECT);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	38	None	replace
274	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
275	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(2);  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  ch  -=  0xFF;  ch  -=  0xFF;  }  else  {  return  _finishBOM(2);  }	  ch    -=    0xFF;    ch    -=    0xFF;    	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('﹝'  (code  65117  /  0xfe5d)):  only  regular  white  space  (\r  	20	1	replace
276	[BUG]  [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _maxContiguous);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _maxContiguous);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =  _parseInt(JsonToken.VALUE_NULL,  _maxContiguous);	  Integer    ch    =    _parseInt(JsonToken.VALUE_NULL);    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	36	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
278	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	compilable	  [FE]  AssertionFailedError  	51	1	replace
279	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xFF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xFF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
280	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]                com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	6	None	replace
281	[BUG]  [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  illegal  start  of  expression  [FE]                  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
282	[BUG]  [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
283	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]    JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
284	[BUG]  [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]      JsonParseException    [CONTEXT]      {      [BUGGY]  ch    -=    0xFF;    ch  -=  0xFF;  ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        -=        0xFF;        ch    -=    0xFF;    ((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  not  a  statement	19	None	add
285	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    	non-compiled	[CE]  not  a  statement	28	None	replace
286	[BUG]  [BUGGY]  ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch  &=  0x7F  ||  _minorState!=  MINOR_ROOT_BOM);	  ch    &=    0x7F;    	non-compiled	[CE]  ';'  expected	45	None	replace
287	[BUG]  [BUGGY]  if(ch  ==  0xEF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xEF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xEF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
288	[BUG]  [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xEF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xEF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState!=  MINOR_ROOT_BOM)  {  if(ch  ==  0xEF)  {  return  _finishBOM(1);  }	  if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    <    =    0xEF)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
289	[BUG]  [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('X'  (code  88)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  3;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    3;    ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	31	None	add
290	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
291	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LCURLY)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
292	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
293	[BUG]  [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    2;    ch  &=  2;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        2;        ch    &=    2;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_LBRACKET)  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
294	[BUG]  [BUGGY]  ((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  ((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  not  a  statement	46	None	replace
295	[BUG]  [BUGGY]  &&((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
296	[BUG]  [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
297	[BUG]  [BUGGY]  if(_finishBOM(1))  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(_finishBOM(1))  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_finishBOM(1))  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	33	None	replace
298	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  1;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	33	None	replace
299	[BUG]  [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  illegal  start  of  expression  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
300	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
301	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
302	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [CE]  illegal  start  of  expression  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(ch  ==  0xFF)  {  if(_minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(0);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
303	[BUG]  [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR    [CONTEXT]      {      [BUGGY]  ch    &=    1;    ch  &=  1;  if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch        &=        1;        ch    &=    1;    if(_minorState!=  MINOR_ROOT_BOM)  {  JsonToken  ch  =  _nextToken();  if(ch  ==  INT_FF)  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
304	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);	  	non-compiled	[CE]  not  a  statement	47	None	add
305	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  	non-compiled	[CE]  not  a  statement	47	None	add
306	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	47	None	add
307	[BUG]  [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      {      [BUGGY]  ch  &=  0xff;  ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    &=    0xff;    ((  ch  >>  0xff)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  	non-compiled	[CE]  not  a  statement	47	None	add
308	[BUG]  [BUGGY]  Integer  ch  =(Integer)_minorState.getValue(0);  [CE]  variable  ch  is  already  defined  in  method  _startDocument(int)  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Integer  ch  =(Integer)_minorState.getValue(0);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	Integer  ch  =(Integer)_minorState.getValue(0);	  Integer    ch    =(Integer)_minorState.getValue();    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startDocument(int)	8	None	replace
309	[BUG]  [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }  [CE]  cannot  find  symbol  INT_FIRST  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(_minorState  ==  MINOR_ROOT_BOM)  {  if(ch  ==  INT_FIRST  ||  ch  ==  INT_FIRST)return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  cannot  find  symbol  INT_FIRST	55	None	replace
310	[BUG]  [BUGGY]  if(ch  ==  INT_FIRST  ||  _minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [CE]  cannot  find  symbol  INT_FIRST  [FE]          AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(ch  ==  INT_FIRST  ||  _minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  INT_FIRST  ||  _minorState!=  MINOR_ROOT_BOM)  {  return  _finishBOM(1);  }	          if(_minorState!=    MINOR_ROOT_BOM)    {    if(ch    ==    INT_FIRST    ||    ch    ==    INT_FIRST)    {    return    _finishBOM(1);    }    	non-compiled	[CE]  cannot  find  symbol  INT_FIRST	55	None	replace
311	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  not  a  statement  [FE]            com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	if(ch  ==  0xFF)  {  ch  &=  2;  ((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  not  a  statement	4	None	replace
312	[BUG]  [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [CE]  illegal  start  of  expression  [FE]              com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  }	  ch    &=    2;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
313	[BUG]  [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ((CTRL-CHAR      [CONTEXT]      {      [BUGGY]  &&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	&&(ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(1);  }	  ch    &=    1;    ((    ch    >>    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)))    {    return    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
314	[BUG]  [BUGGY]  ch  -=  4;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [CE]  not  a  statement  [FE]    com.fasterxml.jackson.core.JsonParseException:  Unexpected  character  ('W'  (code  87)):  expected  a  valid  value  (number    [CONTEXT]      {      [BUGGY]  ch  -=  4;  ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	ch    -=    4;    ((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)))  {  return  _finishBOM(2);	  	non-compiled	[CE]  not  a  statement	15	None	add
315	[BUG]  [BUGGY]  AssertionFailedError.error( "Unexpected  error:  ' "  +  _minorState);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.error( "Unexpected  error:  ' "  +  _minorState);  [BUGGY]        if  ((ch  ==  0xEF)  &&  (_minorState  !=  MINOR_ROOT_BOM))  {  return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	AssertionFailedError.error( "Unexpected  error:  ' "  +  _minorState);	  AssertionFailedError.error(   "Unexpected    error:   "    +    _minorState);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
