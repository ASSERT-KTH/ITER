bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	non-compiled	[CE]  incompatible  types	63	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	compilable	  [FE]  AssertionFailedError  	63	1	replace
5	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	compilable	  [FE]  AssertionFailedError  	63	1	replace
6	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
7	[BUG]  [BUGGY]  if(_updateStringLocation()!=  null)  {  return  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_updateStringLocation()!=  null)  {  return  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation()!=  null)  {  return  _updateStringLocation();  }	  if(_updateStringLocation()!=    null)    {    _updateStringLocation();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
8	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _minorState);	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	2	None	replace
9	[BUG]  [BUGGY]  _updateTokenLocation(JsonToken.VALUE_STRING,  ch);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(JsonToken.VALUE_STRING,  ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(JsonToken.VALUE_STRING,  ch);	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	2	None	replace
10	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _finishString());  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _finishString());  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _finishString());	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  'void'  type  not  allowed  here	2	None	replace
11	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _maximumSize);  [CE]  cannot  find  symbol  _maximumSize  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _maximumSize);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_STRING,  _maximumSize);	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  _maximumSize	2	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    =    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
13	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    =    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
14	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }	  if(ch    <    =    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
15	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  =  0)  {  _updateTokenLocation();  }	  if(ch    <    =    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
16	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
17	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
19	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
20	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
21	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NULL,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NULL,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_NULL,  _minorState);	  _updateTokenLocation(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NUMBER_INT,  JsonToken.VALUE_NULL);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NUMBER_INT,  JsonToken.VALUE_NULL);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_NUMBER_INT,  JsonToken.VALUE_NULL);	  _updateTokenLocation(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	3	None	replace
23	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  JsonToken.VALUE_NULL);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING,  JsonToken.VALUE_NULL);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_STRING,  JsonToken.VALUE_NULL);	  _updateTokenLocation(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	3	None	replace
24	[BUG]  [BUGGY]  _updateTokenLocation(JsonToken.VALUE_NULL,  ch);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(JsonToken.VALUE_NULL,  ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(JsonToken.VALUE_NULL,  ch);	  _updateTokenLocation(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	3	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  0)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
26	[BUG]  [BUGGY]  if(ch  ==  0)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  0)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
28	[BUG]  [BUGGY]  if(ch  <  0)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	compilable	  [FE]  AssertionFailedError  	14	1	replace
29	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _finishString(),  _minorState);  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _finishString(),  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _finishString(),  _minorState);	  _updateTokenLocation(ch,    _finishString());    	non-compiled	[CE]  'void'  type  not  allowed  here	4	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation(ch,  _finishString());  }  [CE]  'void'  type  not  allowed  here  [FE]                      AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation(ch,  _finishString());  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation(ch,  _finishString());  }	  _updateTokenLocation(ch,    _finishString());    	non-compiled	[CE]  'void'  type  not  allowed  here	4	None	replace
31	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _finishString(),  JsonToken.VALUE_STRING);  [CE]  'void'  type  not  allowed  here  [FE]                        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _finishString(),  JsonToken.VALUE_STRING);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _finishString(),  JsonToken.VALUE_STRING);	  _updateTokenLocation(ch,    _finishString());    	non-compiled	[CE]  'void'  type  not  allowed  here	4	None	replace
32	[BUG]  [BUGGY]  _updateStringLocation(ch,  MINOR_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  MINOR_VALUE_LEADING_ZEROS);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	72	None	replace
33	[BUG]  [BUGGY]  _updateStringLocation(ch,  INT_QUOTE);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  INT_QUOTE);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  INT_QUOTE);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
34	[BUG]  [BUGGY]  _updateStringLocation(ch,  _minorToken);  [CE]  cannot  find  symbol  _minorToken  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _minorToken);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _minorToken);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  _minorToken	72	None	replace
35	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
36	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }	  if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
38	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  0)  {  _updateTokenLocation();  }	  if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
40	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
42	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch!=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch!=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
44	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch!=  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch!=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch!=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
45	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  If(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  If(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  	non-compiled	[CE]  ';'  expected	11	None	add
46	[BUG]  [BUGGY]  _updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS,  _minorState);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS,  _minorState);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	1	None	replace
47	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _minorState,  MINOR_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _minorState,  MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _minorState,  MINOR_VALUE_LEADING_ZEROS);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	1	None	replace
48	[BUG]  [BUGGY]  _updateTokenLocation(ch,  INT_QUOTE);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  INT_QUOTE);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  INT_QUOTE);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	1	None	replace
49	[BUG]  [BUGGY]  _updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  MINOR_VALUE_LEADING_ZEROS);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	1	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  _finishString();  _finishString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        _finishString();    _finishString();  _finishString();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
51	[BUG]  [BUGGY]  _finishString();    _finishString();  _finishString();  _finishString();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  _finishString();  _finishString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    _finishString();  _finishString();	  	compilable	  [FE]  AssertionFailedError  	5	1	add
52	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }	  	non-compiled	[CE]  incompatible  types	5	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
54	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
56	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
58	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
59	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	38	None	add
60	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
63	[BUG]  [BUGGY]  else  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  else  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	else  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
64	[BUG]  [BUGGY]  if(ch  ==  INT_VALUE_LEADING_ZEROS)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  cannot  find  symbol  INT_VALUE_LEADING_ZEROS  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_VALUE_LEADING_ZEROS)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_VALUE_LEADING_ZEROS)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  cannot  find  symbol  INT_VALUE_LEADING_ZEROS	65	None	replace
65	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _	  	non-compiled	[CE]  ';'  expected	30	None	add
66	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenL  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenL  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenL	  	non-compiled	[CE]  ';'  expected	30	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
68	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
69	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _update  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _update  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _update	  	non-compiled	[CE]  ';'  expected	30	None	add
70	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_	  	non-compiled	[CE]  ')'  expected	30	None	add
71	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
73	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	46	None	replace
74	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	18	None	add
75	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
76	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
77	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	18	None	add
78	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]            IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	18	None	add
79	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
80	[BUG]  [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
81	[BUG]  [BUGGY]  _updateEndValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateEndValue();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateEndValue();	  _updateEndString();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
82	[BUG]  [BUGGY]  _updateEndString(ch);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateEndString(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateEndString(ch);	  _updateEndString();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
85	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
86	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateStringLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
87	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
88	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
90	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
91	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    	non-compiled	[CE]  incompatible  types	56	None	replace
92	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  _finishString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
94	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
95	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
96	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
97	[BUG]  [BUGGY]  if(_updateStringLocation())  {  return  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_updateStringLocation())  {  return  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation())  {  return  _updateStringLocation();  }	  if(_updateStringLocation())    {    _updateStringLocation();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
99	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	26	1	replace
100	[BUG]  [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
101	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_WS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishHashComment(MINOR_VALUE_LEADING_WS);	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  JsonParseException  	26	1	replace
102	[BUG]  [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_WS);  [FE]  JsonParseException  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_WS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishHashComment(MINOR_VALUE_LEADING_WS);	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  JsonParseException  	26	1	replace
103	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  return  _finishString();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	51	None	replace
104	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishNegativeNumber();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishNegativeNumber();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
105	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _finishString();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	51	None	replace
106	[BUG]  [BUGGY]  _updateStartValue(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStartValue(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartValue(ch);	  _updateStartValue();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
107	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	          if(ch    <    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
108	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	1	add
109	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	68	1	add
110	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	68	None	add
111	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	68	None	add
112	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _minorState);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	71	None	replace
113	[BUG]  [BUGGY]  _updateTokenLocation(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(JsonToken.VALUE_EMBEDDED_OBJECT,  ch);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	71	None	replace
114	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _finishString());  [CE]  'void'  type  not  allowed  here  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _finishString());  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _finishString());	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  'void'  type  not  allowed  here	71	None	replace
115	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _maximumSize);  [CE]  cannot  find  symbol  _maximumSize  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _maximumSize);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT,  _maximumSize);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  _maximumSize	71	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
117	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
119	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  _finishString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
121	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
123	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
124	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	8	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch!=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
126	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch!=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
127	[BUG]  [BUGGY]  ||  ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
128	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateStringLocation();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  _updateStringLocation();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
129	[BUG]  [BUGGY]  ||  ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
130	[BUG]  [BUGGY]  ||  ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
132	[BUG]  [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
134	[BUG]  [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch!=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
136	[BUG]  [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch!=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch!=  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	49	1	add
137	[BUG]  [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  If(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  If(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    If(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  ';'  expected	49	None	add
138	[BUG]  [BUGGY]  return  _updateStringLocation(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  return  _updateStringLocation(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	return  _updateStringLocation(ch);	  return    _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
139	[BUG]  [BUGGY]  return  _updateStringToken();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  return  _updateStringToken();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	return  _updateStringToken();	  return    _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
140	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
141	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	60	None	replace
142	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  0)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
144	[BUG]  [BUGGY]  if(ch  ==  0)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
146	[BUG]  [BUGGY]  if(ch  ==  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  ==  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
148	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  ==  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  >=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
150	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  >=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch!=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch!=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
152	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch!=  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch!=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch!=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  ==  INT_QUOTE)  {  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
154	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    if(ch  ==  INT_QUOTE)  {  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
155	[BUG]  [BUGGY]  ch  =  _finishString();  [CE]  incompatible  types  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _finishString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _finishString();	          ch    =    _skipWS(ch);    	non-compiled	[CE]  incompatible  types	53	None	replace
156	[BUG]  [BUGGY]  ch  =  _currToken();  [CE]  cannot  find  symbol  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _currToken();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _currToken();	          ch    =    _skipWS(ch);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
157	[BUG]  [BUGGY]  ch  =  _skipSegments(ch);  [CE]  cannot  find  symbol  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _skipSegments(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _skipSegments(ch);	          ch    =    _skipWS(ch);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
158	[BUG]  [BUGGY]  ch  =  _finishSlashComment(ch);  [CE]  cannot  find  symbol  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _finishSlashComment(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _finishSlashComment(ch);	          ch    =    _skipWS(ch);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
159	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
160	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
161	[BUG]  [BUGGY]  if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
163	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	compilable	  [FE]  AssertionFailedError  	59	1	replace
164	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	20	None	add
165	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
166	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  >=  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
167	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
168	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
170	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
171	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _	  	non-compiled	[CE]  ';'  expected	32	None	add
172	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
173	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_	  	non-compiled	[CE]  ')'  expected	32	None	add
174	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT	  	non-compiled	[CE]  ')'  expected	32	None	add
175	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                ch    =    _skipWS(ch);    ch  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
176	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWS(ch);  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    ch  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
177	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWords(ch);  [CE]  cannot  find  symbol  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWords(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    ch  =  _skipWords(ch);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
178	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  int  ch  =  _skipWS(ch);  [CE]  variable  ch  is  already  defined  in  method  _startValue(int)  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  int  ch  =  _skipWS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    int  ch  =  _skipWS(ch);	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startValue(int)	52	None	add
179	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWord(ch);  [CE]  cannot  find  symbol  [FE]          com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipWord(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    ch  =  _skipWord(ch);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
180	[BUG]  [BUGGY]  _updateStartString(ch,  _minorState);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStartString(ch,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString(ch,  _minorState);	  _updateStartString(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
181	[BUG]  [BUGGY]  _updateStartString(ch,  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStartString(ch,  JsonToken.VALUE_STRING);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString(ch,  JsonToken.VALUE_STRING);	  _updateStartString(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
182	[BUG]  [BUGGY]  _updateStartString(ch,  _finishHashComment);  [CE]  cannot  find  symbol  _finishHashComment  [FE]                    AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStartString(ch,  _finishHashComment);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString(ch,  _finishHashComment);	  _updateStartString(ch);    	non-compiled	[CE]  cannot  find  symbol  _finishHashComment	44	None	replace
183	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
184	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _finishNegativeNumber();    }    	non-compiled	[CE]  incompatible  types	57	None	replace
185	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _finishNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
186	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _finishNegativeNumber();    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
187	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _finishNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _finishNegativeNumber();    }    	non-compiled	[CE]  incompatible  types	57	None	replace
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	40	1	add
189	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	40	1	add
190	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  0)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  0)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  0)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	40	None	add
191	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  ch);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  ch);	  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	17	None	replace
192	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS  +  1);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS  +  1);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_ZEROS  +  1);	  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	17	None	replace
193	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_HASHING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_HASHING_ZEROS  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishSlashComment(MINOR_VALUE_HASHING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_HASHING_ZEROS);	  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_HASHING_ZEROS	17	None	replace
194	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	70	None	replace
195	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
196	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	70	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
198	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
199	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }	  	non-compiled	[CE]  incompatible  types	58	None	add
200	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  return  _startNegativeNumber();  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  return  _startNegativeNumber();  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  _startString();  }  else  {  return  _startNegativeNumber();  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
202	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  else  {  return  _startNegativeNumber();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  if(ch  ==  INT_QUOTE)  {  _startString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    if(ch  ==  INT_QUOTE)  {  _startString();  }  else  {  return  _startNegativeNumber();  }	  	compilable	  [FE]  AssertionFailedError  	58	1	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
204	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	9	1	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  <  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
206	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  <  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  >=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
208	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  >=  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  >=  INT_QUOTE)  {  _finishString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  <  INT_QUOTE)  {  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
210	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _startString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  <  INT_QUOTE)  {  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
211	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  If(ch  <  INT_QUOTE)  {  _finishString();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  If(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _finishString();    }    If(ch  <  INT_QUOTE)  {  _finishString();  }	  	non-compiled	[CE]  ';'  expected	15	None	add
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
213	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
215	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
217	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
219	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  <  0)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
221	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  <  0)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
222	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  int  ch  =  _skipWS(ch);  if(ch  <  0)  {  _updateTokenLocation();  }  [CE]  variable  ch  is  already  defined  in  method  _startValue(int)  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  int  ch  =  _skipWS(ch);  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    int  ch  =  _skipWS(ch);  if(ch  <  0)  {  _updateTokenLocation();  }	  	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startValue(int)	61	None	add
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  >=  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  >=  0)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
224	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  >=  0)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  >=  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  >=  0)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	61	1	add
225	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  If(ch  <  0)  {  _updateTokenLocation();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  If(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    If(ch  <  0)  {  _updateTokenLocation();  }	  	non-compiled	[CE]  ';'  expected	61	None	add
226	[BUG]  [BUGGY]  _updateStringLocation(ch,  true);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  true);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  true);	  _updateStringLocation(ch);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
227	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	non-compiled	[CE]  incompatible  types	64	None	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
229	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	compilable	  [FE]  AssertionFailedError  	64	1	replace
230	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	non-compiled	[CE]  incompatible  types	64	None	replace
231	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  _finishString();  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  _finishString();  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
232	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }	  	non-compiled	[CE]  incompatible  types	5	None	add
233	[BUG]  [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  {  case  INT_QUOTE:  return  _startSlashComment(INT_QUOTE);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  {  case  INT_QUOTE:  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        _finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  _finishString();  }  else  {  case  INT_QUOTE:  return  _startSlashComment(INT_QUOTE);  }	  	non-compiled	[CE]  orphaned  case	5	None	add
234	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startQuote();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startQuote();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _startQuote();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishQuote();    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
235	[BUG]  [BUGGY]  if(ch  <  =  0)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  0)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
237	[BUG]  [BUGGY]  if(ch  <  0)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  return  _startString();  }	          if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	compilable	  [FE]  AssertionFailedError  	50	1	replace
238	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
239	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
240	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
241	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	69	1	replace
242	[BUG]  [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	69	1	replace
243	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  'n')  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  'n')  {  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
244	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  _finishString();  }  [CE]  cannot  find  symbol  INT_MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  cannot  find  symbol  INT_MINOR_VALUE_LEADING_ZEROS	65	None	replace
245	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startNegativeNumber();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startNegativeNumber();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  incompatible  types	65	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  >=  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  >=  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
247	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE)  {  _finishString();  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  >=  INT_QUOTE)  {  _finishString();  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  >=  INT_QUOTE)  {  _finishString();  _finishString();  }	  _finishString();    _finishString();    	compilable	  [FE]  AssertionFailedError  	6	1	replace
248	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
249	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
250	[BUG]  [BUGGY]  if(_currToken  ==  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_currToken  ==  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_currToken  ==  null)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
251	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startSlashComment(INT_QUOTE);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	non-compiled	[CE]  incompatible  types	64	None	replace
252	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
253	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
254	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _currToken,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _currToken,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _currToken,  _minorState);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	1	None	replace
255	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _minorState,  DEFAULT_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  DEFAULT_VALUE_LEADING_ZEROS  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _minorState,  DEFAULT_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _minorState,  DEFAULT_VALUE_LEADING_ZEROS);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VALUE_LEADING_ZEROS	1	None	replace
256	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  0)  {  return  _updateTokenLocation();  }	  if(ch    <    0)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
258	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	32	1	add
259	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _update  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _update  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _update	  	non-compiled	[CE]  ';'  expected	32	None	add
260	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _	  	non-compiled	[CE]  ';'  expected	32	None	add
261	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
262	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	18	None	add
263	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }	  	non-compiled	[CE]  incompatible  types	11	None	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
265	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
266	[BUG]  [BUGGY]  return  _updateStringLocation().toString();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  return  _updateStringLocation().toString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	return  _updateStringLocation().toString();	  return    _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
267	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishNumber();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishNumber();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
268	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startQuoted();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _startQuoted();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _startQuoted();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishQuoted();    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
269	[BUG]  [BUGGY]  _updateEndLine();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateEndLine();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateEndLine();	  _updateEndString();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
270	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  int  c  =  _skipWS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                ch    =    _skipWS(ch);    int  c  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
271	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  int  c  =  _skipWS(ch);  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  int  c  =  _skipWS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    int  c  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
272	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipS(ch);  [CE]  cannot  find  symbol  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  ch  =  _skipS(ch);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    ch  =  _skipS(ch);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
273	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
274	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
275	[BUG]  [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
276	[BUG]  [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
277	[BUG]  [BUGGY]  ch  =  _finishSlashComment(CH);  [CE]  cannot  find  symbol  CH  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _finishSlashComment(CH);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _finishSlashComment(CH);	          ch    =    _skipWS(ch);    	non-compiled	[CE]  cannot  find  symbol  CH	53	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
279	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
280	[BUG]  [BUGGY]  _updateStartString(ch,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStartString(ch,  _origBufferLen);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString(ch,  _origBufferLen);	  _updateStartString(ch);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
281	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
282	[BUG]  [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
283	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
284	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_	  	non-compiled	[CE]  ')'  expected	35	None	add
285	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	38	None	add
286	[BUG]  [BUGGY]  _updateStringLocation(ch,  _currToken);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _currToken);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _currToken);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
287	[BUG]  [BUGGY]  _updateStringLocation(ch,  _minorState,  _origBufferLen);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _minorState,  _origBufferLen);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _minorState,  _origBufferLen);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
288	[BUG]  [BUGGY]  _updateStringLocation(ch,  _minorState,  _currToken);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _minorState,  _currToken);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _minorState,  _currToken);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
289	[BUG]  [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
290	[BUG]  [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
291	[BUG]  [BUGGY]  if(ch  ==  ';')  {  if(ch  <  =  0)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  ';')  {  if(ch  <  =  0)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  ';')  {  if(ch  <  =  0)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
292	[BUG]  [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          if(ch  ==  INT_QUOTE)  {  return  _startString();  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                if(ch    ==    INT_QUOTE)    {    return    _startString();    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	49	None	add
293	[BUG]  [BUGGY]  Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_WS);  [CE]  variable  ch  is  already  defined  in  method  _startValue(int)  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_WS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_WS);	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startValue(int)	26	None	replace
294	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _finishString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
295	[BUG]  [BUGGY]  if(ch  <  0x800)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0x800)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0x800)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
296	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  while(ch  >=  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  0)  {  _updateTokenLocation();  }  while(ch  >=  0)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	timeout	36	1	replace
297	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  while(ch  >=  0)  {  _updateTokenLocation();  }  timeout  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  while(ch  >=  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  _updateTokenLocation();  }  while(ch  >=  0)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	timeout	36	1	replace
298	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  =='<  ')  {  return  _finishString();  }  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  =='<  ')  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  =='<  ')  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  unclosed  character  literal	28	None	replace
299	[BUG]  [BUGGY]  safeToken(ch)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  safeToken(ch)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	safeToken(ch)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  ';'  expected	60	None	replace
300	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_PLUS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
301	[BUG]  [BUGGY]  if(ch  ==  '#')  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
302	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(MINOR_VALUE_LEADING_WS);    }    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
304	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
305	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startStartString();  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startStartString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startStartString();  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
306	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_STARTING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_STARTING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishSlashComment(MINOR_VALUE_STARTING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_STARTING_ZEROS);	  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_STARTING_ZEROS	17	None	replace
307	[BUG]  [BUGGY]  if(ch  <  =  0)  {  _finishString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
308	[BUG]  [BUGGY]  _updateStringLocation(ch,  _finishString());  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _finishString());  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _finishString());	  _updateStringLocation(ch);    	non-compiled	[CE]  'void'  type  not  allowed  here	23	None	replace
309	[BUG]  [BUGGY]  if(ch  <  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
310	[BUG]  [BUGGY]  if(ch  <  =  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
311	[BUG]  [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  0)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
312	[BUG]  [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishHashComment(MINOR_VALUE_LEADING_ZEROS);	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	73	None	replace
313	[BUG]  [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_KEY);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_KEY  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishHashComment(MINOR_VALUE_LEADING_KEY);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishHashComment(MINOR_VALUE_LEADING_KEY);	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_KEY	73	None	replace
314	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
315	[BUG]  [BUGGY]  Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  [CE]  variable  ch  is  already  defined  in  method  _startValue(int)  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	Integer  ch  =  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  variable  ch  is  already  defined  in  method  _startValue(int)	22	None	replace
316	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
317	[BUG]  [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  '#')  {  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
318	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_STRING,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  cannot  find  symbol  VALUE_EMBEDDED_STRING  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_STRING,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_STRING,  JsonToken.VALUE_EMBEDDED_OBJECT);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  VALUE_EMBEDDED_STRING	71	None	replace
319	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	40	None	add
320	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	40	None	add
321	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _updateStringLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
322	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	20	None	add
323	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	20	None	add
324	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	20	None	add
325	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	68	None	add
326	[BUG]  [BUGGY]  if(ch  <  0)  {  if(_updateTokenLocation()  >  0)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(_updateTokenLocation()  >  0)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(_updateTokenLocation()  >  0)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
327	[BUG]  [BUGGY]  if(ch  <  0)  {  if(_updateTokenLocation()  ==  0)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  if(_updateTokenLocation()  ==  0)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  if(_updateTokenLocation()  ==  0)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
328	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	          if(ch    <    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
329	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  >  INT_QUOTE)  {  return  _startString();  }	          if(ch    <    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
330	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ch  >=  INT_PLUS)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ch  >=  INT_PLUS)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_PLUS)  {  if(ch  >=  INT_PLUS)  {  return  _startString();  }	          if(ch    <    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
331	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  'n')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  'n')  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  0)  {  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	12	1	replace
333	[BUG]  [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  0)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  0)  {  _updateTokenLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	12	1	replace
334	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateStringLocation();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
335	[BUG]  [BUGGY]  _updateTokenLocation(jp,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  cannot  find  symbol  jp  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(jp,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(jp,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  jp	71	None	replace
336	[BUG]  [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  cannot  find  symbol  jsonToken  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_EMBEDDED_OBJECT);	  _updateTokenLocation(ch,    JsonToken.VALUE_EMBEDDED_OBJECT);    	non-compiled	[CE]  cannot  find  symbol  jsonToken	71	None	replace
337	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	38	None	add
338	[BUG]  [BUGGY]  _updateStringLocation(ch,  _maxContiguous);  [CE]  cannot  find  symbol  _maxContiguous  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _maxContiguous);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _maxContiguous);	  _updateStringLocation(ch);    	non-compiled	[CE]  cannot  find  symbol  _maxContiguous	23	None	replace
339	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishQuote();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _finishQuote();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _finishQuote();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishQuote();    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
340	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                ch    =    _skipWS(ch);    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
341	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
342	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	52	None	add
343	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  ch  =  _skipWS(ch);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	                ch    =    _skipWS(ch);    if(ch  ==  INT_QUOTE)  {  ch  =  _skipWS(ch);  }	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
344	[BUG]  [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  ch  =  _skipWS(ch);  }  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]          ch  =  _skipWS(ch);  if(ch  ==  INT_QUOTE)  {  ch  =  _skipWS(ch);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	                ch    =    _skipWS(ch);    if(ch  ==  INT_QUOTE)  {  ch  =  _skipWS(ch);  }	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	52	1	add
345	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _minorState,  _currToken);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _minorState,  _currToken);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _minorState,  _currToken);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	1	None	replace
346	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _minorState,  INT_QUOTE);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  _minorState,  INT_QUOTE);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _minorState,  INT_QUOTE);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	1	None	replace
347	[BUG]  [BUGGY]  _updateTokenLocation(ch,  INT_QUOTE,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(ch,  INT_QUOTE,  _minorState);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  INT_QUOTE,  _minorState);	  _updateTokenLocation(ch,    _minorState);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	1	None	replace
348	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  1);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  1);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_ZEROS,  1);	  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	17	None	replace
349	[BUG]  [BUGGY]  _updateStringLocation(ch,  _minorState,  INT_QUOTE);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateStringLocation(ch,  _minorState,  INT_QUOTE);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _minorState,  INT_QUOTE);	  _updateStringLocation(ch,    _minorState);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  return  _startString();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
351	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  return  _startString();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
352	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  {  return  _startNegativeNumber();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
353	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0x7F)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    else    {    return    _startNegativeNumber();    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
355	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	36	1	replace
356	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  cannot  find  symbol  INT_QUOTES  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	36	None	replace
357	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  cannot  find  symbol  INT_QUOTES  [FE]        AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  _updateTokenLocation();  }  while(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	36	None	replace
358	[BUG]  [BUGGY]  if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
359	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTES)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTES)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTES)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
360	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  _updateString();  }	  ||    ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
361	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTES)  {  return  _finishString();  }  [CE]  cannot  find  symbol  INT_QUOTES  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTES)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTES)  {  return  _finishString();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishQuoted();    }    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	55	None	replace
362	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  incompatible  types  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	70	None	replace
363	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  return  _finishString();  }  [CE]  cannot  find  symbol  INT_MINOR_VALUE_LEADING_ZEROS  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  return  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  cannot  find  symbol  INT_MINOR_VALUE_LEADING_ZEROS	65	None	replace
364	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
365	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
366	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
367	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
368	[BUG]  [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_currToken!=  null)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishHashComment(MINOR_VALUE_LEADING_WS);    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
369	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
370	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
371	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
372	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
373	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateString();  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
374	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
375	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _updateString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
376	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_NAMES)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_NAMES)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_NAMES)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
377	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
378	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(_finishString()  >  0)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(_finishString()  >  0)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  if(_finishString()  >  0)  {  return  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
379	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  return  _finishString();  }  [CE]  cannot  find  symbol  INT_QUOTES  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  return  _finishString();  }	  _finishString();    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    else    if(ch    ==    INT_QUOTE)    {    return    _startSlashComment(INT_QUOTE);    }    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	64	None	replace
380	[BUG]  [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_NULL);  [CE]  cannot  find  symbol  jsonToken  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_NULL);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_NULL);	  _updateTokenLocation(ch,    JsonToken.VALUE_NULL);    	non-compiled	[CE]  cannot  find  symbol  jsonToken	3	None	replace
381	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
382	[BUG]  [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
383	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	          if(ch    <    INT_QUOTE)    {    if(ch    >=    INT_QUOTE)    {    return    _startString();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
384	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateString();  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateString();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
385	[BUG]  [BUGGY]  ch  =  _textBuffer.finishCurrentSegment();  [CE]  incompatible  types  [FE]    com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _textBuffer.finishCurrentSegment();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _textBuffer.finishCurrentSegment();	          ch    =    _skipWS(ch);    	non-compiled	[CE]  incompatible  types	53	None	replace
386	[BUG]  [BUGGY]  ch  =  _textBuffer.finishString();  [CE]  cannot  find  symbol  [FE]      com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  ch  =  _textBuffer.finishString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	ch  =  _textBuffer.finishString();	          ch    =    _skipWS(ch);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
387	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_KEY)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_KEY)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_KEY)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _finishString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
388	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL	  	non-compiled	[CE]  ';'  expected	32	None	add
389	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    >=    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenL	  	non-compiled	[CE]  ';'  expected	32	None	add
390	[BUG]  [BUGGY]  if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  minorState)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
391	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE    ||    ch    >    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
392	[BUG]  [BUGGY]  if(_updateStringLocation())  {  _updateFieldLocation();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_updateStringLocation())  {  _updateFieldLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation())  {  _updateFieldLocation();  }	  if(_updateStringLocation())    {    _updateStringLocation();    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
393	[BUG]  [BUGGY]  if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  >=  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	60	None	replace
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _startString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _startString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
395	[BUG]  [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _startString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }  _startString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();        if(ch    ==    INT_QUOTE)    {    return    _startString();    }    _startString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	8	1	add
396	[BUG]  [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
397	[BUG]  [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  ';')  {  if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
398	[BUG]  [BUGGY]  if(_finishString())  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_finishString())  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_finishString())  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	          if(ch    ==    INT_QUOTE)    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
399	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  _finishString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  0x7F)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0x7F)  {  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
400	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _startString();  }  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _startString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _startString();  }	  	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA	61	None	add
401	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _finishString();  }  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    if(ch  <  0)  {  _updateTokenLocation();  System.arraycopy(MINOR_VALUE_LEADING_COMMA,  0,  _minorState);  return  _finishString();  }	  	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_COMMA	61	None	add
402	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _updateString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
403	[BUG]  [BUGGY]  if(ch  <  INT_QUOTES)  {  return  _updateTokenLocation();  }  [CE]  cannot  find  symbol  INT_QUOTES  [FE]          AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTES)  {  return  _updateTokenLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTES)  {  return  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch    <    INT_QUOTE)    {    return    _updateTokenLocation();    }    	non-compiled	[CE]  cannot  find  symbol  INT_QUOTES	56	None	replace
404	[BUG]  [BUGGY]  if(_updateStringLocation()  ==  null)  {  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_updateStringLocation()  ==  null)  {  _updateStringLocation();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation()  ==  null)  {  _updateStringLocation();  }	  if(_updateStringLocation()!=    null)    {    _updateStringLocation();    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
405	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _finishString();    }    if(ch  <  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	15	None	add
406	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
407	[BUG]  [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_minorState  ==  INT_MINOR_VALUE_LEADING_ZEROS)  {  if(ch  <  =  0)  {  return  _finishHashComment(MINOR_VALUE_LEADING_ZEROS);  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(ch    <    INT_QUOTE)    {    return    _startString();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
408	[BUG]  [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  jsonToken  [FE]                AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_STRING);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(jsonToken,  ch,  JsonToken.VALUE_STRING);	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  jsonToken	2	None	replace
409	[BUG]  [BUGGY]  _updateTokenLocation(jp,  ch,  JsonToken.VALUE_STRING);  [CE]  cannot  find  symbol  jp  [FE]                  AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  _updateTokenLocation(jp,  ch,  JsonToken.VALUE_STRING);  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(jp,  ch,  JsonToken.VALUE_STRING);	  _updateTokenLocation(ch,    JsonToken.VALUE_STRING);    	non-compiled	[CE]  cannot  find  symbol  jp	2	None	replace
410	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    ==    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
411	[BUG]  [BUGGY]  if(ch  <  minorState)  {  _finishString();  }  [CE]  cannot  find  symbol  minorState  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  minorState)  {  _finishString();  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  minorState)  {  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _finishString();    }    	non-compiled	[CE]  cannot  find  symbol  minorState	16	None	replace
412	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT	  	non-compiled	[CE]  ')'  expected	30	None	add
413	[BUG]  [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLo  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLo  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch        <        INT_QUOTE)        {        _updateTokenLocation();        }        if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLo	  	non-compiled	[CE]  ';'  expected	30	None	add
414	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    0)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  >=  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	40	None	add
415	[BUG]  [BUGGY]  return  _updateString();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }      [BUGGY]  return  _updateString();  [BUGGY]      if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	return  _updateString();	  return    _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
