bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
2	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
3	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]      AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }	_updateTokenLocation();  	non-compiled	[CE]  incompatible  types	73	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	_updateTokenLocation();  	compilable	  [FE]  IllegalArgumentException  	73	1	replace
5	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	_updateTokenLocation();  	compilable	  [FE]  IllegalArgumentException  	73	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]    [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	  	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
7	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]    [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	  	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
8	[BUG]  [BUGGY]  _updateStringLocation();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  _updateStringLocation();  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation();	_updateTokenLocation();  	non-compiled	[CE]  cannot  find  symbol	73	None	replace
9	[BUG]  [BUGGY]  _updateTokenLocation(ch);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  _updateTokenLocation(ch);  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch);	_updateTokenLocation();  	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	73	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  _finishString();  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
11	[BUG]  [BUGGY]  _finishString();  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  _finishString();  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();	_updateTokenLocation();  	compilable	  [FE]  AssertionFailedError  	73	1	replace
12	[BUG]  [BUGGY]  _updateStartString();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }  [BUGGY]  _updateStartString();  [BUGGY]  if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString();	_updateTokenLocation();  	non-compiled	[CE]  cannot  find  symbol	73	None	replace
