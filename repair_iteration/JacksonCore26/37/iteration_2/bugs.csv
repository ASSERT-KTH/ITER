bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _minorState);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateTokenLocation(ch,  _minorState);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _minorState);	  _updateTokenLocation(ch);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	9	None	replace
2	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_STRING);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_STRING);	  _updateTokenLocation(ch);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	9	None	replace
3	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NULL);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_NULL);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_NULL);	  _updateTokenLocation(ch);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  _updateTokenLocation(ch,  _finishString());  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateTokenLocation(ch,  _finishString());  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  _finishString());	  _updateTokenLocation(ch);    	non-compiled	[CE]  'void'  type  not  allowed  here	9	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  _finishString();  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();    _finishString();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
6	[BUG]  [BUGGY]  _finishString();  _finishString();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  _finishString();  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    _finishString();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
7	[BUG]  [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	10	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
9	[BUG]  [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
10	[BUG]  [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  ||  ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	||  ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
12	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _finishString();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
14	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _finishString();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE)  {  _finishString();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
16	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  _finishString();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
17	[BUG]  [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);  [CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishSlashComment(MINOR_VALUE_LEADING_ZEROS);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishSlashComment(MINOR_VALUE_LEADING_ZEROS);	  _finishString();    	non-compiled	[CE]  cannot  find  symbol  MINOR_VALUE_LEADING_ZEROS	11	None	replace
18	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
19	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
20	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
21	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	4	1	add
22	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]        IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	4	None	add
23	[BUG]  [BUGGY]  _updateStringLocation(ch);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateStringLocation(ch);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch);	  _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  if(_updateStringLocation())  {  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(_updateStringLocation())  {  _updateStringLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation())  {  _updateStringLocation();  }	  _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
25	[BUG]  [BUGGY]  if(_updateStringLocation()!=  null)  {  _updateStringLocation();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(_updateStringLocation()!=  null)  {  _updateStringLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(_updateStringLocation()!=  null)  {  _updateStringLocation();  }	  _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
31	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
33	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  >=  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
34	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  If(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  If(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    If(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	non-compiled	[CE]  ';'  expected	1	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
36	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    while(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
37	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
39	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE  ||  ch  >  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
40	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
41	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
42	[BUG]  [BUGGY]  _updateStartValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateStartValue();  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartValue();	  _updateStartString();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
43	[BUG]  [BUGGY]  _updateEndString();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateEndString();  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateEndString();	  _updateStartString();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
44	[BUG]  [BUGGY]  _updateStartString(ch);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateStartString(ch);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStartString(ch);	  _updateStartString();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
45	[BUG]  [BUGGY]      if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        if(ch  <  INT_QUOTE)  {  if(ch  >=  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
46	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	3	None	replace
47	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  return  _finishString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	4	None	add
48	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	4	None	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	        if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
50	[BUG]  [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
51	[BUG]  [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        if(ch  ==  INT_QUOTE)  {  return  _finishString();  }	  	non-compiled	[CE]  incompatible  types	6	None	add
52	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      ch  =  _skipWS(ch);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	        ch  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	6	1	add
53	[BUG]  [BUGGY]      ch  =  _skipWS(ch);  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      ch  =  _skipWS(ch);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        ch  =  _skipWS(ch);	  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Illegal  character  ('['  (code  91)):  only  regular  white  space  (\r  	6	1	add
54	[BUG]  [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishQuote();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishQuote();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        if(ch  ==  INT_QUOTE)  {  return  _finishQuote();  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
55	[BUG]  [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]      if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	        if(ch  ==  INT_QUOTE)  {  return  _finishQuoted();  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
56	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }	  	non-compiled	[CE]  incompatible  types	1	None	add
57	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _finishNegativeNumber();  }	  _finishString();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
59	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _finishString();  }  else  {  return  _startNegativeNumber();  }	  _finishString();    	compilable	  [FE]  AssertionFailedError  	11	1	replace
60	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  return  _finishString();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    return    _finishString();    }    	non-compiled	[CE]  incompatible  types	3	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  <  0)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
62	[BUG]  [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  0)  {  _updateTokenLocation();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  0)  {  _updateTokenLocation();  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    	compilable	  [FE]  AssertionFailedError  	2	1	replace
63	[BUG]  [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  }	  	non-compiled	[CE]  incompatible  types	10	None	add
64	[BUG]  [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startSlashComment(INT_QUOTE);  }	  	non-compiled	[CE]  incompatible  types	10	None	add
65	[BUG]  [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _finishString();  if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_finishString();    if(ch  ==  INT_QUOTE)  {  return  _finishString();  }  else  if(ch  ==  INT_QUOTE)  {  return  _startString();  }	  	non-compiled	[CE]  incompatible  types	10	None	add
66	[BUG]  [BUGGY]  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  =  0)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  return  _updateStringLocation();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  return  _updateStringLocation();  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	return  _updateStringLocation();	  _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
69	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  ==  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
70	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch  <  INT_QUOTE)  {  return  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incompatible  types	5	None	replace
71	[BUG]  [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateTokenLocation(ch,  JsonToken.VALUE_EMBEDDED_OBJECT);	  _updateTokenLocation(ch);    	non-compiled	[CE]  method  _updateTokenLocation  in  class  NonBlockingJsonParserBase  cannot  be  applied  to  given  types;	9	None	replace
72	[BUG]  [BUGGY]  _updateStringLocation(ch,  _minorState);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  _updateStringLocation(ch,  _minorState);  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	_updateStringLocation(ch,  _minorState);	  _updateStringLocation();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
73	[BUG]  [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    {  if  (ch  <=  0x0020)  {  ch  =  _skipWS(ch);  if  (ch  <=  0)  {  _minorState  =  MINOR_VALUE_LEADING_WS;  return  _currToken;  }  }    [BUGGY]  if(ch  <  INT_QUOTE)  {  _updateTokenLocation();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (ch  ==  INT_QUOTE)  {  return  _startString();  }  switch  (ch)  {  case  '#':  return  _finishHashComment(MINOR_VALUE_LEADING_WS);  case  '-':  return  _startNegativeNumber();  case  '/':  //  c/c++  comments  return  _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS]  NonBlockingJsonParser  [METHOD]  _startValue  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  bytesHandled  c  ch  end  len  parserFeatures  ptr  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	if(ch    <    INT_QUOTE)    {    _updateTokenLocation();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(ch  <  INT_QUOTE)  {  return  _startString();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	4	None	add
