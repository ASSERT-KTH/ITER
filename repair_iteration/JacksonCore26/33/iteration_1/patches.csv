bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
2	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
3	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	11	None	replace
4	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	11	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
6	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
8	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
9	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	7	None	replace
10	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
14	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_SPACE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	3	None	replace
15	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
17	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
18	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTE))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTE))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	3	None	replace
19	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
20	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
22	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
23	[BUG]  [BUGGY]  ch  &=  0xFF;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  ch  &=  0xFF;  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  0xFF;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  ch  &=  ch.charAt(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  ch  &=  ch.charAt(0);  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  ch.charAt(0);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  _finishBOM(1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  _finishBOM(1);  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_finishBOM(1);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_BOOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	8	None	replace
27	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
28	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
29	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
30	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState  >=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState  >=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)&&(_minorState  >=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
31	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	5	None	replace
32	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	5	None	replace
33	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	5	None	replace
34	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	9	None	replace
35	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	2	None	replace
36	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	2	None	replace
37	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	2	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
39	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
41	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
42	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	5	None	replace
43	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_BUFFER))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  INT_BUFFER))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	8	None	replace
44	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	8	None	replace
45	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch!=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
46	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_BOOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	2	None	replace
47	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	3	None	replace
48	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	3	None	replace
49	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	3	None	replace
50	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	9	None	replace
51	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
52	[BUG]  [BUGGY]  _finishBOM(2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  _finishBOM(2);  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_finishBOM(2);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  if(ch  <  =  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_BOOLEAN))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	11	None	replace
57	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_RBOM))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_RBOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  INT_RBOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	7	None	replace
58	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	3	None	replace
59	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  {  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  ')'  expected	10	None	add
60	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]          AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	8	None	replace
61	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]            AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOOLEAN))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_BOOLEAN))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	9	None	replace
62	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  if(ch  <  =  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if(ch  <  =  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_MINOR_BOM))  {  [CE]  cannot  find  symbol  INT_MINOR_BOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_MINOR_BOM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_MINOR_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_MINOR_BOM	11	None	replace
66	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  ')'  expected	4	None	add
67	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]    AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	5	None	replace
68	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	5	None	replace
69	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError    [CONTEXT]    {  ch  &=  0xFF;      [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECSMALL))  {  [BUGGY]    return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOM)||(ch  ==  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	5	None	replace
