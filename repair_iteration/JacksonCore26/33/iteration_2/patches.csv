bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {  [CE]  cannot  find  symbol  INVALID_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INVALID_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INVALID_BOM	27	None	replace
2	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
3	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState  >>  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState  >>  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)||(_minorState  >>  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
4	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  >=  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
5	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState  >=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState  >=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)||(_minorState  >=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
6	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	2	None	replace
7	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	2	None	replace
8	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(ch  ==  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(ch  ==  INT_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(ch  ==  INT_BOOM))  {	  if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	2	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
10	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
12	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
14	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
15	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_inputPtr!=  INT_UNQUOTED_NAMES))  {  [CE]  cannot  find  symbol  INT_UNQUOTED_NAMES  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_inputPtr!=  INT_UNQUOTED_NAMES))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_inputPtr!=  INT_UNQUOTED_NAMES))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_UNQUOTED_NAMES	65	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
18	[BUG]  [BUGGY]  if(ch  <  =  INT_RC)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  <  =  INT_RC)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RC)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
20	[BUG]  [BUGGY]  if((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_QUOTE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)||(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
22	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)||(_minorState!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
23	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_OBJECT))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_OBJECT))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_OBJECT))  {	  if((    ch    ==    0xEF)||(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	36	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOM))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
25	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_QUOTE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOM))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
26	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	4	None	replace
27	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
28	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEF)||(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
29	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
30	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  >=  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
32	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
34	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
36	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
38	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	34	1	replace
39	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	34	None	replace
40	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [CE]  cannot  find  symbol  INT_RC  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	10	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
42	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
43	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_ECSMALL  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECSMALL))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECSMALL	69	None	replace
44	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_ECSMALL  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECSMALL))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECSMALL	69	None	replace
45	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SCRIPT)||(ch  ==  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_SCRIPT  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SCRIPT)||(ch  ==  INT_ECSMALL))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SCRIPT)||(ch  ==  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_SCRIPT	69	None	replace
46	[BUG]  [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_OBJECT)&&(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	47	None	replace
47	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	47	None	replace
48	[BUG]  [BUGGY]  _finishBOM(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _finishBOM(0);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_finishBOM(0);	  _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
49	[BUG]  [BUGGY]  _finishBOM(3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _finishBOM(3);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_finishBOM(3);	  _finishBOM(2);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
50	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
51	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    if((  ch  ==  0xFF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
52	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  >=  0xEF)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  >=  0xEF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    if((  ch  >=  0xEF)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
53	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xEC)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xEC)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    if((  ch  ==  0xEC)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
54	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xE)&&(_minorState!=  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_SPACE))  {  if((  ch  ==  0xE)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    if((  ch  ==  0xE)&&(_minorState!=  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
55	[BUG]  [BUGGY]  _currInputPtr  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _currInputPtr  =  _inputPtr;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_currInputPtr  =  _inputPtr;	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputPtr    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
56	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  0;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  0;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputPtr    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
57	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BUFFER))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	60	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_RBRACKET)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_RBRACKET)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
59	[BUG]  [BUGGY]  if((  ch  ==  INT_RBRACKET)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_RBRACKET)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_RBRACKET)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_CR)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_CR)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
61	[BUG]  [BUGGY]  if((  ch  ==  INT_CR)&&(ch!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_CR)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_CR)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
62	[BUG]  [BUGGY]  if((  ch  ==  INT_FLOAT)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_FLOAT  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_FLOAT)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_FLOAT)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FLOAT	14	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState!=  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_RBOM))    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
64	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_RBOM))    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
65	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_BUFFER))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BUFFER))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	43	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_SPACE)&&(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
67	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
68	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	15	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_SPACE)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
70	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)||(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
71	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_ROOT_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(ch!=  INT_ROOT_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ROOT_BOM	17	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch  ==  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
73	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_QUOTE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
75	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
76	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_OBJECT))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_OBJECT))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_OBJECT))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	26	None	replace
77	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	26	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
79	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
80	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	39	None	replace
81	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BUFFER)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	49	None	replace
82	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	31	None	replace
83	[BUG]  [BUGGY]  ch  &=  _charAt(0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  _charAt(0);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  _charAt(0);	  ch    &=    ch.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
84	[BUG]  [BUGGY]  ch  &=  _inputPtr.charAt(0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  _inputPtr.charAt(0);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  _inputPtr.charAt(0);	  ch    &=    ch.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
85	[BUG]  [BUGGY]  ch  &=  _currInputPtr.charAt(0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  _currInputPtr.charAt(0);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  _currInputPtr.charAt(0);	  ch    &=    ch.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
86	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECM))  {  [CE]  cannot  find  symbol  INT_ECM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_SPACE)||(ch  ==  INT_ECM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECM	68	None	replace
87	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECM))  {  [CE]  cannot  find  symbol  INT_ECM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_QUOTE)||(ch  ==  INT_ECM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECM	68	None	replace
88	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_ECM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECM	68	None	replace
89	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_RBOM))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_RBOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_RBOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEF)||(_minorState    >>    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	21	None	replace
90	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(ch!=  INT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	20	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
92	[BUG]  [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
93	[BUG]  [BUGGY]  if((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >>  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	28	None	replace
94	[BUG]  [BUGGY]  if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	28	None	replace
95	[BUG]  [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xFF)&&(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	28	None	replace
96	[BUG]  [BUGGY]  _currInputRow  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _currInputRow  =  _inputEnd;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_currInputRow  =  _inputEnd;	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
97	[BUG]  [BUGGY]  _inputPtr  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _inputPtr  =  _inputEnd;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_inputPtr  =  _inputEnd;	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
98	[BUG]  [BUGGY]  _currInputRowStart  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _currInputRowStart  =  _inputEnd;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_currInputRowStart  =  _inputEnd;	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
99	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
100	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState  >>  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  INT_SPACE)&&(_minorState  >>  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
101	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState  >=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  INT_SPACE)&&(_minorState  >=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  INT_SPACE)&&(_minorState  >=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
102	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)||(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
104	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
105	[BUG]  [BUGGY]  if((  ch  ==  INT_FF)&&(_minorState!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_FF  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_FF)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_FF)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	6	None	replace
106	[BUG]  [BUGGY]  if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xECS)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xECS)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  ')'  expected	66	None	replace
107	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  INT_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)||(ch!=  INT_ROOT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	58	None	replace
108	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
110	[BUG]  [BUGGY]  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
111	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_EC))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_EC))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_EC))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
112	[BUG]  [BUGGY]  if((  ch  ==  0xEC)||(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)||(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)||(ch!=  INT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	22	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
114	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
115	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_SPACE)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	32	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_QUOTE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)||(ch  ==  INT_QUOTE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
117	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_QUOTE)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_QUOTE)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_QUOTE)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	32	1	replace
118	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	32	None	replace
119	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BUFFER)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	33	None	replace
120	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(_inputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
122	[BUG]  [BUGGY]  if((  ch  ==  0xF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_SPACE)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
124	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_QUOTE))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
125	[BUG]  [BUGGY]  if((  ch  ==  INT_QUOTE)&&(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_QUOTE)&&(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_QUOTE)&&(ch!=  INT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	18	None	replace
126	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(ch!=  INT_BOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	18	None	replace
127	[BUG]  [BUGGY]  _currInputRowEnd  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _currInputRowEnd  =  _inputPtr;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_currInputRowEnd  =  _inputPtr;	  if(ch    <    =    INT_PLUS)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
128	[BUG]  [BUGGY]  _currInputRowStart  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _currInputRowStart  =  _inputPtr;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_currInputRowStart  =  _inputPtr;	  if(ch    <    =    INT_PLUS)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  >=  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  >=  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState    >>    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
130	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  >=  INT_CR))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  >=  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  >=  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState    >>    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
132	[BUG]  [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
133	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  MINOR_BOOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOOM	48	None	replace
134	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	48	None	replace
135	[BUG]  [BUGGY]  if((  ch  ==  INT_QUOTE)&&(ch!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  MINOR_BOOM  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_QUOTE)&&(ch!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_QUOTE)&&(ch!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOOM	48	None	replace
136	[BUG]  [BUGGY]  if((  ch  >>  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >>  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >>  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	45	None	replace
137	[BUG]  [BUGGY]  if((  ch  >>  0xFF)&&(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >>  0xFF)&&(_minorState!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >>  0xFF)&&(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	45	None	replace
138	[BUG]  [BUGGY]  ch  &=  0xF;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  0xF;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  0xF;	  ch    &=    0xFF;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
139	[BUG]  [BUGGY]  ch  -=  0xFF;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  -=  0xFF;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  -=  0xFF;	  ch    &=    0xFF;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
140	[BUG]  [BUGGY]  ch  &=  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  1;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  1;	  ch    &=    0xFF;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
141	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
142	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xFF)&&(_minorState  >>  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
143	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(ch!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)||(ch!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
145	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(ch!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(ch!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(ch!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
146	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	41	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
148	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
149	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  0;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  0;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
150	[BUG]  [BUGGY]  _finishBOM(ch);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  _finishBOM(ch);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	_finishBOM(ch);	  _finishBOM(1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
151	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
152	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    if((  ch  ==  0xFF)&&(ch  ==  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
153	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xE)&&(ch  ==  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xE)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    if((  ch  ==  0xE)&&(ch  ==  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
154	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xEC)&&(ch  ==  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_SPACE))  {  if((  ch  ==  0xEC)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    if((  ch  ==  0xEC)&&(ch  ==  INT_SPACE))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
156	[BUG]  [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
158	[BUG]  [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
159	[BUG]  [BUGGY]  if((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >>  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
160	[BUG]  [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [CE]  cannot  find  symbol  INT_RC  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	13	None	replace
161	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	39	None	replace
162	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_RC))  {  [CE]  cannot  find  symbol  INT_RC  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_RC))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)&&(ch  ==  INT_RC))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	39	None	replace
163	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
164	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [CE]  cannot  find  symbol  INT_RC  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_RC))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RC	11	None	replace
165	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BUFFER))  {	  if((    ch    ==    0xEF)||(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	46	None	replace
166	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
167	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
168	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	31	None	replace
169	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
170	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
171	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
172	[BUG]  [BUGGY]  if((  ch!=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  INT_BOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	45	None	replace
173	[BUG]  [BUGGY]  if((  ch!=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	45	None	replace
174	[BUG]  [BUGGY]  if((  ch!=  0xFF)&&(_minorState!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  0xFF)&&(_minorState!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  0xFF)&&(_minorState!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	45	None	replace
175	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_OBJECT)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	67	None	replace
176	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_RBOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	67	None	replace
177	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_currInputRow!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_currInputRow!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_currInputRow!=  INT_BOM))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_RBOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	57	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
179	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
180	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOM)&&(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  ==  INT_BOM)&&(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  ==  INT_BOM)&&(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	32	None	replace
181	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_RBOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_RBOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_RBOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	32	None	replace
182	[BUG]  [BUGGY]  if(_currInputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(_currInputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(_currInputPtr  >=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
183	[BUG]  [BUGGY]  if(_currInputRow!=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(_currInputRow!=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(_currInputRow!=  _inputEnd)  {  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
184	[BUG]  [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_COUNT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_COUNT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_COUNT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_COUNT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_COUNT_BOM	51	None	replace
185	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	48	None	replace
186	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(_minorState!=  MINOR_BOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	48	None	replace
187	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  INT_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(_minorState!=  INT_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	48	None	replace
188	[BUG]  [BUGGY]  if((  ch  >=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  INT_BOOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	28	None	replace
189	[BUG]  [BUGGY]  if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  INT_BOM)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	28	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
191	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_currInputRow!=  _inputEnd))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
192	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  INT_UNQUOTED_NAMES))  {  [CE]  cannot  find  symbol  INT_UNQUOTED_NAMES  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  INT_UNQUOTED_NAMES))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_currInputRow!=  INT_UNQUOTED_NAMES))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_UNQUOTED_NAMES	65	None	replace
193	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_currInputRow!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_currInputRow!=  INT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_MINOR_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	65	None	replace
194	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOOLEAN))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOOLEAN))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	61	None	replace
195	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch  <  =  INT_SPACE))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch  <  =  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch  <  =  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
196	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_FF))  {  [CE]  cannot  find  symbol  INT_FF  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_FF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_FF))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	8	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
198	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
199	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	41	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
201	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM  ||  ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	41	1	replace
202	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_QUOTE))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	18	None	replace
203	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_QUOTE))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	18	None	replace
204	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  INT_QUOTE))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)||(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)||(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	18	None	replace
205	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((  ch  ==  0xFF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
206	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputPtr    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
207	[BUG]  [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  >=  INT_RBRACKET)  {  ++currInputRowStart;  _currInputPtr  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputPtr    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
208	[BUG]  [BUGGY]  ch  &=  0xFF  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  0xFF  +  1;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  0xFF  +  1;	  ch    &=    0xFF;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
209	[BUG]  [BUGGY]  ch  &=  0xFFL;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  0xFFL;  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  0xFFL;	  ch    &=    0xFF;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_OBJECT))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  INT_OBJECT))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_minorState!=  INT_OBJECT))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEF)||(_minorState    >>    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	21	None	replace
211	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_LCURLY))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_LCURLY))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_LCURLY))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	14	None	replace
212	[BUG]  [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_OBJECT)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	14	None	replace
213	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_PLUS)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_PLUS)  {  ++currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
214	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_RCURLY))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_RCURLY))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_RCURLY))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	58	None	replace
215	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(_minorState!=  INT_BOOM))  {	  if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	2	None	replace
216	[BUG]  [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_MINOR_BOM))  {  [CE]  cannot  find  symbol  INT_MINOR_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)||(_minorState!=  INT_MINOR_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)||(_minorState!=  INT_MINOR_BOM))  {	  if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_MINOR_BOM	2	None	replace
217	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOM	10	None	replace
218	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BUFFER)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	49	None	replace
219	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_ROOT_BOM))  {  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
220	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_currInputRow!=  0))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_currInputRow!=  0))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(_currInputRow!=  0))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
221	[BUG]  [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_BOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xFF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOM	13	None	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if(_currInputRow  ==  _inputEnd)  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
223	[BUG]  [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(_currInputRow  ==  _inputEnd)  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(_currInputRow  ==  _inputEnd)  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
224	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
225	[BUG]  [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
226	[BUG]  [BUGGY]  if(ch!=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch!=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch!=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  else  {  _finishBOM(1);  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    else    {    _finishBOM(1);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
228	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_RBRACKET)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BUFFER)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
229	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_OBJECT))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_OBJECT))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_OBJECT))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	56	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOLEAN))    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
231	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_PLUS))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOLEAN))    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
232	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_ECSMALL  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECSMALL	69	None	replace
233	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECSMALL))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECSMALL))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECSMALL))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	69	None	replace
234	[BUG]  [BUGGY]  ch  &=  _charAt(ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  _charAt(ch);  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  _charAt(ch);	  ch    &=    ch.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
235	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_RBOM))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_RBOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_RBOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	4	None	replace
236	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  INT_BUFFER))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	4	None	replace
237	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
238	[BUG]  [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  >=  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
239	[BUG]  [BUGGY]  if((  ch  ==  INT_OBJECT)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_OBJECT)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_OBJECT)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	17	None	replace
240	[BUG]  [BUGGY]  if((  ch  ==  INT_POLICY)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_POLICY  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_POLICY)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_POLICY)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_POLICY	17	None	replace
241	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM))  {  [CE]  cannot  find  symbol  INT_ECM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_ECM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECM	68	None	replace
242	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_ECM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	68	None	replace
243	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((  ch  ==  0xEC)||(_minorState!=  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
244	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_PLUS)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_PLUS)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
245	[BUG]  [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  <  =  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_RBRACKET)  {  ++currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
246	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_UNQUOTED_NAMES))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_UNQUOTED_NAMES))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_UNQUOTED_NAMES))  {	  if((    ch    ==    INT_BOM)&&(ch!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	15	None	replace
247	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_RBOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_RBOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_RBOM))  {	  if((    ch    ==    INT_BOM)&&(ch!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	15	None	replace
248	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch!=  INT_BOM))  {	  if((    ch    ==    INT_BOOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	47	None	replace
249	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(ch!=  INT_BUFFER))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	58	None	replace
250	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTES))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTES))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(ch!=  INT_QUOTES))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	58	None	replace
251	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    INT_BOM)&&(_minorState!=    MINOR_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	48	None	replace
252	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_ECM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_ECM)||(ch  ==  INT_BUFFER))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECM	68	None	replace
253	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECM))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BUFFER)||(ch  ==  INT_ECM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	68	None	replace
254	[BUG]  [BUGGY]  if((  ch!=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_FF  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	45	None	replace
255	[BUG]  [BUGGY]  if((  ch!=  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	45	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
257	[BUG]  [BUGGY]  if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch!=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch!=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
258	[BUG]  [BUGGY]  if((  ch  ==  INT_PLAIN)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_PLAIN  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_PLAIN)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_PLAIN)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    {    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_PLAIN	59	None	replace
259	[BUG]  [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  INT_MINOR_BOM))  {  [CE]  cannot  find  symbol  INT_MINOR_BOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_SPACE)&&(_minorState!=  INT_MINOR_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_SPACE)&&(_minorState!=  INT_MINOR_BOM))  {	  if((    ch    ==    INT_SPACE)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_MINOR_BOM	17	None	replace
260	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	14	None	replace
261	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_SPACE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	14	None	replace
262	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_QUOTE))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_QUOTE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOLEAN)&&(ch!=  INT_QUOTE))  {	  if((    ch    ==    INT_BOM)&&(ch!=    INT_QUOTE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	18	None	replace
263	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch!=  INT_BUFFER))  {	  if((    ch    ==    INT_BOOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	47	None	replace
264	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch!=  INT_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch!=  INT_ROOT_BOM))  {	  if((    ch    ==    INT_BOOM)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	47	None	replace
265	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_ECSMALL  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_ECSMALL)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_BOM)||(ch    ==    INT_ECSMALL))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ECSMALL	69	None	replace
266	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_UNQUOTED_NAMES  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_UNQUOTED_NAMES	32	None	replace
267	[BUG]  [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  >=  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
268	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOOLEAN))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOOLEAN))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_BOOLEAN))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOOLEAN))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	56	None	replace
269	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BUFFER))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BUFFER))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_BUFFER))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	3	None	replace
270	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_BOOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    INT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	3	None	replace
271	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_UNQUOTED_NAMES  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_UNQUOTED_NAMES)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_UNQUOTED_NAMES	42	None	replace
272	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	42	None	replace
273	[BUG]  [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEC)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_INT_BOM	51	None	replace
274	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOOM))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BOOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	46	None	replace
275	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_ROOT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_ROOT_BOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(ch!=  INT_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(ch!=  INT_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_ROOT_BOM	41	None	replace
276	[BUG]  [BUGGY]  ch  &=  _textBuffer.finishCurrentSegment();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  ch  &=  _textBuffer.finishCurrentSegment();  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	ch  &=  _textBuffer.finishCurrentSegment();	  ch    &=    ch.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
277	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_PLUS)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
278	[BUG]  [BUGGY]  if(ch  <  =  INT_LCURLY)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  <  =  INT_LCURLY)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  <  =  INT_LCURLY)  {  ++_currInputRowStart;  _currInputRowEnd  =  _inputPtr;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRowStart;    _currInputRowEnd    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
279	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)||(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)||(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)||(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	20	None	replace
280	[BUG]  [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_BUFFER  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BUFFER)&&(ch!=  INT_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BUFFER)&&(ch!=  INT_ROOT_BOM))  {	  if((    ch    ==    INT_BUFFER)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BUFFER	49	None	replace
281	[BUG]  [BUGGY]  if((  ch  ==  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_RBOM  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_RBOM)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    INT_BUFFER)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_RBOM	49	None	replace
282	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)&&(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)&&(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	26	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
284	[BUG]  [BUGGY]  if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  INT_SPACE)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	28	1	replace
285	[BUG]  [BUGGY]  if((  ch  >=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_FF  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    >=    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	28	None	replace
286	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_PLUS)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_PLUS)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
287	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++_currInputRowStart;  _currInputPtr  =  _inputPtr;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRowStart;    _currInputPtr    =    _inputPtr;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
289	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)&&(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
290	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch  ==  INT_BOM)||(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	39	None	replace
291	[BUG]  [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)||(ch!=  INT_BOM)||(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	39	None	replace
292	[BUG]  [BUGGY]  if((  ch  ==  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [CE]  cannot  find  symbol  INT_FF  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_FF)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	27	None	replace
293	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOM))  {  [CE]  cannot  find  symbol  MINOR_BOOM  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_BOOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOOM	27	None	replace
294	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_INT_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xECS)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_INT_BOM	66	None	replace
295	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOM)||(ch  ==  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOOM  [FE]            AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOM)||(ch  ==  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOM)||(ch  ==  INT_EF))  {	  if((    ch    ==    0xEF)||(ch    ==    INT_BOOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOM	37	None	replace
296	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(ch!=  INT_BOOLEAN)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(ch!=    INT_RBOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	67	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_PLUS)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  INT_PLUS)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)&&(_minorState    >=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
298	[BUG]  [BUGGY]  if((  ch  ==  INT_PLUS)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_PLUS)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_PLUS)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xFF)&&(_minorState    >=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	30	1	replace
299	[BUG]  [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_BOM  [FE]        AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEF)&&(_minorState!=  MINOR_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_BOM	10	None	replace
300	[BUG]  [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  INT_EF))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOM)&&(_minorState!=  INT_EF))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOM)&&(_minorState!=  INT_EF))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	6	None	replace
301	[BUG]  [BUGGY]  if((  ch  ==  INT_OBJECT)&&(_minorState!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_OBJECT)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_OBJECT)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	6	None	replace
302	[BUG]  [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_BOOLEAN  [FE]        AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_BOOLEAN)&&(_minorState!=  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(_minorState!=    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOOLEAN	6	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
304	[BUG]  [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)&&(_minorState!=  MINOR_ROOT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
305	[BUG]  [BUGGY]  if((  ch  ==  0xEC)||(ch  ==  INT_BOM))  {  [CE]  cannot  find  symbol  INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xEC)||(ch  ==  INT_BOM))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xEC)||(ch  ==  INT_BOM))  {	  if((    ch    ==    0xEF)||(_minorState!=    MINOR_ROOT_BOM))    {    if((    ch    ==    0xEC)||(_minorState!=    MINOR_ROOT_BOM))    {    	non-compiled	[CE]  cannot  find  symbol  INT_BOM	22	None	replace
306	[BUG]  [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_OBJECT)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_OBJECT  [FE]          AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  0xFF)&&(_minorState!=  MINOR_OBJECT)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  0xFF)&&(_minorState!=  MINOR_OBJECT)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    ==    0xFF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_OBJECT	11	None	replace
307	[BUG]  [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch  ==  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_OBJECT  [FE]    AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_OBJECT)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_OBJECT)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_OBJECT	8	None	replace
308	[BUG]  [BUGGY]  if((  ch  ==  INT_FF)&&(ch  ==  INT_SPACE))  {  [CE]  cannot  find  symbol  INT_FF  [FE]      AssertionFailedError    [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  ==  INT_FF)&&(ch  ==  INT_SPACE))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  ==  INT_FF)&&(ch  ==  INT_SPACE))  {	  if((    ch    ==    0xEF)&&(ch    ==    INT_SPACE))    {    	non-compiled	[CE]  cannot  find  symbol  INT_FF	8	None	replace
309	[BUG]  [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if(ch  ==  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if(ch  ==  INT_RBRACKET)  {  ++_currInputRow;  _inputPtr  =  _inputEnd;  }	  if(ch    <    =    INT_RBRACKET)    {    ++_currInputRow;    _inputPtr    =    _inputEnd;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	if((  ch  >=  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
311	[BUG]  [BUGGY]  if((  ch  >=  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xEF)&&(_minorState  ==  MINOR_ROOT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
312	[BUG]  [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [CE]  cannot  find  symbol  MINOR_INT_BOM  [FE]                AssertionFailedError      [CONTEXT]      {  ch  &=  0xFF;        [BUGGY]  if((  ch  >=  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {  [BUGGY]      return  _finishBOM(1);  }  while  (ch  <=  0x020)  {  if  (ch  !=  INT_SPACE)  {  if  (ch  ==  INT_LF)  {  ++_currInputRow;  _currInputRowStart  =  _inputPtr;  }  else  if  (ch  ==  INT_CR)  {  [CLASS]  NonBlockingJsonParser  [METHOD]  _startDocument  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  c  ch  end  len  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	if((  ch  >=  0xEF)&&(_minorState!=  MINOR_INT_BOM)||(ch  ==  INT_CR))  {	  if((    ch    ==    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    if((    ch    >=    0xEF)&&(_minorState!=    MINOR_ROOT_BOM)||(ch    ==    INT_CR))    {    	non-compiled	[CE]  cannot  find  symbol  MINOR_INT_BOM	13	None	replace
