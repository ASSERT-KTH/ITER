bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	if(_inputPtr  >=  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  	27	1	replace
2	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	if(_inputPtr  >=  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  	27	1	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]    [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	  	if  (_inputPtr  <  _inputEnd)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >  start)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	if(_inputPtr  >  start)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
5	[BUG]  [BUGGY]  if(_inputPtr  >  start)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >  start)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	if(_inputPtr  >  start)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	if(_inputPtr  >  0)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
7	[BUG]  [BUGGY]  if(_inputPtr  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if(_inputPtr  >  0)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	if(_inputPtr  >  0)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
8	[BUG]  [BUGGY]  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  [FE]      AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if((  _inputPtr  +  1)  >=  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	if((  _inputPtr  +  1)  >=  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  	27	1	replace
9	[BUG]  [BUGGY]  if((  _inputPtr  +  1)  >=  _inputEnd)  {  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  [FE]      AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if((  _inputPtr  +  1)  >=  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	if((  _inputPtr  +  1)  >=  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  com.fasterxml.jackson.core.JsonParseException:  Still  have  0  undecoded  bytes  	27	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if((  _inputPtr  +  1)  <  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	if((  _inputPtr  +  1)  <  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
11	[BUG]  [BUGGY]  if((  _inputPtr  +  1)  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {    [BUGGY]  if((  _inputPtr  +  1)  <  _inputEnd)  {  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  }  if  (end  <  start)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  end,  start);  }  if  (_endOfInput)  {  _reportError( "Already  closed,  can  not  feed  more  input ");  }  [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	if((  _inputPtr  +  1)  <  _inputEnd)  {	if  (_inputPtr  <  _inputEnd)  {  	compilable	  [FE]  AssertionFailedError  	27	1	replace
