bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xffff)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xffff)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
2	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xffff)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xffff)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xFF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xFF)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
4	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xFF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xFF)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xfff)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xfff)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
6	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch  &  0xfff)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xfff)  {	  switch(ch)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
7	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	      	non-compiled	[CE]  orphaned  case	6	None	replace
8	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
9	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.cloneTree();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
10	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  _binaryValue  =  _binaryValue.clone();  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.clone();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
11	[BUG]  [BUGGY]  switch(_nextToken())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_nextToken())  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_nextToken())  {	  switch(nextToken())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
12	[BUG]  [BUGGY]  switch(_finishToken())  {  [CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_finishToken())  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_finishToken())  {	  switch(nextToken())    {    	non-compiled	[CE]  an  enum  switch  case  label  must  be  the  unqualified  name  of  an  enumeration  constant	8	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  0xFF)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  ==  0xFF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  0xFF)  {	  if(ch    <    =    0xFF)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  if(ch  >=  0xFF)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  >=  0xFF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >=  0xFF)  {	  if(ch    <    =    0xFF)    {    	non-compiled	[CE]  orphaned  case	4	None	replace
15	[BUG]  [BUGGY]  if(ch  <  0x7F)  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  0x7F)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  0x7F)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  ==  0x7F)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  0x7F)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
17	[BUG]  [BUGGY]  if(ch  <  =  0x7FF)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0x7FF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7FF)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  if(ch  >=  0x7F)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  >=  0x7F)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >=  0x7F)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
20	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
21	[BUG]  [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
22	[BUG]  [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
23	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
24	[BUG]  [BUGGY]  switch(_binaryValue,  ch)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_binaryValue,  ch)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue,  ch)  {	  switch(_binaryValue)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_binaryValue.length)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(_binaryValue.length)  {	  switch(_binaryValue)    {    	compilable	  [FE]  NullPointerException  	3	1	replace
26	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_binaryValue.length)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)  {	  switch(_binaryValue)    {    	compilable	  [FE]  NullPointerException  	3	1	replace
27	[BUG]  [BUGGY]  switch(_binaryValue,  _inputPtr)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_binaryValue,  _inputPtr)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue,  _inputPtr)  {	  switch(_binaryValue)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
28	[BUG]  [BUGGY]  if(ch  <  =  0xFF  ||  ch  >  0x7F)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0xFF  ||  ch  >  0x7F)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0xFF  ||  ch  >  0x7F)  {	  if(ch    <    =    0xFF)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  return  _binaryValue(ch);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  return  _binaryValue(ch);  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch);	      	non-compiled	[CE]  orphaned  case	6	None	replace
30	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.cloneTree();	      	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  _binaryValue  =  _binaryValue.length;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.length;	      	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x7F)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x7F)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  0x7F)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  _binaryValue.length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  _binaryValue.length)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  _binaryValue.length)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
35	[BUG]  [BUGGY]  switch(ch)  {  return  _binaryValue(ch);  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  return  _binaryValue(ch);  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    return  _binaryValue(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
36	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _binaryValue.length;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _binaryValue.length;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _binaryValue.length;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
37	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    ch  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
38	[BUG]  [BUGGY]  switch(ch)  {  _binaryValue  =  _binaryValue.cloneTree();  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    _binaryValue  =  _binaryValue.cloneTree();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
39	[BUG]  [BUGGY]  if(ch  <  =  INT_BOOLEAN)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  INT_BOOLEAN)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_BOOLEAN)  {	  switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  [CE]  orphaned  case  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  ==  INT_0)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0)  {	  switch(ch)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
41	[BUG]  [BUGGY]  if(ch  >  0xFF)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  >  0xFF)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >  0xFF)  {	  if(ch    <    0xFF)    {    	non-compiled	[CE]  orphaned  case	5	None	replace
42	[BUG]  [BUGGY]  switch(ch)  {  switch(ch)  {  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  switch(ch)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    switch(ch)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
43	[BUG]  [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(ch)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
44	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  INT_0)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {	  switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  if(ch  <  =  INT_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  INT_SPACE)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_SPACE)  {	  switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeValue(ch);  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  Integer  comma  =  _binaryValue.computeValue(ch);  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeValue(ch);  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
47	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.getComment();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  Integer  comma  =  _binaryValue.getComment();  break;  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.getComment();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
48	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  256)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  256)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  256)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  5)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  5)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  5)  {	  if(ch    <    =    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  switch(_binaryValue,  _inputBufferPtr)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_binaryValue,  _inputBufferPtr)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue,  _inputBufferPtr)  {	  switch(_binaryValue)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
51	[BUG]  [BUGGY]  switch(nextToken(),  _binaryValue)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(nextToken(),  _binaryValue)  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(nextToken(),  _binaryValue)  {	  switch(nextToken())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
52	[BUG]  [BUGGY]  switch(_parserFeatures.getNumberOfNames())  {  [CE]  cannot  find  symbol  _parserFeatures  [FE]          AssertionFailedError    [CONTEXT]    return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;    [BUGGY]  switch(_parserFeatures.getNumberOfNames())  {  [BUGGY]    case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_parserFeatures.getNumberOfNames())  {	  switch(nextToken())    {    	non-compiled	[CE]  cannot  find  symbol  _parserFeatures	8	None	replace
