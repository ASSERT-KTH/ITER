bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(_nextToken(),  _binaryValue)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_nextToken(),  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_nextToken(),  _binaryValue)  {	  switch(_nextToken())    {    	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  switch(_binaryValue())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue())  {	  switch(_nextToken())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
3	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  switch(ch  &  0xffff)  {  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  switch(ch  &  0xffff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    switch(ch  &  0xffff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
4	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  if(ch  <  0xffff)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  if(ch  <  0xffff)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    if(ch  <  0xffff)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
5	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  switch(ch  &  0xfff)  {  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  switch(ch  &  0xfff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    switch(ch  &  0xfff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
6	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  if(ch  >  0xffff)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  if(ch  >  0xffff)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    if(ch  >  0xffff)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
7	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  ||(ch  &  0xffff)  {  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  ||(ch  &  0xffff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    ||(ch  &  0xffff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
8	[BUG]  [BUGGY]  switch(ch)  {  case  0:  return  _binaryValue(ch);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  0:  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  0:  return  _binaryValue(ch);	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
9	[BUG]  [BUGGY]  if(ch  <  0xFFFF)  {  switch(ch)  {  case  0xFFFF:  return  _binaryValue(ch);  }  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFFFF)  {  switch(ch)  {  case  0xFFFF:  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFFFF)  {  switch(ch)  {  case  0xFFFF:  return  _binaryValue(ch);  }	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	35	None	replace
10	[BUG]  [BUGGY]  if(ch  <  0xFF)  {  switch(ch)  {  case  0xFF:  return  _binaryValue(ch);  }  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFF)  {  switch(ch)  {  case  0xFF:  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFF)  {  switch(ch)  {  case  0xFF:  return  _binaryValue(ch);  }	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	35	None	replace
11	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  return  _binaryValue(ch);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  return  _binaryValue(ch);	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
12	[BUG]  [BUGGY]  if(ch  <  0x7FF)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7FF)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  0x7FF)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  0x7FF)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
14	[BUG]  [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  5)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  5)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7FF  ||  ch  >  5)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  switch(ch  &  0xFF)  {  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  switch(ch  &  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    switch(ch  &  0xFF)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
16	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
17	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
18	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  switch(comma  &  0xFF)  {  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  switch(comma  &  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  switch(comma  &  0xFF)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
19	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
20	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.getValue();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.getValue();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  orphaned  case	30	None	replace
21	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.clone();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.clone();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.clone();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  orphaned  case	30	None	replace
22	[BUG]  [BUGGY]  if(ch  <  =  MAJOR_INITIAL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  MAJOR_INITIAL)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  MAJOR_INITIAL)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
23	[BUG]  [BUGGY]  if(ch  <  INT_0)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  INT_0)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  INT_0)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
24	[BUG]  [BUGGY]  if(ch  >=  INT_0)  {  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  >=  INT_0)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >=  INT_0)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xfff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  -  0xfff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
26	[BUG]  [BUGGY]  switch(ch  -  0xfff)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xfff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  -  0xfff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
28	[BUG]  [BUGGY]  switch(ch  &  0xff)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
29	[BUG]  [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  comma  =  _binaryValue[_inputPtr++]  &  0xF;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	43	None	replace
30	[BUG]  [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	43	None	replace
31	[BUG]  [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	char  comma  =  _binaryValue[_inputPtr++]  &  0xF;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	43	None	replace
32	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x7F)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  0x7F)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
33	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x7FF)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  0x7FF)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
34	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  0x7F)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >=  0x7F)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
35	[BUG]  [BUGGY]  if(ch  ==  0x7F  ||  ch  >  0x7F)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  0x7F  ||  ch  >  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  0x7F  ||  ch  >  0x7F)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
36	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  5)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  5)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  5)  {	  if(ch    <    =    0x7F    ||    ch    >    5)    {    	non-compiled	[CE]  orphaned  case	49	None	replace
37	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  5)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  5)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >=  5)  {	  if(ch    <    =    0x7F    ||    ch    >    5)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
38	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  6)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  6)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  6)  {	  if(ch    <    =    0x7F    ||    ch    >    5)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
39	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	8	None	replace
40	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xF;  break;	  ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	8	None	replace
41	[BUG]  [BUGGY]  if(ch  <  0xFF  ||  ch  >  0x7F)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFF  ||  ch  >  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFF  ||  ch  >  0x7F)  {	  if(ch    <    =    0xFF    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
42	[BUG]  [BUGGY]  if(ch  <  0xFF  ||  ch  >  0x7FF)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFF  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFF  ||  ch  >  0x7FF)  {	  if(ch    <    =    0xFF    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
43	[BUG]  [BUGGY]  if(ch  <  =  0xFF  ||  ch  >  0x7FF)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0xFF  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0xFF  ||  ch  >  0x7FF)  {	  if(ch    <    =    0xFF    ||    ch    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	7	None	replace
45	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	7	None	replace
46	[BUG]  [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _inputBuffer[_inputPtr++]  &  0xf;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _inputBuffer[_inputPtr++]  &  0xf;	  ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	7	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
48	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_10)  {  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_10)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0  ||  ch  >  INT_10)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
49	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_10)  {  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_10)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  INT_0  ||  ch  >  INT_10)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
50	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_1)  {  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0  ||  ch  >  INT_1)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
51	[BUG]  [BUGGY]  if(ch  ==  INT_BOOLEAN)  {  [CE]  orphaned  case  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_BOOLEAN)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_BOOLEAN)  {	  if(ch    <    =    INT_BOOLEAN)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
52	[BUG]  [BUGGY]  if(ch  <  INT_BOOLEAN)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  INT_BOOLEAN)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  INT_BOOLEAN)  {	  if(ch    <    =    INT_BOOLEAN)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
53	[BUG]  [BUGGY]  if(ch!=  INT_BOOLEAN)  {  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch!=  INT_BOOLEAN)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch!=  INT_BOOLEAN)  {	  if(ch    <    =    INT_BOOLEAN)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
54	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  10)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  10)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  10)  {	  if(ch    <    0x7F)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
55	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  _binaryValue.length)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  _binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  _binaryValue.length)  {	  if(ch    <    =    0x7F    ||    ch    >    _binaryValue.length)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
56	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  _binaryValue.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  _binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >=  _binaryValue.length)  {	  if(ch    <    =    0x7F    ||    ch    >    _binaryValue.length)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  ==  _binaryValue.length)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  ==  _binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  ==  _binaryValue.length)  {	  if(ch    <    =    0x7F    ||    ch    >    _binaryValue.length)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
58	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  MAJOR_OBJECT_FIELD_NEXT)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  MAJOR_OBJECT_FIELD_NEXT)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  MAJOR_OBJECT_FIELD_NEXT)  {	  if(ch    <    =    0x7F    ||    ch    >    _binaryValue.length)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
59	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  switch(ch  &  0xfff)  {  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  switch(ch  &  0xfff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    switch(ch  &  0xfff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
60	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  if(ch  <  0xfff)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  if(ch  <  0xfff)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    if(ch  <  0xfff)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
61	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.clone();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.clone();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    _binaryValue  =  _binaryValue.clone();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
62	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.cloneTree();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.cloneTree();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    _binaryValue  =  _binaryValue.cloneTree();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
63	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.cloneTree();  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    _binaryValue  =  _binaryValue.cloneTree();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
64	[BUG]  [BUGGY]  if(ch  <  INT_SPACE)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  INT_SPACE)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  INT_SPACE)  {	  if(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
65	[BUG]  [BUGGY]  if(ch!=  INT_QUOTE)  {  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch!=  INT_QUOTE)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch!=  INT_QUOTE)  {	  if(ch    <    =    INT_SPACE)    {    	non-compiled	[CE]  orphaned  case	45	None	replace
66	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	34	None	replace
67	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  -  0xFF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
68	[BUG]  [BUGGY]  switch(ch  -  0xFF)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  -  0xFF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
69	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
70	[BUG]  [BUGGY]  switch(ch  &  0xF)  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
71	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
72	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
73	[BUG]  [BUGGY]  if(ch  >  0x7F)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  >  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >  0x7F)  {	  if(ch    >=    0x7F)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
74	[BUG]  [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue[_inputPtr++]  &  0xF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	37	None	replace
75	[BUG]  [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  ch  =  _inputBuffer[_inputPtr++]  &  0xF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	37	None	replace
76	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeIndex(ch);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeIndex(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeIndex(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
77	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeInt(ch);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeInt(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeInt(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
78	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeCompletedChunk(ch);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeCompletedChunk(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeCompletedChunk(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
79	[BUG]  [BUGGY]  int  comma  =  _binaryValue.computeValue(ch);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  comma  =  _binaryValue.computeValue(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  comma  =  _binaryValue.computeValue(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
80	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  switch(_binaryValue.length)  {  [CE]  case,  default,  or  '}'  expected  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  switch(_binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    switch(_binaryValue.length)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
81	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue!=  null)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]      NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue!=  null)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue!=  null)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
82	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]        NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  >  0)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
83	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]          NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  >  0)  {  if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
84	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  ==  0)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]            NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  if(_binaryValue.length  ==  0)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  >  0)  {  if(_binaryValue.length  ==  0)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
85	[BUG]  [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	22	None	replace
86	[BUG]  [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	22	None	replace
87	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch,  _inputBuffer[_inputPtr++]);	  return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	29	None	replace
88	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  return  _binaryValue(ch);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0xFF)  {  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0xFF)  {  return  _binaryValue(ch);  }	  return    _binaryValue(ch);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
89	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputPtr);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  return  _binaryValue(ch,  _inputPtr);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch,  _inputPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	29	None	replace
90	[BUG]  [BUGGY]  switch(nextToken(),  ch)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(nextToken(),  ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(nextToken(),  ch)  {	  switch(nextToken(),    _binaryValue)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
91	[BUG]  [BUGGY]  switch(_finishToken(),  _binaryValue)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_finishToken(),  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_finishToken(),  _binaryValue)  {	  switch(nextToken(),    _binaryValue)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
92	[BUG]  [BUGGY]  switch(_startToken(),  _binaryValue)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_startToken(),  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_startToken(),  _binaryValue)  {	  switch(nextToken(),    _binaryValue)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
93	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.length  -  1;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.length  -  1;	  _binaryValue    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	31	None	replace
94	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.trim();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.trim();	  _binaryValue    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	31	None	replace
95	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.toString();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.toString();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.toString();	  _binaryValue    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	31	None	replace
96	[BUG]  [BUGGY]  ch  =  _binaryValue.length;  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue.length;	  switch(ch)    {    ch    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	36	None	replace
97	[BUG]  [BUGGY]  ch  =  _binaryValue.length  -  1;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue.length  -  1;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue.length  -  1;	  switch(ch)    {    ch    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	36	None	replace
98	[BUG]  [BUGGY]  ch  =  _binaryValue.length  +  1;  [CE]  orphaned  case  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  ch  =  _binaryValue.length  +  1;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	ch  =  _binaryValue.length  +  1;	  switch(ch)    {    ch    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	36	None	replace
99	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  '.':  ch  =  _binaryValue.length;	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
100	[BUG]  [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue.length;  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  '.':  ch  =  _binaryValue.length;	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
101	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.getComment();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.getComment();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.getComment();	  Integer    comma    =    _binaryValue.getComment();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
102	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.cloneTree();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.cloneTree();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.cloneTree();  break;	  Integer    comma    =    _binaryValue.getComment();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
103	[BUG]  [BUGGY]  switch(ch,  _inputBufferPtr)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch,  _inputBufferPtr)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch,  _inputBufferPtr)  {	  switch(_binaryValue,    _inputBufferPtr)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
104	[BUG]  [BUGGY]  switch(_inputBufferPtr,  _binaryValue)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_inputBufferPtr,  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_inputBufferPtr,  _binaryValue)  {	  switch(_binaryValue,    _inputBufferPtr)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
105	[BUG]  [BUGGY]  switch(_inputBuffer,  _binaryValue)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_inputBuffer,  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_inputBuffer,  _binaryValue)  {	  switch(_binaryValue,    _inputBufferPtr)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
106	[BUG]  [BUGGY]  switch(ch,  _binaryValue)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch,  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch,  _binaryValue)  {	  switch(_binaryValue,    ch)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
107	[BUG]  [BUGGY]  if(ch  <  0xFFFF)  {  switch(_binaryValue,  ch)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFFFF)  {  switch(_binaryValue,  ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFFFF)  {  switch(_binaryValue,  ch)  {	  switch(_binaryValue,    ch)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
108	[BUG]  [BUGGY]  if(ch  <  0x7F)  {  switch(_binaryValue,  ch)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F)  {  switch(_binaryValue,  ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F)  {  switch(_binaryValue,  ch)  {	  switch(_binaryValue,    ch)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
109	[BUG]  [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	char  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
110	[BUG]  [BUGGY]  switch(_binaryValue.getNumberOfNames())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
111	[BUG]  [BUGGY]  switch(_binaryValues.getNumberOfNames())  {  [CE]  cannot  find  symbol  _binaryValues  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValues.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValues.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol  _binaryValues	52	None	replace
112	[BUG]  [BUGGY]  switch(_inputBuffer.getNumberOfNames())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_inputBuffer.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_inputBuffer.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
113	[BUG]  [BUGGY]  if(ch  <  0xFFFF)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0xFFFF)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0xFFFF)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
114	[BUG]  [BUGGY]  if(ch  <  =  0x7F)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
115	[BUG]  [BUGGY]  if(ch  <  =  0xFF)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0xFF)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0xFF)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xffff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  -  0xffff)  {	  switch(ch    &    0xffff)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
117	[BUG]  [BUGGY]  switch(ch  -  0xffff)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xffff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  -  0xffff)  {	  switch(ch    &    0xffff)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
118	[BUG]  [BUGGY]  if(ch  <  0x7F  ||  ch  >  256)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7F  ||  ch  >  256)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7F  ||  ch  >  256)  {	  if(ch    <    =    0x7F    ||    ch    >    256)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
119	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  256)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >=  256)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >=  256)  {	  if(ch    <    =    0x7F    ||    ch    >    256)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
120	[BUG]  [BUGGY]  if(ch  ==  0x7F  ||  ch  >  256)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  0x7F  ||  ch  >  256)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  0x7F  ||  ch  >  256)  {	  if(ch    <    =    0x7F    ||    ch    >    256)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
121	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.getValue();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.getValue();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.getValue();  break;	  _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
122	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length  -  1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(_binaryValue.length  -  1)  {	  switch(_binaryValue.length)    {    	compilable	  [FE]  NullPointerException  	26	1	replace
123	[BUG]  [BUGGY]  switch(_binaryValue.length  -  1)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length  -  1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length  -  1)  {	  switch(_binaryValue.length)    {    	compilable	  [FE]  NullPointerException  	26	1	replace
124	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length  +  1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(_binaryValue.length  +  1)  {	  switch(_binaryValue.length)    {    	compilable	  [FE]  NullPointerException  	26	1	replace
125	[BUG]  [BUGGY]  switch(_binaryValue.length  +  1)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length  +  1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length  +  1)  {	  switch(_binaryValue.length)    {    	compilable	  [FE]  NullPointerException  	26	1	replace
126	[BUG]  [BUGGY]  switch(_finishToken(),  ch)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_finishToken(),  ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_finishToken(),  ch)  {	  switch(_finishToken())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
127	[BUG]  [BUGGY]  switch(_startToken())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_startToken())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_startToken())  {	  switch(_finishToken())    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
128	[BUG]  [BUGGY]  switch(ch,  _inputPtr)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch,  _inputPtr)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch,  _inputPtr)  {	  switch(_binaryValue,    _inputPtr)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
129	[BUG]  [BUGGY]  switch(_inputBuffer,  _inputPtr)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_inputBuffer,  _inputPtr)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_inputBuffer,  _inputPtr)  {	  switch(_binaryValue,    _inputPtr)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
130	[BUG]  [BUGGY]  switch(_inputPtr,  _binaryValue)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_inputPtr,  _binaryValue)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_inputPtr,  _binaryValue)  {	  switch(_binaryValue,    _inputPtr)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  'n':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	34	1	replace
132	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	34	1	replace
133	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	34	None	replace
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  '.':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	34	1	replace
135	[BUG]  [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  '.':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  '.':  ch  =  _binaryValue[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	34	1	replace
136	[BUG]  [BUGGY]  switch(ch)  {  case  INT:  return  _binaryValue(ch);  [CE]  cannot  find  symbol  INT  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  INT:  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  INT:  return  _binaryValue(ch);	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  cannot  find  symbol  INT	35	None	replace
137	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  switch(ch)  {  case  INT:  return  _binaryValue(ch);  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0)  {  switch(ch)  {  case  INT:  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {  switch(ch)  {  case  INT:  return  _binaryValue(ch);  }	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
138	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
139	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
140	[BUG]  [BUGGY]  switch(_currFeatures.getNumberOfNames())  {  [CE]  cannot  find  symbol  _currFeatures  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_currFeatures.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_currFeatures.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol  _currFeatures	52	None	replace
141	[BUG]  [BUGGY]  switch(_startDocument.getNumberOfNames())  {  [CE]  cannot  find  symbol  _startDocument  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_startDocument.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_startDocument.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol  _startDocument	52	None	replace
142	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeCompressedSize(ch);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeCompressedSize(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeCompressedSize(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
143	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeCompletely(ch);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeCompletely(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeCompletely(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
144	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.getValue();  [CE]  case,  default,  or  '}'  expected  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.getValue();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    _binaryValue  =  _binaryValue.getValue();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
145	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.substring(0,  ch);  [CE]  case,  default,  or  '}'  expected  [FE]      NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.substring(0,  ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    _binaryValue  =  _binaryValue.substring(0,  ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
146	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.length;  [CE]  case,  default,  or  '}'  expected  [FE]        NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  _binaryValue  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    _binaryValue  =  _binaryValue.length;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
147	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length!=  1)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]          NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length!=  1)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length!=  1)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  'n':  ch  =  _binaryValue.length;	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
149	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue.length;  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  ch  =  _binaryValue.length;	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
150	[BUG]  [BUGGY]  switch(ch)  {  ch  =  _binaryValue.length  -  1;  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  ch  =  _binaryValue.length  -  1;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  ch  =  _binaryValue.length  -  1;	  switch(ch)    {    ch    =    _binaryValue.length;    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  return  _startValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  'n':  return  _startValue(ch);	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
152	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  return  _startValue(ch);  [FE]  RuntimeException  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  return  _startValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  return  _startValue(ch);	  switch(ch)    {    ch    =    _binaryValue.length;    	compilable	  [FE]  RuntimeException  	36	1	replace
153	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
154	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  return  _binaryValue(ch);  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    return  _binaryValue(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
155	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue.length;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  int  comma  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    int  comma  =  _binaryValue.length;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
156	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  _binaryValue  =  _binaryValue.cloneTree();  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    _binaryValue  =  _binaryValue.cloneTree();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
157	[BUG]  [BUGGY]  switch(_currToken())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_currToken())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_currToken())  {	  switch(_nextToken())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
158	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.length  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.length  +  1;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.length  +  1;	  _binaryValue    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	31	None	replace
159	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue;	  _binaryValue    =    _binaryValue.length;    	non-compiled	[CE]  orphaned  case	31	None	replace
160	[BUG]  [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [CE]  orphaned  case  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  int  ch  =  _binaryValue[_inputPtr++]  &  0xF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	int  ch  =  _binaryValue[_inputPtr++]  &  0xF;	  switch(ch)    {    ch    =    _binaryValue[_inputPtr++]    &    0xF;    	non-compiled	[CE]  orphaned  case	37	None	replace
161	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x7FF)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  0x7FF)  {	  if(ch    <    =    0x7F    ||    ch    >    5)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
162	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  return  _binaryValue(ch);  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    return  _binaryValue(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
163	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  case  0xfff:  return  _startDocument(ch);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  case  0xfff:  return  _startDocument(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    case  0xfff:  return  _startDocument(ch);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
164	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue.length;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue.length;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    int  comma  =  _binaryValue.length;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
165	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  case  0xfff:  return  _binaryValue(ch);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  case  0xfff:  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    case  0xfff:  return  _binaryValue(ch);	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
166	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeComment(ch);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeComment(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeComment(ch);  break;	  Integer    comma    =    _binaryValue.getComment();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
167	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.getCommentCount();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.getCommentCount();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.getCommentCount();  break;	  Integer    comma    =    _binaryValue.getComment();    break;    	non-compiled	[CE]  orphaned  case	47	None	replace
168	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
169	[BUG]  [BUGGY]  if(ch!=  INT_0)  {  [CE]  orphaned  case  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch!=  INT_0)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch!=  INT_0)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
170	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_10)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_10)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0  ||  ch  >  INT_10)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	19	1	replace
172	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    	compilable	  [FE]  RuntimeException  	19	1	replace
173	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.next();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.next();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.next();  break;	  _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
174	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.trim();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.trim();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.trim();  break;	  _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
175	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  -  0xff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
177	[BUG]  [BUGGY]  switch(ch  -  0xff)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  -  0xff)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  -  0xff)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  RuntimeException  	6	1	replace
178	[BUG]  [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  _binaryValue.length)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  _binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7FF  ||  ch  >  _binaryValue.length)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
179	[BUG]  [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  0x7F)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7FF  ||  ch  >  0x7F)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
180	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  %  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  %  0xFF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
181	[BUG]  [BUGGY]  switch(ch  %  0xFF)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  %  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  %  0xFF)  {	  switch(ch    &    0xFF)    {    	compilable	  [FE]  RuntimeException  	4	1	replace
182	[BUG]  [BUGGY]  if(ch  >  0x7F  ||  ch  <  =  0x7F)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  >  0x7F  ||  ch  <  =  0x7F)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >  0x7F  ||  ch  <  =  0x7F)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
183	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x10FF)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  0x10FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  0x10FF)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
184	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }  [CE]  orphaned  case  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  orphaned  case	21	None	replace
185	[BUG]  [BUGGY]  switch(_currInputProcessed,  _inputPtr)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_currInputProcessed,  _inputPtr)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_currInputProcessed,  _inputPtr)  {	  switch(_binaryValue,    _inputPtr)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
186	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xffff;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xffff;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    _binaryValue  =  _binaryValue[_inputPtr++]  &  0xffff;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
187	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    _binaryValue  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
188	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  return  _binaryValue(ch);  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  return  _binaryValue(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    return  _binaryValue(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
189	[BUG]  [BUGGY]  if(ch  ==  ')')  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  ')')  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  ')')  {	  switch(_binaryValue,    ch)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
190	[BUG]  [BUGGY]  return  _binaryValue(ch  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  return  _binaryValue(ch  +  1);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch  +  1);	  return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	29	None	replace
191	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  return  _binaryValue(ch,  _inputBuffer,  _inputPtr);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch,  _inputBuffer,  _inputPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	29	None	replace
192	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.next();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.next();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.next();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  orphaned  case	30	None	replace
193	[BUG]  [BUGGY]  if(ch  <  0x7FF  ||  ch  >  _binaryValue.length)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7FF  ||  ch  >  _binaryValue.length)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7FF  ||  ch  >  _binaryValue.length)  {	  if(ch    <    =    0x7F    ||    ch    >    _binaryValue.length)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
194	[BUG]  [BUGGY]  if(ch  >  0x7F  ||  ch  <  =  0xFF)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  >  0x7F  ||  ch  <  =  0xFF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >  0x7F  ||  ch  <  =  0xFF)  {	  if(ch    <    =    0xFF    ||    ch    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
195	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  _binaryValue  =  _binaryValue.cloneTree();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  _binaryValue  =  _binaryValue.cloneTree();	  switch(ch)    {    _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
196	[BUG]  [BUGGY]  switch(_startValue.getNumberOfNames())  {  [CE]  cannot  find  symbol  _startValue  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_startValue.getNumberOfNames())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_startValue.getNumberOfNames())  {	  switch(_parserFeatures.getNumberOfNames())    {    	non-compiled	[CE]  cannot  find  symbol  _startValue	52	None	replace
197	[BUG]  [BUGGY]  if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BOOLEAN)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BOOLEAN)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BOOLEAN)  {	  if(ch    <    =    INT_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
198	[BUG]  [BUGGY]  if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BLOCK)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BLOCK)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_BOOLEAN  ||  ch  >  INT_BLOCK)  {	  if(ch    <    =    INT_BOOLEAN)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
199	[BUG]  [BUGGY]  switch(nextToken(),  _binaryValue  +  1)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(nextToken(),  _binaryValue  +  1)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(nextToken(),  _binaryValue  +  1)  {	  switch(nextToken(),    _binaryValue)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
200	[BUG]  [BUGGY]  if(ch  <  =  INT_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_QUOTE)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_QUOTE)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
201	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {	  if(ch    <    =    INT_0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  5)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  5)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
203	[BUG]  [BUGGY]  switch(ch  &  5)  {  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  5)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  5)  {	  switch(ch    &    0xfff)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
204	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
205	[BUG]  [BUGGY]  if(ch  <  =  INT_SPACE)  {  switch(ch)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_SPACE)  {  switch(ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_SPACE)  {  switch(ch)  {	  switch(ch)    {    switch(ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
206	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.removeFirst();  break;	  _binaryValue    =    _binaryValue.clone();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
207	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  if(ch  &  0xffff)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  if(ch  &  0xffff)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    if(ch  &  0xffff)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
208	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
209	[BUG]  [BUGGY]  switch(ch  &  0xffff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xffff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xffff)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
210	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [CE]  orphaned  case  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
211	[BUG]  [BUGGY]  if(ch  <  0x7FF  ||  ch  >  0x7FF)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7FF  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7FF  ||  ch  >  0x7FF)  {	  if(ch    <    =    0x7F    ||    ch    >    0x7F)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	compilable	  [FE]  RuntimeException  	20	1	replace
213	[BUG]  [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  'n':  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;  break;	  switch(ch)    {    ch    =    _inputBuffer[_inputPtr++]    &    0xFF;    break;    	compilable	  [FE]  RuntimeException  	20	1	replace
214	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  }	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
215	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  if(ch  >  0xfff)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  if(ch  >  0xfff)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    if(ch  >  0xfff)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
216	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
217	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startDocument(ch);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
218	[BUG]  [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startToken();  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfff)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startToken();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xfff)    {    int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  return  _startToken();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	add
219	[BUG]  [BUGGY]  switch(_binaryValue  -  1,  ch)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue  -  1,  ch)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue  -  1,  ch)  {	  switch(_binaryValue,    ch)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
220	[BUG]  [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  10)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7F  ||  ch  >  10)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7F  ||  ch  >  10)  {	  if(ch    <    =    0x7F    ||    ch    >    5)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
221	[BUG]  [BUGGY]  if(ch  <  0x7FF  ||  ch  >  256)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  0x7FF  ||  ch  >  256)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  0x7FF  ||  ch  >  256)  {	  if(ch    <    =    0x7F    ||    ch    >    256)    {    	non-compiled	[CE]  orphaned  case	48	None	replace
222	[BUG]  [BUGGY]  switch(_binaryValue.getLength())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.getLength())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.getLength())  {	  switch(_binaryValue.length)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
223	[BUG]  [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  _binaryValue  =  _binaryValue.removeFirst();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	_binaryValue  =  _binaryValue.removeFirst();	  _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  orphaned  case	30	None	replace
224	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {  int  comma  =  _binaryValue[_inputPtr++]  &  0xFF;  break;  }	  switch(ch)    {    int    comma    =    _binaryValue[_inputPtr++]    &    0xFF;    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
225	[BUG]  [BUGGY]  switch(_nextToken().toString())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_nextToken().toString())  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_nextToken().toString())  {	  switch(_nextToken())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
226	[BUG]  [BUGGY]  switch(ch)  {  case  INT:  _binaryValue  =  _binaryValue.cloneTree();  [CE]  cannot  find  symbol  INT  [FE]                RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch)  {  case  INT:  _binaryValue  =  _binaryValue.cloneTree();  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch)  {  case  INT:  _binaryValue  =  _binaryValue.cloneTree();	  switch(ch)    {    _binaryValue    =    _binaryValue.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  INT	38	None	replace
227	[BUG]  [BUGGY]  if(ch  >  0x7FF)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  >  0x7FF)  {	  if(ch    >=    0x7F)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
228	[BUG]  [BUGGY]  if(ch  <  =  INT_0)  {  return  _binaryValue(ch);  }  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  INT_0)  {  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  INT_0)  {  return  _binaryValue(ch);  }	  switch(ch)    {    return    _binaryValue(ch);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
229	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _binaryValue(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _binaryValue(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    if(ch  >  0xFF)  {  return  _binaryValue(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
230	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _binaryValue(ch);  }  else  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _binaryValue(ch);  }  else  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    if(ch  >  0xFF)  {  return  _binaryValue(ch);  }  else  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
231	[BUG]  [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xFF)  {  if(ch  >  0xFF)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch    &    0xFF)    {    if(ch  >  0xFF)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
232	[BUG]  [BUGGY]  return  _binaryValue(ch,  _inputBufferPtr);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  return  _binaryValue(ch,  _inputBufferPtr);  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	return  _binaryValue(ch,  _inputBufferPtr);	  return    _binaryValue(ch);    	non-compiled	[CE]  orphaned  case	29	None	replace
233	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfffF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	switch(ch  &  0xfffF)  {	  switch(ch    &    0xffff)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
234	[BUG]  [BUGGY]  switch(ch  &  0xfffF)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(ch  &  0xfffF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(ch  &  0xfffF)  {	  switch(ch    &    0xffff)    {    	compilable	  [FE]  RuntimeException  	2	1	replace
235	[BUG]  [BUGGY]  Integer  comma  =  _binaryValue.computeIntValue(ch);  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  Integer  comma  =  _binaryValue.computeIntValue(ch);  break;  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	Integer  comma  =  _binaryValue.computeIntValue(ch);  break;	  Integer    comma    =    _binaryValue.computeValue(ch);    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
236	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]    NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
237	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]      NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  <  2)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
238	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length!=  2)  {  return  _startDocument(ch);  }  [CE]  case,  default,  or  '}'  expected  [FE]        NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length!=  2)  {  return  _startDocument(ch);  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length!=  2)  {  return  _startDocument(ch);  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
239	[BUG]  [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  else  {  return  null;  }  [CE]  case,  default,  or  '}'  expected  [FE]          NullPointerException    [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  switch(_binaryValue.length)  {  if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  else  {  return  null;  }  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	switch(_binaryValue.length)    {    if(_binaryValue.length  >  0)  {  return  _startDocument(ch);  }  else  {  return  null;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
240	[BUG]  [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  0x7FF)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  _finishToken();  }  _numTypesValid  =  NR_UNKNOWN;  _tokenInputTotal  =  _currInputProcessed  +  _inputPtr;  _binaryValue  =  null;  int  ch  =  _inputBuffer[_inputPtr++]  &  0xFF;      [BUGGY]  if(ch  <  =  0x7FF  ||  ch  >  0x7FF)  {  [BUGGY]      case  MAJOR_INITIAL:  return  _startDocument(ch);  case  MAJOR_ROOT:  return  _startValue(ch);  case  MAJOR_OBJECT_FIELD_FIRST:  //  expect  field-name  or  end-object  return  _startFieldName(ch);  case  MAJOR_OBJECT_FIELD_NEXT:  //  expect  comma  +  field-name  or  end-object  return  _startFieldNameAfterComma(ch);  [CLASS]  NonBlockingJsonParser  [METHOD]  nextToken  [RETURN_TYPE]  JsonToken  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  avail  ch  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	if(ch  <  =  0x7FF  ||  ch  >  0x7FF)  {	  if(ch    <    =    0x7FF)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
