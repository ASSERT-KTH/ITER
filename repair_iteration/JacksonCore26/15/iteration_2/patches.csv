bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_inputPtr  >=  _inputEnd)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	1	replace
2	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [FE]  JsonParseException  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_inputPtr  >=  _inputEnd)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  JsonParseException  	11	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_currInputProcessed  >  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
4	[BUG]  [BUGGY]  if(_currInputProcessed  >  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_currInputProcessed  >  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
5	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  <  0  ||  end  >  buf.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    buf.length)    {    if(start  <  0  ||  end  >  buf.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  If(start  <  0  ||  end  >  buf.length)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  If(start  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    buf.length)    {    If(start  <  0  ||  end  >  buf.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
7	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  >=  0  ||  end  >  buf.length)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  >=  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    buf.length)    {    if(start  >=  0  ||  end  >  buf.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
8	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  if(start  <  0  ||  end  >  _inputEnd)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  if(start  <  0  ||  end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _inputEnd)    {    if(start  <  0  ||  end  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
9	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  If(start  <  0  ||  end  >  _inputEnd)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  If(start  <  0  ||  end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _inputEnd)    {    If(start  <  0  ||  end  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
10	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  if(start  >=  0  ||  end  >  _inputEnd)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  if(start  >=  0  ||  end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _inputEnd)    {    if(start  >=  0  ||  end  >  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
11	[BUG]  [BUGGY]  if(start  <  0)  {  if(start  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  if(start  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0)    {    if(start  <  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  if(start  <  0)  {  If(start  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  If(start  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0)    {    If(start  <  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
13	[BUG]  [BUGGY]  if(start  <  0)  {  if(start  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  if(start  >=  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0)    {    if(start  >=  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
14	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  if(start  <  0  ||  end  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  if(start  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _origBufferLen)    {    if(start  <  0  ||  end  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
15	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  If(start  <  0  ||  end  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  If(start  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _origBufferLen)    {    If(start  <  0  ||  end  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
16	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  if(start  >=  0  ||  end  >  _origBufferLen)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  if(start  >=  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _origBufferLen)    {    if(start  >=  0  ||  end  >  _origBufferLen)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
17	[BUG]  [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    if(_endOfInput)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
18	[BUG]  [BUGGY]  if(_endOfInput)  {  If(_endOfInput)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  If(_endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    If(_endOfInput)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
19	[BUG]  [BUGGY]  if(_endOfInput)  {  if(endOfInput)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  if(endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    if(endOfInput)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
20	[BUG]  [BUGGY]  if(start  <  _endOfInput)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _endOfInput)  {	  if    (start    <    end)    {    if    (start    >=    end)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	16	None	replace
21	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  start.length)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  start.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  start.length)  {	  if(start    <    0    ||    start    >    end)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  start  >  end)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
23	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  end)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  end)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
24	[BUG]  [BUGGY]  if(_endOfInput)  {  If  (start  <  end)  {  [CE]  ';'  expected  [FE]          JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  If  (start  <  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)  {  If  (start  <  end)  {	  if    (start    <    end)    {    If    (start    <    end)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
25	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  If(start  <  _inputEnd)  {  [CE]  ';'  expected  [FE]            JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  If(start  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputEnd)  {  If(start  <  _inputEnd)  {	  if    (start    <    end)    {    If    (start    <    end)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
26	[BUG]  [BUGGY]  if(start  <  _endOfInput)  {  If  (start  <  _origBufferLen)  {  [CE]  ';'  expected  [FE]              JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _endOfInput)  {  If  (start  <  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _endOfInput)  {  If  (start  <  _origBufferLen)  {	  if    (start    <    end)    {    If    (start    <    end)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
27	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  start  >  _currInputProcessed)  {	  if(start    <    0    ||    end    >    _currInputProcessed)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
28	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  _currInputProcessed)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  _currInputProcessed)  {	  if(start    <    0    ||    end    >    _currInputProcessed)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
29	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _endOfInput)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _endOfInput)  {	  if(start    <    0    ||    end    >    _currInputEnd)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	27	None	replace
30	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  if(start  <  _inputEnd)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  if(start  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    _inputEnd)    {    if(start  <  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
31	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  if(start  >=  _inputEnd)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  if(start  >=  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    _inputEnd)    {    if(start  >=  _inputEnd)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
32	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputEnd  -  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputEnd  -  _inputPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputEnd  -  _inputPtr);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput', ",  _inputEnd  -  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  start  >  buf.length)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
35	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buf.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  buf.length)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  buf.length  ||  start  >  end)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
37	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length  ||  start  >  end)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  buf.length  ||  start  >  end)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
38	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length  -  1)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  buf.length  -  1)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  JsonParseException  	2	1	replace
39	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length  -  1)  {  [FE]  JsonParseException  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length  -  1)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  buf.length  -  1)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  JsonParseException  	2	1	replace
40	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end)  {  if(start  <  0  ||  start  >  end)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end)  {  if(start  <  0  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    start    >    end)    {    if(start  <  0  ||  start  >  end)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
41	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end)  {  If(start  <  0  ||  start  >  end)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end)  {  If(start  <  0  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    start    >    end)    {    If(start  <  0  ||  start  >  end)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
42	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end)  {  if(start  >=  0  ||  start  >  end)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end)  {  if(start  >=  0  ||  start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    start    >    end)    {    if(start  >=  0  ||  start  >  end)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
43	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end.length)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  start  >  end.length)  {	  if(end    <    0    ||    start    >    end.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
44	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  <  0  ||  end  >  _currInputProcessed)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  <  0  ||  end  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _currInputProcessed)    {    if(start  <  0  ||  end  >  _currInputProcessed)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
45	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  If(start  <  0  ||  end  >  _currInputProcessed)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  If(start  <  0  ||  end  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _currInputProcessed)    {    If(start  <  0  ||  end  >  _currInputProcessed)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
46	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  >=  0  ||  end  >  _currInputProcessed)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  >=  0  ||  end  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _currInputProcessed)    {    if(start  >=  0  ||  end  >  _currInputProcessed)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
47	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  start  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
48	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  _origBufferLen)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
49	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_currInputProcessed  <  0  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
50	[BUG]  [BUGGY]  if(_currInputProcessed  <  0  ||  end  >  _origBufferLen)  {  [FE]  JsonParseException  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_currInputProcessed  <  0  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
51	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  start  >  _inputEnd)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  JsonParseException  	26	1	replace
52	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  _inputEnd)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  start  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  _inputEnd)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  JsonParseException  	26	1	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_inputPtr  <  0  ||  end  >  buf.length)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
54	[BUG]  [BUGGY]  if(_inputPtr  <  0  ||  end  >  buf.length)  {  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_inputPtr  <  0  ||  end  >  buf.length)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_inputPtr  <  _inputEnd)  {	  if(end    <    0)    {    if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
56	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_inputPtr  <  _inputEnd)  {	  if(end    <    0)    {    if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
57	[BUG]  [BUGGY]  if(_currInputProcessed)  {  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_currInputProcessed)  {	  if(_endOfInput)    {    	non-compiled	[CE]  incompatible  types	29	None	replace
58	[BUG]  [BUGGY]  if(!_currInputProcessed)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(!_currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(!_currInputProcessed)  {	  if(_endOfInput)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	29	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_currInputProcessed  >  end)  {	  if(_endOfInput)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
60	[BUG]  [BUGGY]  if(_currInputProcessed  >  end)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_currInputProcessed  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_currInputProcessed  >  end)  {	  if(_endOfInput)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
61	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  If(end  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  If(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _currInputProcessed)  {  If(end  <  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
62	[BUG]  [BUGGY]  if(start  <  0)  {  If(end  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  If(end  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {  If(end  >  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
63	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  If(end  <  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  If(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _origBufferLen)  {  If(end  <  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
64	[BUG]  [BUGGY]  if(start  <  0)  {  If(end  <  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  If(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {  If(end  <  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
65	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  start,  end);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'       ",    start);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
66	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  end);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'       ",    start);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  _inputEnd)  {	  if(start    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
68	[BUG]  [BUGGY]  if(end  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  _inputEnd)  {	  if(start    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
69	[BUG]  [BUGGY]  if(start  <  =  _inputEnd)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  =  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  =  _inputEnd)  {	  if(start    <    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
70	[BUG]  [BUGGY]  if  (end  <  =  start)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if  (end  <  =  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if  (end  <  =  start)  {	  if    (start    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  If(end  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  If(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputEnd)  {  If(end  <  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
72	[BUG]  [BUGGY]  If(end  <  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  If(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	If(end  <  0)  {	  if(end    <    0)    {    If(end    <    0)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
73	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _end)  {  [CE]  cannot  find  symbol  _end  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _end)  {	  if(start    <    0    ||    end    >    _currInputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _end	27	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputPtr)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  _inputPtr)  {	  if(start    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
75	[BUG]  [BUGGY]  if(start  <  _inputPtr)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputPtr)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputPtr)  {	  if(start    <    _inputEnd)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
76	[BUG]  [BUGGY]  if  (start  <  0)  {  if  (start  >  0)  {  [CE]  ';'  expected  [FE]        JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if  (start  <  0)  {  if  (start  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if  (start  <  0)  {  if  (start  >  0)  {	  if    (start    <    end)    {    if    (start    <    end)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
77	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  if(start  <  _inputStart)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  if(start  <  _inputStart)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    _inputEnd)    {    if(start  <  _inputStart)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
78	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  <  0  ||  start  >  _currInputProcessed)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  if(start  <  0  ||  start  >  _currInputProcessed)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    _currInputProcessed)    {    if(start  <  0  ||  start  >  _currInputProcessed)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
79	[BUG]  [BUGGY]  if(start  <  0)  {  if(end  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  if(end  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {  if(end  >  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
80	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  if(end  >=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  if(end  >=  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputEnd)  {  if(end  >=  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
81	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  if(end  >  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  _inputEnd)  {  if(end  >  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputEnd)  {  if(end  >  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  if(start  >=  _inputEnd)  {  if(end  <  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  >=  _inputEnd)  {  if(end  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  >=  _inputEnd)  {  if(end  <  0)  {	  if(end    <    0)    {    if(end    >=    0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  if(_endOfInput)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);	  	non-compiled	[CE]  ';'  expected	28	None	add
84	[BUG]  [BUGGY]  if(_endOfInput)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    _reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);	  	non-compiled	[CE]  ';'  expected	28	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  >  end)  {	  if(_endOfInput)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
86	[BUG]  [BUGGY]  if(start  >  end)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  >  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  >  end)  {	  if(_endOfInput)    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
87	[BUG]  [BUGGY]  if  (start  <  =  end)  {  If  (start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if  (start  <  =  end)  {  If  (start  <  =  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if  (start  <  =  end)  {  If  (start  <  =  end)  {	  if    (start    <    end)    {    If    (start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  if(start  <  0)  {  (start  <  0)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  (start  <  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0)    {    (start  <  0)  {	  	non-compiled	[CE]  not  a  statement	5	None	add
89	[BUG]  [BUGGY]  if(start  <  0)  {  if(end  >  start)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  if(end  >  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {  if(end  >  start)  {	  if(end    <    0)    {    if(end    <    0)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
90	[BUG]  [BUGGY]  if(start  <  0)  {  if(end  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0)  {  if(end  >=  0)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {  if(end  >=  0)  {	  if(end    <    0)    {    if(end    <    0)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  start)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  JsonParseException  	8	1	replace
92	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  start)  {  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  start)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  JsonParseException  	8	1	replace
93	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  >=  0  ||  end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  >=  0  ||  end  >  _inputEnd)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  JsonParseException  	26	1	replace
94	[BUG]  [BUGGY]  if(start  >=  0  ||  end  >  _inputEnd)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  >=  0  ||  end  >  _inputEnd)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  >=  0  ||  end  >  _inputEnd)  {	  if(start    <    0    ||    end    >    _inputEnd)    {    	compilable	  [FE]  JsonParseException  	26	1	replace
95	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  <  0  ||  start  >  buf.length)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  if(start  <  0  ||  start  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start    <    0    ||    end    >    buf.length)    {    if(start  <  0  ||  start  >  buf.length)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
96	[BUG]  [BUGGY]  _reportError( "Input  end  (%d)may  not  be  before  start  (%d),  start,  end);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Input  end  (%d)may  not  be  before  start  (%d),  start,  end);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Input  end  (%d)may  not  be  before  start  (%d),  start,  end);	  _reportError(   "Input    end    (%d)    may    not    be    before    start    (%d)   ",    start,    end);    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
97	[BUG]  [BUGGY]  if(!_reportInvalidEOFInValues)  {  [CE]  cannot  find  symbol  _reportInvalidEOFInValues  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(!_reportInvalidEOFInValues)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(!_reportInvalidEOFInValues)  {	  if(_endOfInput)    {    	non-compiled	[CE]  cannot  find  symbol  _reportInvalidEOFInValues	29	None	replace
98	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
99	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  _origBufferLen)  {  [FE]  JsonParseException  [FE]    JsonParseException    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    end    >    _origBufferLen)    {    	compilable	  [FE]  JsonParseException  	22	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  >=  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_inputPtr  >=  start)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
101	[BUG]  [BUGGY]  if(_inputPtr  >=  start)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_inputPtr  >=  start)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_inputPtr  >=  start)  {	  if(end    <    0)    {    if(end    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(end  <  0  ||  end  >  buf.length)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
103	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buf.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  0  ||  end  >  buf.length)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  end  >  buf.length)  {	  if(start    <    0    ||    end    >    buf.length)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
104	[BUG]  [BUGGY]  if(end  <  _inputStart)  {  [CE]  cannot  find  symbol  _inputStart  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(end  <  _inputStart)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  _inputStart)  {	  if(start    <    _inputEnd)    {    	non-compiled	[CE]  cannot  find  symbol  _inputStart	19	None	replace
105	[BUG]  [BUGGY]  if  (start  <  =  end  &&  end  <  =  _endOfInput)  {  [CE]  illegal  start  of  expression  [FE]        JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if  (start  <  =  end  &&  end  <  =  _endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if  (start  <  =  end  &&  end  <  =  _endOfInput)  {	  if    (start    <    =    end)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
106	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  start  >  end  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  JsonParseException  	8	1	replace
107	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end  ||  end  >  _origBufferLen)  {  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end  ||  end  >  _origBufferLen)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  start  >  end  ||  end  >  _origBufferLen)  {	  if(start    <    0    ||    start    >    end)    {    	compilable	  [FE]  JsonParseException  	8	1	replace
108	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end  ||  end  >  _endOfInput)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  0  ||  start  >  end  ||  end  >  _endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  start  >  end  ||  end  >  _endOfInput)  {	  if(start    <    0    ||    start    >    end)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	8	None	replace
109	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ",  _inputPtr);	  _reportError(   "Still    have    %d    undecoded    bytes,    should    not    call    'feedInput'   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  }  if(_endOfInput)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  }  if(_endOfInput)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  }  if(_endOfInput)  {	  	non-compiled	[CE]  illegal  start  of  type	28	None	add
111	[BUG]  [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(_endOfInput)  {  if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)    {    if(_endOfInput)  <  this._reportError( "Input  end  (%d)  may  not  be  before  start  (%d)   ",  start,  end);	  	non-compiled	[CE]  illegal  start  of  type	28	None	add
112	[BUG]  [BUGGY]  if(start  <  =  end)  {  If  (start  <  end)  {  [CE]  illegal  start  of  expression  [FE]          JsonParseException      [CONTEXT]      public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(     "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'     ",  _inputEnd  -  _inputPtr);  }      [BUGGY]  if(start  <  =  end)  {  If  (start  <  end)  {  [BUGGY]      _reportError(     "Input  end  (%d)  may  not  be  before  start  (%d)     ",  end,  start);  }  if  (_endOfInput)  {  _reportError(     "Already  closed,  can  not  feed  more  input     ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  =  end)  {  If  (start  <  end)  {	  if    (start    <    end)    {    If    (start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
