bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  buf.length)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
2	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  buf.length)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  buf.length)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
3	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  _currInputProcessed)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
4	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  [FE]  JsonParseException  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _currInputProcessed)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _currInputProcessed)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
6	[BUG]  [BUGGY]  if(start  <  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  start  >  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  start  >  end)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
8	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  start  >  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  start  >  end)  {	  if(end    <    0)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
9	[BUG]  [BUGGY]  if(end  <  0)  {  if(end  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(end  <  0)  {  if(end  <  0)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end    <    0)    {    if(end  <  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
10	[BUG]  [BUGGY]  if(end  <  0)  {  If(end  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(end  <  0)  {  If(end  <  0)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end    <    0)    {    If(end  <  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
11	[BUG]  [BUGGY]  if(end  <  0)  {  if(end  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(end  <  0)  {  if(end  >=  0)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end    <    0)    {    if(end  >=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
12	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput' ");	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  start,  end);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  _reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  start,  end);  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Input  end  (%d)  may  not  be  before  start  (%d) ",  start,  end);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if  (start  <  end)  {  if  (start  <  end)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if  (start  <  end)  {  if  (start  <  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if    (start    <    end)    {    if  (start  <  end)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  if  (start  <  end)  {  If  (start  <  end)  {  [CE]  ';'  expected  [FE]      JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if  (start  <  end)  {  If  (start  <  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if    (start    <    end)    {    If  (start  <  end)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
16	[BUG]  [BUGGY]  if  (start  <  end)  {  if  (start  >=  end)  {  [CE]  ';'  expected  [FE]        JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if  (start  <  end)  {  if  (start  >=  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if    (start    <    end)    {    if  (start  >=  end)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
17	[BUG]  [BUGGY]  if  (start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]    JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if  (start  <  =  end)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if  (start  <  =  end)  {	  if    (start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  _inputEnd)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  _inputEnd)  {	  if    (start    <    end)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
19	[BUG]  [BUGGY]  if(start  <  _inputEnd)  {  [FE]  AssertionFailedError  [FE]      JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  _inputEnd)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  _inputEnd)  {	  if    (start    <    end)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
20	[BUG]  [BUGGY]  if  (start  <  end)  {  if  (start  <  start)  {  [CE]  ';'  expected  [FE]    JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if  (start  <  end)  {  if  (start  <  start)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if    (start    <    end)    {    if  (start  <  start)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
21	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  _origBufferLen)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
22	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  [FE]  JsonParseException  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _origBufferLen)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _origBufferLen)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
23	[BUG]  [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  _reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	_reportError( "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  start);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  end.length)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(end  <  0  ||  start  >  end.length)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(end  <  0  ||  start  >  end.length)  {	  if(end    <    0)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
25	[BUG]  [BUGGY]  [FE]  JsonParseException  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(start  <  0  ||  end  >  _inputEnd)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
26	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  [FE]  JsonParseException  [FE]      AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _inputEnd)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _inputEnd)  {	  if(end    <    0)    {    	compilable	  [FE]  JsonParseException  	4	1	replace
27	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  _currInputEnd)  {  [CE]  cannot  find  symbol  _currInputEnd  [FE]        AssertionFailedError    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(start  <  0  ||  end  >  _currInputEnd)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(start  <  0  ||  end  >  _currInputEnd)  {	  if(end    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  _currInputEnd	4	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(_endOfInput)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	if(_endOfInput)  {	  if    (start    <    end)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
29	[BUG]  [BUGGY]  if(_endOfInput)  {  [FE]  AssertionFailedError  [FE]    JsonParseException    [CONTEXT]    public  void  feedInput(byte[]  buf,  int  start,  int  end)  throws  IOException  {  if  (_inputPtr  <  _inputEnd)  {  _reportError(   "Still  have  %d  undecoded  bytes,  should  not  call  'feedInput'   ",  _inputEnd  -  _inputPtr);  }    [BUGGY]  if(_endOfInput)  {  [BUGGY]    _reportError(   "Input  end  (%d)  may  not  be  before  start  (%d)   ",  end,  start);  }  if  (_endOfInput)  {  _reportError(   "Already  closed,  can  not  feed  more  input   ");  }  _currInputProcessed  +=  _origBufferLen;    [CLASS]  NonBlockingJsonParser  [METHOD]  feedInput  [RETURN_TYPE]  void  byte[]  buf  int  start  int  end  [VARIABLES]  byte[]  _inputBuffer  buf  int[]  _icLatin1  _icUTF8  boolean  int  FEAT_MASK_ALLOW_JAVA_COMMENTS  FEAT_MASK_ALLOW_MISSING  FEAT_MASK_ALLOW_SINGLE_QUOTES  FEAT_MASK_ALLOW_UNQUOTED_NAMES  FEAT_MASK_ALLOW_YAML_COMMENTS  FEAT_MASK_LEADING_ZEROS  FEAT_MASK_TRAILING_COMMA  _origBufferLen  end  parserFeatures  start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	if(_endOfInput)  {	  if    (start    <    end)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
