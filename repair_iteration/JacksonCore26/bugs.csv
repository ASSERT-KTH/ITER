bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] super(ctxt, parserFeatures, sym); [FE] AssertionFailedError [CONTEXT] public NonBlockingJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) { [BUGGY] super(ctxt, parserFeatures, sym); [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] <init> [RETURN_TYPE] ByteQuadsCanonicalizer)  IOContext ctxt int parserFeatures ByteQuadsCanonicalizer sym [VARIABLES] byte[] _inputBuffer IOContext ctxt ByteQuadsCanonicalizer sym int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	68	68	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public NonBlockingJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) { [BUGGY] [BUGGY] super(ctxt, parserFeatures, sym); } [CLASS] NonBlockingJsonParser [METHOD] <init> [RETURN_TYPE] ByteQuadsCanonicalizer)  IOContext ctxt int parserFeatures ByteQuadsCanonicalizer sym [VARIABLES] byte[] _inputBuffer IOContext ctxt ByteQuadsCanonicalizer sym int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	68	68	1	add	
3	[BUG] [BUGGY] protected byte[] _inputBuffer = NO_BYTES; [FE] AssertionFailedError [CONTEXT] [BUGGY] protected byte[] _inputBuffer = NO_BYTES; [BUGGY]  [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	45	45	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] protected byte[] _inputBuffer = NO_BYTES; [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	45	45	1	add	
5	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public NonBlockingJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) { super(ctxt, parserFeatures, sym); [BUGGY] } [BUGGY]  [CLASS] NonBlockingJsonParser [METHOD] <init> [RETURN_TYPE] ByteQuadsCanonicalizer)  IOContext ctxt int parserFeatures ByteQuadsCanonicalizer sym [VARIABLES] byte[] _inputBuffer IOContext ctxt ByteQuadsCanonicalizer sym int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	69	69	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public NonBlockingJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) { super(ctxt, parserFeatures, sym); [BUGGY] [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] <init> [RETURN_TYPE] ByteQuadsCanonicalizer)  IOContext ctxt int parserFeatures ByteQuadsCanonicalizer sym [VARIABLES] byte[] _inputBuffer IOContext ctxt ByteQuadsCanonicalizer sym int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	69	69	1	add	
7	[BUG] [BUGGY] private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask(); [FE] AssertionFailedError [CONTEXT] [BUGGY] private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask(); [BUGGY]  [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	19	19	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	19	19	1	add	
9	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	21	21	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	21	21	1	add	
11	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	23	23	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	23	23	1	add	
13	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	24	24	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	24	24	1	add	
15	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	25	25	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	25	25	1	add	
17	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	26	26	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	26	26	1	add	
19	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	27	27	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	27	27	1	add	
21	[BUG] [BUGGY] private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8(); [FE] AssertionFailedError [CONTEXT] [BUGGY] private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8(); [BUGGY]  [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	30	30	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	30	30	1	add	
23	[BUG] [BUGGY] protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1(); [FE] AssertionFailedError [CONTEXT] [BUGGY] protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1(); [BUGGY]  [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	34	34	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1(); [CLASS] NonBlockingJsonParser  [VARIABLES] 	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	34	34	1	add	
25	[BUG] [BUGGY] return this; [FE] AssertionFailedError [CONTEXT] public ByteArrayFeeder getNonBlockingInputFeeder() { [BUGGY] return this; [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] getNonBlockingInputFeeder [RETURN_TYPE] ByteArrayFeeder  [VARIABLES] byte[] _inputBuffer int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	79	79	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ByteArrayFeeder getNonBlockingInputFeeder() { [BUGGY] [BUGGY] return this; } [CLASS] NonBlockingJsonParser [METHOD] getNonBlockingInputFeeder [RETURN_TYPE] ByteArrayFeeder  [VARIABLES] byte[] _inputBuffer int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen parserFeatures  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	79	79	1	add	
27	[BUG] [BUGGY] if (_inputPtr < _inputEnd) { [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  [BUGGY] if (_inputPtr < _inputEnd) { [BUGGY] _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  [BUGGY] [BUGGY] if (_inputPtr < _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	91	91	1	add	
29	[BUG] [BUGGY] if (end < start) { [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  if (_inputPtr < _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } [BUGGY] if (end < start) { [BUGGY] _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;   [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  if (_inputPtr < _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } [BUGGY] [BUGGY] if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;   [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	94	94	1	add	
31	[BUG] [BUGGY] if (_endOfInput) { [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  if (_inputPtr < _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  [BUGGY] if (_endOfInput) { [BUGGY] _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void feedInput(byte[] buf, int start, int end) throws IOException {  if (_inputPtr < _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  [BUGGY] [BUGGY] if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	98	98	1	add	
33	[BUG] [BUGGY] _currInputProcessed += _origBufferLen; [FE] AssertionFailedError [CONTEXT] _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  [BUGGY] _currInputProcessed += _origBufferLen; [BUGGY]   _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	102	102	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  [BUGGY] [BUGGY] _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	102	102	1	add	
35	[BUG] [BUGGY] _currInputRowStart = start - (_inputEnd - _currInputRowStart); [FE] AssertionFailedError [CONTEXT] _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  [BUGGY] _currInputRowStart = start - (_inputEnd - _currInputRowStart); [BUGGY]   _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	105	105	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _reportError("Input end (%d) may not be before start (%d)", end, start); }  if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  [BUGGY] [BUGGY] _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	105	105	1	add	
37	[BUG] [BUGGY] _inputBuffer = buf; [FE] AssertionFailedError [CONTEXT] if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  [BUGGY] _inputBuffer = buf; [BUGGY] _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	108	108	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (_endOfInput) { _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  [BUGGY] [BUGGY] _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	108	108	1	add	
39	[BUG] [BUGGY] _inputPtr = start; [FE] AssertionFailedError [CONTEXT] _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; [BUGGY] _inputPtr = start; [BUGGY] _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	109	109	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _reportError("Already closed, can not feed more input"); }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; [BUGGY] [BUGGY] _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	109	109	1	add	
41	[BUG] [BUGGY] _inputEnd = end; [FE] AssertionFailedError [CONTEXT] }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; [BUGGY] _inputEnd = end; [BUGGY] _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	110	110	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; [BUGGY] [BUGGY] _inputEnd = end; _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	110	110	1	add	
43	[BUG] [BUGGY] _origBufferLen = end - start; [FE] AssertionFailedError [CONTEXT]  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; [BUGGY] _origBufferLen = end - start; [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	111	111	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; [BUGGY] [BUGGY] _origBufferLen = end - start; } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	111	111	1	add	
45	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; [BUGGY] } [BUGGY]  [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	112	112	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] _currInputProcessed += _origBufferLen;  _currInputRowStart = start - (_inputEnd - _currInputRowStart);  _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end - start; [BUGGY] [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] feedInput [RETURN_TYPE] void  byte[] buf int start int end [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	112	112	1	add	
47	[BUG] [BUGGY] if (_inputPtr >= _inputEnd) { [FE] AssertionFailedError [CONTEXT] {   [BUGGY] if (_inputPtr >= _inputEnd) { [BUGGY] if (_closed) { return null; }  if (_endOfInput) { // except for this special case   if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishTokenWithEOF(); } [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {   [BUGGY] [BUGGY] if (_inputPtr >= _inputEnd) { if (_closed) { return null; }  if (_endOfInput) { // except for this special case   if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishTokenWithEOF(); } [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	164	164	1	add	
49	[BUG] [BUGGY] if (_currToken == JsonToken.NOT_AVAILABLE) { [FE] AssertionFailedError [CONTEXT]   if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishTokenWithEOF(); } return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; }  [BUGGY] if (_currToken == JsonToken.NOT_AVAILABLE) { [BUGGY] return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF;  [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishTokenWithEOF(); } return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; }  [BUGGY] [BUGGY] if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF;  [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	180	180	1	add	
51	[BUG] [BUGGY] _numTypesValid = NR_UNKNOWN; [FE] AssertionFailedError [CONTEXT] return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  [BUGGY] _numTypesValid = NR_UNKNOWN; [BUGGY] _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  [BUGGY] [BUGGY] _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	185	185	1	add	
53	[BUG] [BUGGY] _tokenInputTotal = _currInputProcessed + _inputPtr; [FE] AssertionFailedError [CONTEXT] } return JsonToken.NOT_AVAILABLE; }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; [BUGGY] _tokenInputTotal = _currInputProcessed + _inputPtr; [BUGGY]  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } return JsonToken.NOT_AVAILABLE; }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; [BUGGY] [BUGGY] _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	186	186	1	add	
55	[BUG] [BUGGY] _binaryValue = null; [FE] AssertionFailedError [CONTEXT] }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  [BUGGY] _binaryValue = null; [BUGGY] int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  [BUGGY] [BUGGY] _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	188	188	1	add	
57	[BUG] [BUGGY] int ch = _inputBuffer[_inputPtr++] & 0xFF; [FE] AssertionFailedError [CONTEXT]  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; [BUGGY] int ch = _inputBuffer[_inputPtr++] & 0xFF; [BUGGY]  switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (_currToken == JsonToken.NOT_AVAILABLE) { return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; [BUGGY] [BUGGY] int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	189	189	1	add	
59	[BUG] [BUGGY] switch (_majorState) { [FE] AssertionFailedError [CONTEXT] return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; [BUGGY] switch (_majorState) { [BUGGY] case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object return _startFieldNameAfterComma(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return _finishToken(); }  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; [BUGGY] [BUGGY] switch (_majorState) { case MAJOR_INITIAL: return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object return _startFieldNameAfterComma(ch); [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	191	191	1	add	
61	[BUG] [BUGGY] return _startDocument(ch); [FE] AssertionFailedError [CONTEXT]  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: [BUGGY] return _startDocument(ch); [BUGGY]  case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object return _startFieldNameAfterComma(ch); case MAJOR_OBJECT_VALUE: // expect colon, followed by value [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  _numTypesValid = NR_UNKNOWN; _tokenInputTotal = _currInputProcessed + _inputPtr;  _binaryValue = null; int ch = _inputBuffer[_inputPtr++] & 0xFF; switch (_majorState) { case MAJOR_INITIAL: [BUGGY] [BUGGY] return _startDocument(ch); case MAJOR_ROOT: return _startValue(ch); case MAJOR_OBJECT_FIELD_FIRST: // expect field-name or end-object return _startFieldName(ch); case MAJOR_OBJECT_FIELD_NEXT: // expect comma + field-name or end-object return _startFieldNameAfterComma(ch); case MAJOR_OBJECT_VALUE: // expect colon, followed by value [CLASS] NonBlockingJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail ch end parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	193	193	1	add	
63	[BUG] [BUGGY] ch &= 0xFF; [FE] AssertionFailedError [CONTEXT] { [BUGGY] ch &= 0xFF; [BUGGY]   if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { return _finishBOM(1); }  while (ch <= 0x020) { if (ch != INT_SPACE) { if (ch == INT_LF) { [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] ch &= 0xFF;  if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { return _finishBOM(1); }  while (ch <= 0x020) { if (ch != INT_SPACE) { if (ch == INT_LF) { [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	422	422	1	add	
65	[BUG] [BUGGY] if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { [FE] AssertionFailedError [CONTEXT] { ch &= 0xFF;  [BUGGY] if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { [BUGGY] return _finishBOM(1); }  while (ch <= 0x020) { if (ch != INT_SPACE) { if (ch == INT_LF) { ++_currInputRow; _currInputRowStart = _inputPtr; } else if (ch == INT_CR) { [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { ch &= 0xFF;  [BUGGY] [BUGGY] if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { return _finishBOM(1); }  while (ch <= 0x020) { if (ch != INT_SPACE) { if (ch == INT_LF) { ++_currInputRow; _currInputRowStart = _inputPtr; } else if (ch == INT_CR) { [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	425	425	1	add	
67	[BUG] [BUGGY] while (ch <= 0x020) { [FE] AssertionFailedError [CONTEXT] { ch &= 0xFF;  if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { return _finishBOM(1); }  [BUGGY] while (ch <= 0x020) { [BUGGY] if (ch != INT_SPACE) { if (ch == INT_LF) { ++_currInputRow; _currInputRowStart = _inputPtr; } else if (ch == INT_CR) { ++_currInputRowAlt; _currInputRowStart = _inputPtr; } else if (ch != INT_TAB) { _throwInvalidSpace(ch); } [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { ch &= 0xFF;  if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) { return _finishBOM(1); }  [BUGGY] [BUGGY] while (ch <= 0x020) { if (ch != INT_SPACE) { if (ch == INT_LF) { ++_currInputRow; _currInputRowStart = _inputPtr; } else if (ch == INT_CR) { ++_currInputRowAlt; _currInputRowStart = _inputPtr; } else if (ch != INT_TAB) { _throwInvalidSpace(ch); } [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	430	430	1	add	
69	[BUG] [BUGGY] return _startValue(ch); [FE] AssertionFailedError [CONTEXT] return null; }  if (_endOfInput) { // except for this special case return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; } ch = _inputBuffer[_inputPtr++] & 0xFF; } [BUGGY] return _startValue(ch); [BUGGY] } [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; }  if (_endOfInput) { // except for this special case return _eofAsNextToken(); } return JsonToken.NOT_AVAILABLE; } ch = _inputBuffer[_inputPtr++] & 0xFF; } [BUGGY] [BUGGY] return _startValue(ch); } [CLASS] NonBlockingJsonParser [METHOD] _startDocument [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail c ch end len parserFeatures start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	455	455	1	add	
71	[BUG] [BUGGY] if (ch <= 0x0020) { [FE] AssertionFailedError [CONTEXT] {  [BUGGY] if (ch <= 0x0020) { [BUGGY] ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); if (ch == INT_QUOTE) { return _startString(); } [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  [BUGGY] [BUGGY] if (ch <= 0x0020) { ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); if (ch == INT_QUOTE) { return _startString(); } [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	596	596	1	add	
73	[BUG] [BUGGY] _updateTokenLocation(); [FE] AssertionFailedError [CONTEXT] {  if (ch <= 0x0020) { ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } [BUGGY] _updateTokenLocation(); [BUGGY] if (ch == INT_QUOTE) { return _startString(); } switch (ch) { case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS); [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  if (ch <= 0x0020) { ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } [BUGGY] [BUGGY] _updateTokenLocation(); if (ch == INT_QUOTE) { return _startString(); } switch (ch) { case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS); [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	603	603	1	add	
75	[BUG] [BUGGY] if (ch == INT_QUOTE) { [FE] AssertionFailedError [CONTEXT] {  if (ch <= 0x0020) { ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); [BUGGY] if (ch == INT_QUOTE) { [BUGGY] return _startString(); } switch (ch) { case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  if (ch <= 0x0020) { ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); [BUGGY] [BUGGY] if (ch == INT_QUOTE) { return _startString(); } switch (ch) { case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS);  [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	604	604	1	add	
77	[BUG] [BUGGY] switch (ch) { [FE] AssertionFailedError [CONTEXT] ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); if (ch == INT_QUOTE) { return _startString(); } [BUGGY] switch (ch) { [BUGGY] case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS);     [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	607	607	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ch = _skipWS(ch); if (ch <= 0) { _minorState = MINOR_VALUE_LEADING_WS; return _currToken; } } _updateTokenLocation(); if (ch == INT_QUOTE) { return _startString(); } [BUGGY] [BUGGY] switch (ch) { case '#': return _finishHashComment(MINOR_VALUE_LEADING_WS); case '-': return _startNegativeNumber(); case '/': // c/c++ comments return _startSlashComment(MINOR_VALUE_LEADING_WS);     [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	607	607	1	add	
79	[BUG] [BUGGY] return _startArrayScope(); [FE] AssertionFailedError [CONTEXT] case '8': case '9': return _startPositiveNumber(ch); case 'f': return _startFalseToken(); case 'n': return _startNullToken(); case 't': return _startTrueToken(); case '[': [BUGGY] return _startArrayScope(); [BUGGY] case ']': return _closeArrayScope(); case '{': return _startObjectScope(); case '}': return _closeObjectScope(); default: } return _startUnexpectedValue(false, ch); } [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	637	637	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case '8': case '9': return _startPositiveNumber(ch); case 'f': return _startFalseToken(); case 'n': return _startNullToken(); case 't': return _startTrueToken(); case '[': [BUGGY] [BUGGY] return _startArrayScope(); case ']': return _closeArrayScope(); case '{': return _startObjectScope(); case '}': return _closeObjectScope(); default: } return _startUnexpectedValue(false, ch); } [CLASS] NonBlockingJsonParser [METHOD] _startValue [RETURN_TYPE] JsonToken  int ch [VARIABLES] byte[] _inputBuffer buf int[] _icLatin1 _icUTF8 boolean int FEAT_MASK_ALLOW_JAVA_COMMENTS FEAT_MASK_ALLOW_MISSING FEAT_MASK_ALLOW_SINGLE_QUOTES FEAT_MASK_ALLOW_UNQUOTED_NAMES FEAT_MASK_ALLOW_YAML_COMMENTS FEAT_MASK_LEADING_ZEROS FEAT_MASK_TRAILING_COMMA _origBufferLen avail bytesHandled c ch end len parserFeatures ptr start  	projects/JacksonCore26/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java	1.0	637	637	1	add	
