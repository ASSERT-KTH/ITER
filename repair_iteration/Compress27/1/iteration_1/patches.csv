bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  return    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(end));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  end));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  end));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  end));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer.length));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
35	[BUG]  [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
36	[BUG]  [BUGGY]  return  0;  if(length  >  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  >  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  >  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
37	[BUG]  [BUGGY]  return  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
38	[BUG]  [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [CE]  empty  character  literal  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
39	[BUG]  [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  empty  character  literal  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  empty  character  literal	1	None	add
40	[BUG]  [BUGGY]  return  0;  if(length  >  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  >  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  >  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  empty  character  literal  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".getMessage());	  return    0;    	non-compiled	[CE]  empty  character  literal	2	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(length));  [CE]  empty  character  literal  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(length));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(length));	  return    0;    	non-compiled	[CE]  empty  character  literal	2	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");  [CE]  byte  cannot  be  dereferenced  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  byte  cannot  be  dereferenced	10	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [CE]  byte  cannot  be  dereferenced  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  byte  cannot  be  dereferenced	10	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  start));  [CE]  empty  character  literal  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  start));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  empty  character  literal	3	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer);  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	3	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [CE]  empty  character  literal  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  empty  character  literal	8	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  return  0;  if(length  ==  0)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  ==  0)  {  return  0;  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  ==  0)  {  return  0;  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
59	[BUG]  [BUGGY]  return  0;  if(length  <  =  0)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  =  0)  {  return  0;  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  =  0)  {  return  0;  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
60	[BUG]  [BUGGY]  return  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(end  <  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
61	[BUG]  [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
62	[BUG]  [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  return  0;  return  0;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  return  0;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    return  0;	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
66	[BUG]  [BUGGY]  return  0;  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  	1	None	add
67	[BUG]  [BUGGY]  return  0;  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  	non-compiled	[CE]  	1	None	add
68	[BUG]  [BUGGY]  return  0;  if(end  <  0)  {  return  0;  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return  0;  if(end  <  0)  {  return  0;  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	return    0;    if(end  <  0)  {  return  0;  }	  	non-compiled	[CE]  	1	None	add
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ",  end] ");  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ",  end] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ",  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	3	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
