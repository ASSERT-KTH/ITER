bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  of ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  of ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
4	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
7	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  at  least  2 ");	  return    0;    if(length    >    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
9	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]. ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  end);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ".] ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ".] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ".] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  end,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
24	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  result);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  result);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  result);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  Result  <  0  ||  end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Result  <  0  ||  end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Result  <  0  ||  end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(end    <    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  + "equals(buffer,  end));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  + "equals(buffer,  end));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  + "equals(buffer,  end));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
28	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  [Delete]  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	[Delete]	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  allowNull(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNull(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNull(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  allowNull(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer[start]));  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNull(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer[start]));  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNull(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer[start]));  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( ". ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  end);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length,  end);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer,  end);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end,  buffer.length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
41	[BUG]  [BUGGY]  allowNull(end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNull(end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNull(end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
42	[BUG]  [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
43	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2 ");	  return    0;    if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3. ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    3   ");    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
52	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    3   ");    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ",  end);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    3   ");    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
54	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
58	[BUG]  [BUGGY]  result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(length    ==    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");	  return    0;    if(length    <    2)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end] ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ",  end] ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ",  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ",  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "],  end] ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "],  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "],  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end  [ "+length+ "] ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end  [ "+length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "],  end  [ "+length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length: "  +  length.equals(buffer));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length: "  +  length.equals(buffer));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Unexpected  length: "  +  length.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(length));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "].   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
75	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  end);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "].   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
76	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2 ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ".]   ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "].] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ".]   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
81	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  end);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  length,  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length,  buffer.length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
83	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  offset,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  offset,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  0,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  0,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  end,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  0,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  0,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  0)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  0)  {  return  result;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  0)  {  return  result;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
88	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
89	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3. ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    3   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
91	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
93	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  end);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
96	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end,  length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end,  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
97	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  offset,  end);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  offset,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  offset,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
110	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  length);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
113	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer));  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  end.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
114	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+end+ "] ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+end+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+end+ "] ");	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
115	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer));  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(buffer);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
116	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
117	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer.length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer.length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  	44	None	replace
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+offset+ "] ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+offset+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+offset+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  end);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "]. ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
126	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
127	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  }	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
128	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0. ");	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
129	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  1 ");	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
130	[BUG]  [BUGGY]  result  =  0;  if(end  <  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  0)  {  return  0;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
131	[BUG]  [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
132	[BUG]  [BUGGY]  result  =  0;  if(end  <  length)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  length)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  length)  {  return  0;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
133	[BUG]  [BUGGY]  result  =  0;  if(end  <  2)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  2)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  2)  {  return  0;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
134	[BUG]  [BUGGY]  result  =  0;  if(end  <  end)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  end)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  end)  {  return  0;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
135	[BUG]  [BUGGY]  result  =  0;  if(end  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
136	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+length);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
137	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+offset);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+offset);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+offset);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
138	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+end);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
139	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
141	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+path);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
142	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  String.valueOf(buffer.length));  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  String.valueOf(buffer.length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  String.valueOf(buffer.length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
143	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  getMessage());  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  getMessage());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  getMessage());	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
144	[BUG]  [BUGGY]  result  =  0;  if(length  ==  0)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  0)  {  return  result;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  0)  {  return  result;  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
145	[BUG]  [BUGGY]  result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
146	[BUG]  [BUGGY]  result  =  0;  if(length  ==  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
147	[BUG]  [BUGGY]  result  =  0;  if(length  ==  3)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  3)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  3)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  end  =  offset  +  length;  [CE]  ';'  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  ';'  expected	54	None	replace
153	[BUG]  [BUGGY]  Result  <  =  0  ||  end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Result  <  =  0  ||  end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Result  <  =  0  ||  end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
154	[BUG]  [BUGGY]  allowNull(buffer,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNull(buffer,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNull(buffer,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  	70	None	replace
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Current  end: "  +  buffer.getLength());  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Current  end: "  +  buffer.getLength());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Current  end: "  +  buffer.getLength());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  ';'  expected	41	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer.getMessage());  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer.getMessage());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.length  + "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.length  + "'  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.length  + "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
158	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  + "equals(buffer,  start));  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  + "equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  + "equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
159	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage()  + "'  equals(buffer,  start));  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage()  + "'  equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "' "  +  getMessage()  + "'  equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
160	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
161	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  	32	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3.0 ");  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3.0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3.0 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  	32	None	replace
163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  end  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  end  must  be  at  least  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ ",  end  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   ",    end    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
164	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  	5	None	replace
165	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  	5	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer+ "] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  	5	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
168	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+end+ "] ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+end+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+end+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+end+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "]. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+end+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
171	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
172	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
173	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
174	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "] ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
175	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "]. ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+length+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  end,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  end,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  1,  end);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  1,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
178	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  1;  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  1;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  1;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
180	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
181	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
182	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
183	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
184	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
186	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
190	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
191	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length,  buffer.length);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
192	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  end);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
193	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  end);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length,  end);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
194	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length  -  start);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
195	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  2);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  2);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length,  2);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
196	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length  -  1);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
198	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]. ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
199	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer,  start);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer,  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
200	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  start);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  length,  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    start);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  end,  start);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  end,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] "  +  end,  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    start);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
202	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    start);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
205	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
206	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
209	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
210	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ ",  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
211	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
212	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  start);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
213	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]: ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]: ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
214	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  as  possible ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  as  possible ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  as  possible ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
215	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  for  name ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  for  name ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "]  for  name ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
216	[BUG]  [BUGGY]  allowNull(buffer,  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  allowNull(buffer,  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	allowNull(buffer,  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
217	[BUG]  [BUGGY]  ParchetState.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  ParchetState.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	ParchetState.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
218	[BUG]  [BUGGY]  ParchetUtils.checkState(end  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  ParchetUtils.checkState(end  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	ParchetUtils.checkState(end  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
219	[BUG]  [BUGGY]  ParchetUtils.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  ParchetUtils.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	ParchetUtils.checkState(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
220	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
221	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
222	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  start);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "  +  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
223	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  >  0 ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  >  0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ ",  must  be  >  0 ");	  return    0;    if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
224	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  3.0 ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  3.0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  3.0 ");	  return    0;    if(length    <    2)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
225	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  end.equals(buffer));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  end.equals(buffer));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "' "  +  end.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  end);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  end);	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
227	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "+end+ "] ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "+end+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "+end+ "] ");	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
228	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(length));  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  end.equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(end));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
229	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");	  return    0;    if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
230	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
231	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
232	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
233	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  3 ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
234	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  buffer);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
235	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  result);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  result);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  result);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
236	[BUG]  [BUGGY]  long  start  =  offset  +  length;  if(end  <  0)  {  return  0;  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  long  start  =  offset  +  length;  if(end  <  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	long  start  =  offset  +  length;  if(end  <  0)  {  return  0;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
237	[BUG]  [BUGGY]  result  =  0;  if(end  <  0)  {  return  1;  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  0)  {  return  1;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  0)  {  return  1;  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
238	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
240	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  start);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length  -  start);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
241	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length,  end);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  length,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length,  end);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
242	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length,  0);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  length,  0);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length,  0);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
243	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  0);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length,  0);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
244	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length  +  1);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
245	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  start);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  length,  start);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
246	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    start);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
247	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+end+   "]   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  result);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  result);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  result);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+end+   "]   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
249	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer,  start);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ",  buffer,  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+end+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
250	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
251	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  1 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
252	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  start] ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  start] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  start] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
253	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ",  start);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ",  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "],  end] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0   ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0   ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0   ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
255	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
256	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  start);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
257	[BUG]  [BUGGY]  aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
258	[BUG]  [BUGGY]  aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
259	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  end);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
260	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
261	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  start);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "].   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
262	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  length);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
263	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  end);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]    for    path:   "+start);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
264	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  3 ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    3   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
265	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  3 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    3   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
268	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+length+ "] ");  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ", "+length+ "] ");	  return    0;    return    0;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalStateException( " ");	  return    0;    return    0;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
270	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+buffer+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+buffer+ "  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+buffer+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
271	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ".  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ".  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ ".  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  end  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  start;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  start;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  start;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  start  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  start  =  offset  +  length;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  start  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
276	[BUG]  [BUGGY]  result  =  0;  if(length  <  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  0)  {  return  0;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
277	[BUG]  [BUGGY]  result  =  0;  if(length  ==  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  0)  {  return  0;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
278	[BUG]  [BUGGY]  result  =  0;  if(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
279	[BUG]  [BUGGY]  result  =  0;  if(length  <  =  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  =  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  =  0)  {  return  0;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
280	[BUG]  [BUGGY]  result  =  0;  if(length  <  3)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  3)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  3)  {  return  0;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
281	[BUG]  [BUGGY]  result  =  0;  if(length  >=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  >=  0)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  >=  0)  {  return  0;  }	  return    0;    if(length    <    =    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
282	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
283	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ",  buffer);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
284	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]: ");  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]: ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
285	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "+getPath());  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "+getPath());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "+getPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "  +  buffer.length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "  +  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "]  for  path: "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
287	[BUG]  [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
288	[BUG]  [BUGGY]  Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
289	[BUG]  [BUGGY]  Parchet.checkState(length  <  =  0);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Parchet.checkState(length  <  =  0);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Parchet.checkState(length  <  =  0);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
290	[BUG]  [BUGGY]  aughtInvalidArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidArgumentException( " ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidArgumentException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
291	[BUG]  [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
292	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end  -  start);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
293	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    offset,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
294	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage());  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getMessage());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "' "  +  getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
296	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.getLength());  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.getLength());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  buffer.getLength());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
297	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' ");  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "' ");	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
298	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer.length));  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer.length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(buffer.length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
299	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  buffer.length);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  buffer.length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  buffer.length);	  throw    new    IllegalArgumentException(   "   ".equals(buffer.length));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
300	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
301	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  length);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
302	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  offset,  end);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  offset,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  offset,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
303	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  start,  end);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  start,  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  start,  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ",    end);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
304	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
305	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "  +end] ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "  +end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ ", "  +end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
306	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
307	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  end);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
308	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
309	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]: ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]: ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
310	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ". ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ". ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ". ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ".]   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
311	[BUG]  [BUGGY]  result  =  0;  if(length  ==  3)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  3)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  3)  {  return  0;  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
312	[BUG]  [BUGGY]  result  =  0;  if(length  ==  4)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  4)  {  return  0;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  4)  {  return  0;  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
313	[BUG]  [BUGGY]  result  =  0;  if(length  ==  0)  {  return  1;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  ==  0)  {  return  1;  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  ==  0)  {  return  1;  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  3 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  3 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
317	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
318	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
319	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  start);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  start);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  start);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
320	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getName()  + "'  equals(buffer,  start));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "' "  +  getName()  + "'  equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "' "  +  getName()  + "'  equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
321	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  length));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  length));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
322	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  start  of  buffer: "  +  buffer,  start));  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  start  of  buffer: "  +  buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Invalid  start  of  buffer: "  +  buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
323	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  start));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
324	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  end));  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  end));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  end.equals(buffer,  end));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
325	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer,  end));  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer,  end));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "  +  buffer,  end));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
326	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  start,  length);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  offset,  start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  offset,  start,  length);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
327	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ", ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ", ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
328	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2. ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
329	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
330	[BUG]  [BUGGY]  result  =  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(length    ==    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
331	[BUG]  [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
332	[BUG]  [BUGGY]  aughtInvalidEOFInValue( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidEOFInValue( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidEOFInValue( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
333	[BUG]  [BUGGY]  aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
334	[BUG]  [BUGGY]  aughtInvalidEOF( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtInvalidEOF( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtInvalidEOF( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    length)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    3   ");    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  3 ");  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    3   ");    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
337	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   ".equals(length));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length   ".equals(length));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length   ".equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
338	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
339	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length  ' "+length+ ")  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length  ' "+length+ ")  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length  ' "+length+ ")  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
340	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ ")  <  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
341	[BUG]  [BUGGY]  aughtable  ||(length  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aughtable  ||(length  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aughtable  ||(length  <  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
342	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
343	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
344	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
345	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "+buffer.length+ ", ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "+buffer.length+ ", ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer: "+buffer.length+ ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
346	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+offset+ "] ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+offset+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+offset+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+offset+   "]   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
347	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  less  than  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
348	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   ",    end    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
349	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   ",    end    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
351	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
352	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer,  start));  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    start));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
353	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ",  end] ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ",  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ ",  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ",    end]   ");    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
354	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
355	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ".);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ".);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2 ".);	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
356	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
357	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ ",  end] ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ ",  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ ",  end] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    buffer[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
358	[BUG]  [BUGGY]  result  =  parseOctal(result,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(result,  buffer,  start,  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(result,  buffer,  start,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
359	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  parseOctal(buffer,  start,  length  -  1);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
360	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  length  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ ",  length  must  be  less  than  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ ",  length  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
361	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
362	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ ",  end  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
363	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+length+ "] ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+length+ "] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  offset  byte[ "+length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
364	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2. ");	  return    0;    if(length    <    2)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
365	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ ",'  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
366	[BUG]  [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
367	[BUG]  [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	result  =  0;  if(end  <  0)  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  return    0;    if(end    <    0)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
368	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ",  end] ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
369	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
370	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
371	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  buffer.getMessage());  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  buffer.getMessage());  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  buffer.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
372	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  3 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Long  length "+length+ "  must  be  at  least  2 ");	  return    0;    if(length    <    2)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
374	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  result);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  result);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ",  result);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "].   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
375	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "].] ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "].] ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "].] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   ".]   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
376	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
377	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "));  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "));	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
378	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
379	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
380	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  end));  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  end));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ").equals(buffer,  end));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
381	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  start));  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(buffer,  start));  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " ").equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
382	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  + "==(buffer,  end) ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {      [BUGGY]  throw  new  IllegalArgumentException( " "  + "==(buffer,  end) ");  [BUGGY]      }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	112	112	1	replace	throw  new  IllegalArgumentException( " "  + "==(buffer,  end) ");	  throw    new    IllegalArgumentException(   "   ".equals(buffer,    end));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
