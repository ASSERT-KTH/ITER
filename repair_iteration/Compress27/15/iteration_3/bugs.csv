bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
2	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
3	[BUG]  [BUGGY]  if(length[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ','  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
4	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  ','  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
5	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  buffer[start]!=  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
6	[BUG]  [BUGGY]  if(buffer[start]!=  ','  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  ','  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  ','  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
7	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
8	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
9	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
10	[BUG]  [BUGGY]  bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
11	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
12	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
13	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  0,  buffer.length);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
14	[BUG]  [BUGGY]  if  (length[start]  >=  'e'  ||  length[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  'e'  ||  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  'e'  ||  length[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
15	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  &&  length[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  &&  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'e'  &&  length[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
16	[BUG]  [BUGGY]  if  (length[start]!=  'e'  ||  length[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]!=  'e'  ||  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]!=  'e'  ||  length[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
17	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])buffer.clone();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
18	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])this.start.clone();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])this.start.clone();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])this.start.clone();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
19	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.getBytes();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.getBytes();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.getBytes();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
20	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])length.clone();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '.')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[start]!=  '.')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  'e')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]!=  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[start]!=  'e')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[start]!=  '')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
26	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
27	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
28	[BUG]  [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '.'  ||  length[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
29	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
30	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]!=  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
31	[BUG]  [BUGGY]  byte[]  buffer  =  getEndBuffer();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getEndBuffer();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getEndBuffer();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
32	[BUG]  [BUGGY]  byte[]  buffer  =  getByteBuffer();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getByteBuffer();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getByteBuffer();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
33	[BUG]  [BUGGY]  byte[]  buffer  =  getEnd();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getEnd();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getEnd();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
34	[BUG]  [BUGGY]  byte[]  buffer  =  getByte();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getByte();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getByte();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
35	[BUG]  [BUGGY]  byte[]  buffer  =  getChars();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getChars();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getChars();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
36	[BUG]  [BUGGY]  byte[]  buffer  =  getUpperByte();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getUpperByte();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getUpperByte();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
37	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]!=  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]!=  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]!=  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
38	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
39	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
40	[BUG]  [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
41	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  >=  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  >=  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  >=  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
42	[BUG]  [BUGGY]  if(buffer[start]!=  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
43	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]  >=  'f')  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]  >=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  'a'  &&  buffer[start]  >=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
44	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
45	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
46	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  length)  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
47	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start]  {  '-')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  buffer[start]  {  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
48	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  end  <  buffer[start])  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  end  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'e'  ||  end  <  buffer[start])  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
49	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  >  buffer[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
50	[BUG]  [BUGGY]  if(length[start]  ==  'e'  ||  end  >  buffer[start])  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'e'  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'e'  ||  end  >  buffer[start])  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
51	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  end  >=  buffer[start])  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  end  >=  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'e'  ||  end  >=  buffer[start])  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
52	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  length[start]  {  'E')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  length[start]  {  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  >  length[start]  {  'E')  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
53	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
54	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  <  =  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
55	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
56	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
57	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
58	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
59	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
60	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
61	[BUG]  [BUGGY]  end  =  buffer[start]  +  length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  +  length;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
62	[BUG]  [BUGGY]  end  =  buffer[start]  -  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  -  1;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
63	[BUG]  [BUGGY]  end  =  buffer[offset];  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[offset];  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[offset];	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
64	[BUG]  [BUGGY]  end  =  buffer[start]  +  1;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  +  1;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  +  1;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
65	[BUG]  [BUGGY]  end  =  buffer[start]  &  0xff;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  &  0xff;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  end  =  buffer[start]  &  0xFF;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  0xFF;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  &  0xFF;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
67	[BUG]  [BUGGY]  end  =  buffer[start]  -  offset;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  -  offset;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  -  offset;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
69	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
70	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
71	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
72	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
73	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
74	[BUG]  [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
75	[BUG]  [BUGGY]  if(start  <  length  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  length  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  length  ||  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
76	[BUG]  [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  ||  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]!=  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
78	[BUG]  [BUGGY]  if(end  <  start  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  start  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(end  <  start  ||  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
79	[BUG]  [BUGGY]  if(buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  offset);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  offset);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  offset);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
87	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
88	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start]!=  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
89	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toByteArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.toByteArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.toByteArray();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
90	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])this.end.clone();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])this.end.clone();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])this.end.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
91	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[length]);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[length]);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.toArray(new  byte[length]);	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
92	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getBytes();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getBytes();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getBytes();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
93	[BUG]  [BUGGY]  if  (start  <  length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  length)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  if  (start  <  =  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  =  end)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  if  (start  <  offset  ||  end  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  offset  ||  end  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  offset  ||  end  >  buffer.length)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
96	[BUG]  [BUGGY]  if  (start  >=  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
97	[BUG]  [BUGGY]  if  (start  <  offset)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  offset)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  [Delete]  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	[Delete]	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
99	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
100	[BUG]  [BUGGY]  allowMillis(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowMillis(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowMillis(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
101	[BUG]  [BUGGY]  allowNull(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNull(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNull(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
102	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
103	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aughtExceptionHandler.throwInternal();	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
104	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
105	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  end  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
106	[BUG]  [BUGGY]  if  (buffer[start]  ==  start  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  start  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
107	[BUG]  [BUGGY]  if(buffer[start]!=  end  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  end  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  end  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
108	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  length[start]  <  end)  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    end)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
109	[BUG]  [BUGGY]  if  (length[start]  <  '0'  ||  length[start]  <  =  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  <  '0'  ||  length[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  <  '0'  ||  length[start]  <  =  end)  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    end)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
110	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  <  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  length[start]  <  end)  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    end)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
111	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  =  end)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  length[start]  <  =  end)  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    end)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
112	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.getValue();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.getValue();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.getValue();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
113	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getByte();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getByte();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getByte();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getKey();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getKey();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getKey();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
115	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getLength();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getLength();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getLength();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
116	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
117	[BUG]  [BUGGY]  if(length[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ':'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
118	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
119	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
120	[BUG]  [BUGGY]  if(buffer[start]!=  ':'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  ':'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  ':'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
121	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  &&  buffer[start]  ==  end)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
122	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
123	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  offset)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  offset)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
124	[BUG]  [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  >=  '0'  &&  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
125	[BUG]  [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  ||  end  <  =  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
126	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
127	[BUG]  [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  offset)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  >=  '0'  &&  end  <  =  offset)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
133	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
134	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
135	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
136	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  length[start]  <  =  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
137	[BUG]  [BUGGY]  if  (length[start]  <  '0'  ||  length[start]  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  <  '0'  ||  length[start]  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  <  '0'  ||  length[start]  <  =  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
138	[BUG]  [BUGGY]  if  (length[start]  <  '0'  &&  length[start]  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  <  '0'  &&  length[start]  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  <  '0'  &&  length[start]  <  =  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
139	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start])  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start])  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
140	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  =  buffer[start]  {  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  =  buffer[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  end  <  =  buffer[start]  {  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
141	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  =  buffer[start]  {  '-')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  =  buffer[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  end  <  =  buffer[start]  {  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
142	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start])  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  buffer[start])  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
143	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  length)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  =  length)  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
144	[BUG]  [BUGGY]  if  (length[start]  >=  'n'  ||  length[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  'n'  ||  length[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  'n'  ||  length[start]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
145	[BUG]  [BUGGY]  if  (length[start]!=  'n'  ||  length[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]!=  'n'  ||  length[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]!=  'n'  ||  length[start]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
146	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  length[start]!=  'r')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  length[start]!=  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  length[start]!=  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
147	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  length[start]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
148	[BUG]  [BUGGY]  while(start  <  end)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  while(start  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	while(start  <  end)  {	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
149	[BUG]  [BUGGY]  bucket  <  =  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
150	[BUG]  [BUGGY]  bucket  <  =  end)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  end)  {	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
151	[BUG]  [BUGGY]  bucket  <  =  start)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  start)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  start)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
152	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
154	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]!=  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
155	[BUG]  [BUGGY]  if(buffer[start]!=  '.'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  '.'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  '.'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
156	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  &&  buffer[start]!=  end)  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
157	[BUG]  [BUGGY]  if(start  >=  end  &&  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  &&  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  &&  buffer[start]!=  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
158	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
159	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
160	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
161	[BUG]  [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '.'  ||  length[start]  ==  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
162	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]!=  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
163	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
164	[BUG]  [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
165	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  buffer[start]  ==  length)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
166	[BUG]  [BUGGY]  if(buffer[start]  >=  0  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  >=  0  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  >=  0  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
167	[BUG]  [BUGGY]  if(length[start]  ==  0  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  0  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  0  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
168	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  >  length[start]  {  'r')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  >  length[start]  {  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  end  >  length[start]  {  'r')  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
169	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start])  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  end  >  buffer[start])  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
170	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  end  <  buffer[start])  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  end  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  end  <  buffer[start])  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
171	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start]+length)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start]+length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  end  >  buffer[start]+length)  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
172	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
173	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]!=  'r')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]!=  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]!=  'r')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
174	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
175	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  'e')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]!=  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start]!=  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
176	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
177	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start]  >>  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  end  <  =  buffer[start]  >>  '-')  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
178	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
179	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
180	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
181	[BUG]  [BUGGY]  if(start  <  length  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  length  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  length  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
182	[BUG]  [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
183	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]!=  0)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]!=  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]!=  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
184	[BUG]  [BUGGY]  if(end  <  start  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  start  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(end  <  start  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
185	[BUG]  [BUGGY]  if(start  <  =  length  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  length  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  length  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
186	[BUG]  [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
187	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
188	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
189	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '-'  &&  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
190	[BUG]  [BUGGY]  int  end  =  buffer[start]  +  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  +  length;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
191	[BUG]  [BUGGY]  int  end  =  buffer[start]  -  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  -  1;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  -  1;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
192	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  0xff;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  0xff;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  &  0xff;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
193	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  0xFF;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  0xFF;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  &  0xFF;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
194	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  0x7F;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  0x7F;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  &  0x7F;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
195	[BUG]  [BUGGY]  int  end  =  buffer[offset];  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[offset];  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[offset];	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
196	[BUG]  [BUGGY]  int  end  =  buffer[start  +  1];  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start  +  1];  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start  +  1];	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
197	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  &&  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  &&  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  end  &&  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
198	[BUG]  [BUGGY]  if  (buffer[start]  ==  start  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  start  ||  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
199	[BUG]  [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[start]!=  0)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  end  ||  buffer[start]!=  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  end  ||  buffer[start]!=  0)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
200	[BUG]  [BUGGY]  if  (buffer[start]  >=  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  >=  end)  {	  if    (buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
201	[BUG]  [BUGGY]  if  (length[start]  >=  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  end)  {	  if    (length[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
202	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  ||  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  ||  end  <  length)  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
203	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start  <  end)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start  <  end)  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
204	[BUG]  [BUGGY]  if  (buffer[start]  ==  start  +  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start  +  1)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  start  +  1)  {	  if    (buffer[start]    ==    start)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
205	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
206	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]  ==  end)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
207	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  buffer[start]!=  end)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
208	[BUG]  [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '.'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '.'  ||  length[start]  ==  end)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
209	[BUG]  [BUGGY]  if(buffer[start]!=  '.'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  '.'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  '.'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
210	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  length);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
211	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  end  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  end  +  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  end  +  1);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
212	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  start);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  start);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
213	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  end,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  end,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  end,  length);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
214	[BUG]  [BUGGY]  ((  byte[])start).getChars(0);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
215	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  end  +  2);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  end  +  2);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  end  +  2);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
216	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  >>  '-')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]  >>  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
217	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  >>  '-')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  end  <  buffer[start]  >>  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
218	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
219	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
220	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  end  =  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
221	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
222	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
223	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
224	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
230	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
231	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
232	[BUG]  [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(end  <  =  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
233	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
234	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  'e')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
235	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  >=  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  >=  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
236	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
237	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
238	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
239	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  <  2)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  <  2)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  if(length  <  2)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
240	[BUG]  [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
241	[BUG]  [BUGGY]  bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
242	[BUG]  [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	rackEnd  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
243	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
244	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
245	[BUG]  [BUGGY]  if(buffer[start]  ==  '/'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '/'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '/'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
246	[BUG]  [BUGGY]  if(length[start]  ==  end  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  end  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  end  ||  buffer[start]  ==  end)  {	  if    (length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
247	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
248	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
249	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
250	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
251	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
252	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
253	[BUG]  [BUGGY]  bucket  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
255	[BUG]  [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
256	[BUG]  [BUGGY]  End  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
257	[BUG]  [BUGGY]  bucket  <  length)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  length)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  length)  {  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
258	[BUG]  [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
259	[BUG]  [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  ''  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  ''  &&  buffer[start]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
260	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
261	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
262	[BUG]  [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  length  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
263	[BUG]  [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  =  end  ||  buffer[start]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
264	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[start]!=  ':')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
265	[BUG]  [BUGGY]  if(buffer[start]  ==  '/'  ||  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '/'  ||  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '/'  ||  buffer[start]!=  ':')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    ':')    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
266	[BUG]  [BUGGY]  if(length[start]  ==  ''  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ''  ||  buffer[start]  ==  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
267	[BUG]  [BUGGY]  if(length[start]  ==  '/'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '/'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '/'  ||  buffer[start]  ==  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
268	[BUG]  [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ''  &&  buffer[start]!=  end)  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
269	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  end  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  end  <  =  '9')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
270	[BUG]  [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  >=  '0'  &&  end  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  >=  '0'  &&  end  <  =  '9')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
271	[BUG]  [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  ||  end  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  ||  end  <  =  '9')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
272	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  length)  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
273	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'A'  &&  end  <  =  'Z')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'A'  &&  end  <  =  'Z')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'A'  &&  end  <  =  'Z')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
274	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'z')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'z')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'z')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
275	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
276	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
277	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  ':'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
278	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
279	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]!=  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
280	[BUG]  [BUGGY]  if(buffer[start]!=  ':'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]!=  ':'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]!=  ':'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
281	[BUG]  [BUGGY]  if(length[start]  ==  ':'  ||  length[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ':'  ||  length[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ':'  ||  length[start]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
282	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]!=  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
283	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  ||  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
284	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
285	[BUG]  [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
286	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
287	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  <  length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
288	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  <  offset)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
289	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
290	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  ==  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
291	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer.length)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
292	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  +  length)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  +  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  <  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
293	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  length)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  >=  length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
294	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
295	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  ==  0  ||  buffer[start]  ==  ''  &&  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
296	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]  >=  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  buffer[start]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ''  &&  buffer[start]  >=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
297	[BUG]  [BUGGY]  if(length[start]  ==  '0'  ||  length[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  ||  length[start]  ==  end)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
298	[BUG]  [BUGGY]  if(length[start]  >=  'n'  ||  length[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  >=  'n'  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  >=  'n'  ||  length[start]  ==  end)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
299	[BUG]  [BUGGY]  if(length[start]  ==  'n'  ||  length[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'n'  ||  length[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'n'  ||  length[start]!=  end)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
300	[BUG]  [BUGGY]  if(length[start]  ==  'n'  ||  end[start]  ==  length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'n'  ||  end[start]  ==  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'n'  ||  end[start]  ==  length)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
301	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  buffer.length)  {	  if(length[start]    ==    '0'    &&    end    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
302	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
303	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
304	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
305	[BUG]  [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
306	[BUG]  [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	bucket  =  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
307	[BUG]  [BUGGY]  if  (buffer[start]  ==  length  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  length  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  length  ||  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
308	[BUG]  [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  &&  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
309	[BUG]  [BUGGY]  if(start  <  start  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  start  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  start  ||  buffer[start]  ==  ':')  {	  if(start    <    end    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
310	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getEnd();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getEnd();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getEnd();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
311	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start]!=  'E')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start]!=  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  'e'  &&  buffer[start]!=  'E')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
312	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
313	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
314	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
315	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  null  &&  parent!=  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
316	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  null  &&  parent  ==  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
317	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length  +  1)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
318	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'r')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
319	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  ||  buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
320	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
321	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[end]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
322	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[end]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  buffer[end]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  buffer[end]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
323	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  end  <  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  end  <  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  end  <  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
324	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length  +  1)  {  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
325	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length  +  1)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
326	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length  +  1)  {  if(end  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
327	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  >=  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  start  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  start  >=  end)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
328	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  <  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  start  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  start  <  end)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
329	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  buffer[end]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
330	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
331	[BUG]  [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '9')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '9')    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
332	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  >>  'E')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  >>  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  >>  'E')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
333	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  >>  '-')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  >>  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
334	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  >>  '-')  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  >>  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  >>  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
335	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  &&  end  <  buffer[start]!=  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
336	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
337	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(end  <  0  ||  buffer[start]  ==  '')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
338	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  {  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  {  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  end  <  =  buffer[start]  {  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
339	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  &&  end  <  =  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  &&  end  <  =  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  &&  end  <  =  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
340	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  <  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
341	[BUG]  [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '+'  ||  buffer[start]!=  '-')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '-')    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
342	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
343	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0L  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
344	[BUG]  [BUGGY]  if  (start  <  length  ||  length[start]  ==  'e'  ||  length[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  length  ||  length[start]  ==  'e'  ||  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  length  ||  length[start]  ==  'e'  ||  length[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
345	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  length[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
346	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.toCharArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.toCharArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.toCharArray();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
347	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.getByte();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.getByte();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.getByte();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
348	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.reset();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.reset();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.reset();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
349	[BUG]  [BUGGY]  if  (start  <  buffer[start])  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  buffer[start])  {	  if    (buffer[start]    ==    start)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
350	[BUG]  [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
351	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
352	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
353	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'f')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >  buffer[start]  ==  'a'  &&  end  <  =  'f')  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
354	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  buffer[start]  <  =  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  buffer[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  buffer[start]  <  =  end)  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    end)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
355	[BUG]  [BUGGY]  allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
356	[BUG]  [BUGGY]  allowNegatives(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
357	[BUG]  [BUGGY]  allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
358	[BUG]  [BUGGY]  allowNegatives(0,  start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(0,  start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(0,  start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
359	[BUG]  [BUGGY]  allowMissing(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowMissing(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowMissing(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
360	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  >=  end)  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
361	[BUG]  [BUGGY]  byte[]  buffer  =  getBuffer().toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getBuffer().toByteArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getBuffer().toByteArray();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
362	[BUG]  [BUGGY]  byte[]  buffer  =  getCharset();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getCharset();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getCharset();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
363	[BUG]  [BUGGY]  byte[]  buffer  =  getBuffer(start);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getBuffer(start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getBuffer(start);	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
364	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[start]);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[start]);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.toArray(new  byte[start]);	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
365	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toCharArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.toCharArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.toCharArray();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
366	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start])  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  >  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  >  buffer[start])  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
367	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  ==  'E')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  ==  'E')  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
368	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  buffer[start]!=  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  buffer[start]!=  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  buffer[start]!=  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
369	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  end  <  length)  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
370	[BUG]  [BUGGY]  if(buffer[start]  ==  ''  &&  end  <  =  ':')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ''  &&  end  <  =  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ''  &&  end  <  =  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
371	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  &&  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  'e'  &&  buffer[start]  ==  'E')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
372	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '-'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
373	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  Arrays.copyOf(parent,  start,  end);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  Arrays.copyOf(parent,  start,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  Arrays.copyOf(parent,  start,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
374	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  Arrays.copyOf(buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  Arrays.copyOf(buffer,  start,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  Arrays.copyOf(buffer,  start,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
375	[BUG]  [BUGGY]  parent  ==  (parent  ==  null?  parent.getType()  :  DEFAULT_ENCODING);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null?  parent.getType()  :  DEFAULT_ENCODING);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null?  parent.getType()  :  DEFAULT_ENCODING);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
376	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  0  }  ;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  0  }  ;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  0  }  ;	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
377	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length  +  1];  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length  +  1];  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length  +  1];	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
378	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  1  }  ;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  1  }  ;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(buffer,  start,  buffer,  0,  end):  new  byte[length]  {  1  }  ;	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
379	[BUG]  [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  new  byte[length  +  1];  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  new  byte[length  +  1];  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  (parent  ==  null)?  System.arraycopy(parent,  start,  buffer,  0,  end):  new  byte[length  +  1];	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
380	[BUG]  [BUGGY]  if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
381	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
382	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  'e')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]!=  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]!=  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
383	[BUG]  [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
384	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[end]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[end]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[end]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
385	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  end  >  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  end  >  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  end  >  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
386	[BUG]  [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    '0'    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
387	[BUG]  [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
388	[BUG]  [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
389	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
390	[BUG]  [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
391	[BUG]  [BUGGY]  if(start  <  end  &&  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  &&  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  &&  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
392	[BUG]  [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  >=  end  &&  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  >=  end  &&  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
393	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
394	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start]  >>  'r')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  buffer[start]  >>  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  end  >  buffer[start]  >>  'r')  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
395	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  <  length)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  <  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  end  <  length)  {	  if    (length[start]    ==    'n'    ||    end    >    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
396	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  'e'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
397	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  'n'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
398	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '-'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
399	[BUG]  [BUGGY]  if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
400	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[end]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[end]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[end]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
401	[BUG]  [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  'r')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'n'  ||  end  >  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'n'  ||  end  >  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
402	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  '+')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
403	[BUG]  [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  &&  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
404	[BUG]  [BUGGY]  if(length[start]  ==  'n'  ||  length[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'n'  ||  length[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'n'  ||  length[start]  ==  0)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
405	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  length[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  length[start]  ==  end)  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
406	[BUG]  [BUGGY]  if(length[start]  ==  'n'  ||  length[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'n'  ||  length[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'n'  ||  length[start]  ==  '-')  {	  if(length[start]    ==    'n'    ||    length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
407	[BUG]  [BUGGY]  if  (start  <  offset  ||  end  >  buffer.length  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  offset  ||  end  >  buffer.length  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  offset  ||  end  >  buffer.length  ||  buffer[start]  ==  0)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
408	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
409	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
410	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  end  <  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
411	[BUG]  [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  >=  end  ||  buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
412	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  buffer[start]  ==  'E')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
413	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
414	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]  ==  ',')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
415	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]  ==  '/')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
416	[BUG]  [BUGGY]  int  end  =  buffer[start]  -  start;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  -  start;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
417	[BUG]  [BUGGY]  int  end  =  buffer[start]  &  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  int  end  =  buffer[start]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	int  end  =  buffer[start]  &  BYTE_MASK;	  int    end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	21	None	replace
418	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[end]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[end]  ==  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
419	[BUG]  [BUGGY]  allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
420	[BUG]  [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end;  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
421	[BUG]  [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  ==  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
422	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
423	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
424	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  end  -  start);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  end  -  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  end  -  start);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
425	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  start  +  end);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  start  +  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  start  +  end);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
426	[BUG]  [BUGGY]  ((  byte[])end).getChars(0,  start);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])end).getChars(0,  start);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])end).getChars(0,  start);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
427	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[offset]  ==  ''  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[offset]  ==  ''  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[offset]  ==  ''  ||  buffer[start]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
428	[BUG]  [BUGGY]  if  (start  <  end  ||  buffer[start]!=  ''  &&  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (start  <  end  ||  buffer[start]!=  ''  &&  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (start  <  end  ||  buffer[start]!=  ''  &&  buffer[start]  ==  '-')  {	  if    (start    <    end    ||    buffer[start]    ==    ''    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
429	[BUG]  [BUGGY]  rack  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rack  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	rack  =  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
430	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  end,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
431	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
432	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
433	[BUG]  [BUGGY]  if  (length[start]  ==  end  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  end  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  end  ||  buffer[start]  ==  0)  {	  if    (length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
434	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  end  >  buffer[start]  >>  'E')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  end  >  buffer[start]  >>  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'e'  ||  end  >  buffer[start]  >>  'E')  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
435	[BUG]  [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  >  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '-'  ||  end  >  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '-'  ||  end  >  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
436	[BUG]  [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  >  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '0'  &&  end  >  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '0'  &&  end  >  buffer[start]  ==  '-')  {	  if    (buffer[start]    ==    ''    &&    end    >    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
437	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  ==  '9')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]  ==  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  length[start]  ==  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
438	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]!=  '9')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  &&  length[start]!=  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  &&  length[start]!=  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
439	[BUG]  [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  >=  '9')  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '0'  &&  length[start]  >=  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '0'  &&  length[start]  >=  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
440	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  start,  buffer,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
441	[BUG]  [BUGGY]  end  =  buffer[start]  -  start;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  -  start;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  -  start;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
442	[BUG]  [BUGGY]  end  =  buffer[start]  &  0x7F;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  0x7F;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  &  0x7F;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
443	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
444	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  'n')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  'n')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  'n')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
445	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '/')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '/')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '/')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
446	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '>')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '>')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '>')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
447	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
448	[BUG]  [BUGGY]  if(length[start]  ==  'n'  ||  end]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'n'  ||  end]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'n'  ||  end]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
449	[BUG]  [BUGGY]  if  (length[start]  ==  '.'  ||  length[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  '.'  ||  length[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  '.'  ||  length[start]  ==  'r')  {	  if    (length[start]    ==    'n'    ||    length[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
450	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '.')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '.')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  '.')  {	  if(length    <    =    0    ||    buffer[start]    ==    '')    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
451	[BUG]  [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
452	[BUG]  [BUGGY]  allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
453	[BUG]  [BUGGY]  allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
454	[BUG]  [BUGGY]  allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
455	[BUG]  [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
456	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  &&  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    ''    &&    buffer[start]    ==    'e')    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
457	[BUG]  [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
458	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
459	[BUG]  [BUGGY]  if(length[start]  ==  ':'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  ':'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  ':'  ||  buffer[start]  ==  ':')  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
460	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  =  length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  =  length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  end  <  =  length)  {	  if(length[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
461	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  '+')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]!=  '+')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '-'  ||  buffer[start]!=  '+')  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    '')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
462	[BUG]  [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
463	[BUG]  [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
464	[BUG]  [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  offset  ||  end  >  buffer.length  ||  start  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (start    <    end)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
465	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.toByteArray();  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])start.toByteArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])start.toByteArray();	  byte[]    buffer    =(byte[])start.clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
466	[BUG]  [BUGGY]  if  (buffer[start]  ==  start  &&  buffer[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start  &&  buffer[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  start  &&  buffer[start]  ==  end)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
467	[BUG]  [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  end)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '+'  ||  buffer[start]!=  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '+'  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    ''    &&    buffer[start]!=    end)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
468	[BUG]  [BUGGY]  if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    'a'    &&    buffer[start]!=    'f')    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
469	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  '9')  {	  if    (buffer[start]    ==    ''    &&    end    <    buffer[start]    >>    '-')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
470	[BUG]  [BUGGY]  parent.replaceChild(buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.replaceChild(buffer,  start,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.replaceChild(buffer,  start,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
471	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  =  parent.getParent();	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
472	[BUG]  [BUGGY]  parent  =  parent.replace('n',  'r');  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  =  parent.replace('n',  'r');  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  =  parent.replace('n',  'r');	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
473	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  [Delete]  while(start  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	[Delete]  while(start  <  end)  {	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
474	[BUG]  [BUGGY]  parent.replaceChild(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.replaceChild(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.replaceChild(buffer,  start,  buffer,  0,  end);	  if(start    <    end)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
475	[BUG]  [BUGGY]  if(buffer[start]  ==  '/'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '/'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '/'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]!=    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
476	[BUG]  [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  ',')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ':'  ||  buffer[start]  ==  ',')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ':'  ||  buffer[start]  ==  ',')  {	  if(buffer[start]    ==    ':'    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
477	[BUG]  [BUGGY]  parent.parse(buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.parse(buffer,  start,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.parse(buffer,  start,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
478	[BUG]  [BUGGY]  parent.parse(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.parse(buffer,  start,  buffer,  0,  end);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.parse(buffer,  start,  buffer,  0,  end);	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
479	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  ||  buffer[start]  ==  'e')  {	  if    (buffer[start]    ==    'e'    ||    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
480	[BUG]  [BUGGY]  if(length[start]  ==  'e'  ||  end]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  'e'  ||  end]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  'e'  ||  end]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    length[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
481	[BUG]  [BUGGY]  byte[]  buffer  =  getByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =  getByteArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =  getByteArray();	  byte[]    buffer    =    getBuffer();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
482	[BUG]  [BUGGY]  if(start  <  start  ||  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  start  ||  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  start  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
483	[BUG]  [BUGGY]  end  =  buffer[start]  &  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  end  =  buffer[start]  &  BYTE_MASK;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	end  =  buffer[start]  &  BYTE_MASK;	  end    =    buffer[start];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
484	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getData();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.getData();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.getData();	  byte[]    buffer    =(byte[])end.getValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
485	[BUG]  [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '-'  ||  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '-'  ||  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    ''    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
486	[BUG]  [BUGGY]  if  (length[start]  ==  end  ||  length[start]  ==  end)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  end  ||  length[start]  ==  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  end  ||  length[start]  ==  end)  {	  if    (length[start]    ==    end)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
487	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
488	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
489	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aught(new  IllegalArgumentException( "Length   "+length+ ")  <  =  0))  throw  new  IllegalArgumentException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
490	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
491	[BUG]  [BUGGY]  [Delete]  while(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  [Delete]  while(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	[Delete]  while(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
492	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ".toString());  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ".toString());  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	aught(new  IllegalArgumentException( " ").toString())  {  throw  new  IllegalArgumentException( " ".toString());  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
493	[BUG]  [BUGGY]  if  (length[start]  ==  'e'  ||  length  >  buffer[start]  ==  'E')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  ==  'e'  ||  length  >  buffer[start]  ==  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  ==  'e'  ||  length  >  buffer[start]  ==  'E')  {	  if    (length[start]    ==    'e'    ||    end    >    buffer[start]    ==    'E')    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
494	[BUG]  [BUGGY]  if(length  <  =  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0)  {	  if    (length[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
495	[BUG]  [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'r')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'r')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  '.'  ||  buffer[start]  ==  'r')  {	  if    (buffer[start]    ==    'n'    ||    buffer[start]    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
496	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer.length  <  end)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  buffer.length  <  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  buffer.length  <  end)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
497	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  buffer.length)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  0  ||  end  <  =  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
498	[BUG]  [BUGGY]  if  (buffer[start]  ==  start  &&  buffer[start]  ==  0)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  start  &&  buffer[start]  ==  0)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  start  &&  buffer[start]  ==  0)  {	  if    (buffer[start]    ==    end    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
499	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toArray();  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  byte[]  buffer  =(byte[])end.toArray();  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	byte[]  buffer  =(byte[])end.toArray();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
500	[BUG]  [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  =  buffer[start]  {  'E')  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'e'  ||  end  <  =  buffer[start]  {  'E')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'e'  ||  end  <  =  buffer[start]  {  'E')  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
501	[BUG]  [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  =  buffer[start])  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '.'  &&  end  <  =  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '.'  &&  end  <  =  buffer[start])  {	  if    (buffer[start]    ==    ''    &&    end    <    =    buffer[start]    {    '-')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
502	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  ':')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  <  =  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
503	[BUG]  [BUGGY]  if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  &&  buffer[start]  ==  '0'  &&  buffer[start]  ==  ':')  {	  if(buffer[start]    ==    '0'    &&    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
504	[BUG]  [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  end  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
505	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length  <  =  0  ||  buffer[start]  ==  '.'  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    ==    '.'    ||    buffer[start]    ==    '-')    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
506	[BUG]  [BUGGY]  if  (length[start]  >=  '0'  ||  length[start]  <  =  '9')  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (length[start]  >=  '0'  ||  length[start]  <  =  '9')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (length[start]  >=  '0'  ||  length[start]  <  =  '9')  {	  if    (length[start]    ==    '0'    &&    length[start]    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
507	[BUG]  [BUGGY]  if(buffer[start]  ==  ','  ||  end]  ==  ':')  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  ','  ||  end]  ==  ':')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  ','  ||  end]  ==  ':')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
508	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  'f')  {	  if(buffer[start]    ==    ','    ||    buffer[start]    ==    ':')    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
509	[BUG]  [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  <  =  end)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  ''  &&  buffer[start]  <  =  end)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  ''  &&  buffer[start]  <  =  end)  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
510	[BUG]  [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  <  buffer[start])  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if  (buffer[start]  ==  'n'  ||  end  <  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if  (buffer[start]  ==  'n'  ||  end  <  buffer[start])  {	  if    (buffer[start]    ==    ''    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
511	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  length  >  buffer[start]spans  -  1)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  length  >  buffer[start]spans  -  1)  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  length  >  buffer[start]spans  -  1)  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
512	[BUG]  [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >=  buffer[start])  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >=  buffer[start])  {  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(length[start]  ==  '0'  &&  end  <  =  '9'  ||  end  >=  buffer[start])  {	  if(length[start]    ==    '0'    &&    end    <    =    '9')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
513	[BUG]  [BUGGY]  ((  byte[])start).getChars(0,  end  +  1,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  ((  byte[])start).getChars(0,  end  +  1,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	((  byte[])start).getChars(0,  end  +  1,  length);	  ((    byte[])start).getChars(0,    end);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
514	[BUG]  [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
515	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
516	[BUG]  [BUGGY]  if(start  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
517	[BUG]  [BUGGY]  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
518	[BUG]  [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	End  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  1;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
519	[BUG]  [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
520	[BUG]  [BUGGY]  allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
521	[BUG]  [BUGGY]  allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNonArray(length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
522	[BUG]  [BUGGY]  allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length)  {  if(end  <  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
523	[BUG]  [BUGGY]  allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	allowNegatives(length)  {  if(end  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
524	[BUG]  [BUGGY]  if(start  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  if(start  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	if(start  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  }	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
525	[BUG]  [BUGGY]  rack.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  rack.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	rack.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  if(end    <    =    0)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    end    =    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
526	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
527	[BUG]  [BUGGY]  parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
528	[BUG]  [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
529	[BUG]  [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
530	[BUG]  [BUGGY]  parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent  =  parent.getParent();  if(parent!=  null)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
531	[BUG]  [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){      [BUGGY]  parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0  [BUGGY]      start++;  }  else  {  break;  }  }      [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4472135954999579	117	117	1	replace	parent.replaceChild(buffer,  start,  end);  if(end  <  length)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  else  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0	  if(end    <    length)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    else    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
