bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  start  =  end  *  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  *  2;	  start    =    end    *    1;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
2	[BUG]  [BUGGY]  start  =  length  *  1;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  *  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  *  1;	  start    =    end    *    1;    	non-compiled	[CE]  	97	None	replace
3	[BUG]  [BUGGY]  start  =  length  /  1;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  /  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  /  1;	  start    =    end    *    1;    	non-compiled	[CE]  	97	None	replace
4	[BUG]  [BUGGY]  start  =  offset  *  1;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  offset  *  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  offset  *  1;	  start    =    end    *    1;    	non-compiled	[CE]  	97	None	replace
5	[BUG]  [BUGGY]  start  >  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  >  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  >  end)  {  start++;  }	  if(end    >    start)    {    start++;    }    	non-compiled	[CE]  	80	None	replace
6	[BUG]  [BUGGY]  start  =  end  >  0)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  >  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  >  0)  {  start++;  }	  if(end    >    start)    {    start++;    }    	non-compiled	[CE]  	80	None	replace
7	[BUG]  [BUGGY]  if(end  <  =  start)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  start)  {  start++;  }	  if(end    >    start)    {    start++;    }    	non-compiled	[CE]  	80	None	replace
8	[BUG]  [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
9	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
10	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
11	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
12	[BUG]  [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	60	None	replace
13	[BUG]  [BUGGY]  if(length  <  =  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(length  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  <  =  end)  {  start++;  }	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  	135	None	replace
14	[BUG]  [BUGGY]  start  =(end  <  =  length)?  start++  :  end;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =(end  <  =  length)?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =(end  <  =  length)?  start++  :  end;	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  	135	None	replace
15	[BUG]  [BUGGY]  start  =(length  <  =  1)?  start  :  end;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =(length  <  =  1)?  start  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =(length  <  =  1)?  start  :  end;	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  	135	None	replace
16	[BUG]  [BUGGY]  start  =(end  <  =  0)?  start++  :  end;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =(end  <  =  0)?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =(end  <  =  0)?  start++  :  end;	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  	135	None	replace
17	[BUG]  [BUGGY]  start  =(end  <  =  0)?  start  :  end;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =(end  <  =  0)?  start  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =(end  <  =  0)?  start  :  end;	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  	135	None	replace
18	[BUG]  [BUGGY]  start  =  offset  +  1;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  offset  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  offset  +  1;	  start    =    length    +    1;    	non-compiled	[CE]  	22	None	replace
19	[BUG]  [BUGGY]  start  =  buffer.length  +  1;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer.length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer.length  +  1;	  start    =    length    +    1;    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  end  =  length  +  1;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  +  1;	  start    =    length    +    1;    	non-compiled	[CE]  	22	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  	125	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  	125	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  2);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  2);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  2);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  offset,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  offset,  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
26	[BUG]  [BUGGY]  start  =  end  /  1L;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  1L;	  start    =    end    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  start  =  end  -  1L  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  -  1L  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  1L  +  1;	  start    =    end    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  start  =  length  -  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  1L;	  start    =    end    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  start  =  end  -  1l;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  -  1l;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  1l;	  start    =    end    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
31	[BUG]  [BUGGY]  allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	79	None	replace
32	[BUG]  [BUGGY]  allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
33	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
34	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	34	None	replace
35	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	34	None	replace
36	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
38	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >=  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >=  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  if(start  >=  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  1;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
43	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
44	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
45	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
46	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
47	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
48	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  end  =  length  -  start)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  -  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  -  start)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  	68	None	replace
51	[BUG]  [BUGGY]  end  =  length  >  buffer.length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  >  buffer.length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  buffer.length)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
52	[BUG]  [BUGGY]  end  =  offset  >  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  offset  >  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  offset  >  start)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
53	[BUG]  [BUGGY]  end  =  start  >  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  start  >  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  start  >  length)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
54	[BUG]  [BUGGY]  end  =  length  +  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  +  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  +  start)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
55	[BUG]  [BUGGY]  end  =  length  +  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  +  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  +  1)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
56	[BUG]  [BUGGY]  end  =  length  /  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  /  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  /  start)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
61	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  length;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
62	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  1;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
63	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  2;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
64	[BUG]  [BUGGY]  end  =  buffer[end  -  2];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  2];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  2];	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
65	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  1L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  1L;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
66	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  trailer;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  trailer;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  trailer;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
67	[BUG]  [BUGGY]  start  <  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  <  end)  {  start++;  }	  if(end    <    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
68	[BUG]  [BUGGY]  if(start  <  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  end)  {  start++;  }	  if(end    <    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
69	[BUG]  [BUGGY]  start  =  length  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  1)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
70	[BUG]  [BUGGY]  start  =  length  /  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  /  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  /  0)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
71	[BUG]  [BUGGY]  start  =  length  -  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  0)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
72	[BUG]  [BUGGY]  start  =  length  >  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  1)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
73	[BUG]  [BUGGY]  start  =  length  >  2)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  2)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  trailer.length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  trailer.length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  trailer.length);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  trailer,  length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  trailer,  length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  trailer,  length);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length  +  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
80	[BUG]  [BUGGY]  start  +=  end  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  +  1;	  start    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
81	[BUG]  [BUGGY]  start  +=  length  /  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  /  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  /  1;	  start    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
82	[BUG]  [BUGGY]  end  +=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  length  +  1;	  start    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
83	[BUG]  [BUGGY]  start  -=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  +  1;	  start    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
84	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
85	[BUG]  [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
86	[BUG]  [BUGGY]  ||(end  <  end  -  1))  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  <  end  -  1))  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  <  end  -  1))  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
87	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
88	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
89	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
90	[BUG]  [BUGGY]  end  =  buffer[start++]  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  +  1;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
91	[BUG]  [BUGGY]  end  =  buffer[end++];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end++];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end++];	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
92	[BUG]  [BUGGY]  end  =  buffer[start++]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  &  0xff;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  &  0xff;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
93	[BUG]  [BUGGY]  end  =  buffer[start++]  -  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  -  1;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
94	[BUG]  [BUGGY]  end  =  buffer[start++]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  &  0xfff;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  &  0xfff;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
95	[BUG]  [BUGGY]  end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
96	[BUG]  [BUGGY]  start  =  end  /  1  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  1  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  1  +  1;	  start    =    end    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  start  =  length  -  1  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  1  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  1  +  1;	  start    =    end    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);	  bucket    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;	  bucket    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
100	[BUG]  [BUGGY]  end  =  buffer[end  +  1];  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  +  1];	  end    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
101	[BUG]  [BUGGY]  end  =  end  -  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  end  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  end  -  1;	  end    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
102	[BUG]  [BUGGY]  end  =  start  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  start  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  start  +  1;	  end    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
103	[BUG]  [BUGGY]  end  =  end  +  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  end  +  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  end  +  1L;	  end    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  2);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  2);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  2);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
109	[BUG]  [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
110	[BUG]  [BUGGY]  parent!=  ((  byte[])start).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent!=  ((  byte[])start).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])start).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
111	[BUG]  [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
112	[BUG]  [BUGGY]  parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
113	[BUG]  [BUGGY]  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
114	[BUG]  [BUGGY]  parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent  ==  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
115	[BUG]  [BUGGY]  start  =  length  >  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  end)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
116	[BUG]  [BUGGY]  start  =  length  >  buffer.length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  buffer.length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  buffer.length)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
117	[BUG]  [BUGGY]  start  =  length  -  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  start)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
118	[BUG]  [BUGGY]  start  =  length  >  buffer[start])  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  buffer[start])  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  buffer[start])  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
119	[BUG]  [BUGGY]  start  =  length  +  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  +  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  +  1)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
120	[BUG]  [BUGGY]  start  =  end  >  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  >  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  >  length)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
121	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
122	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	44	None	replace
123	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	44	None	replace
124	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	44	None	replace
125	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	44	None	replace
126	[BUG]  [BUGGY]  start  +=  end  +  2;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  +  2;	  start    +=    length    +    2;    	non-compiled	[CE]  	99	None	replace
127	[BUG]  [BUGGY]  start  -=  length  +  2;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  +  2;	  start    +=    length    +    2;    	non-compiled	[CE]  	99	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  	27	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  	27	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  	27	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  	27	None	replace
132	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	117	None	replace
133	[BUG]  [BUGGY]  while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	117	None	replace
134	[BUG]  [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	117	None	replace
135	[BUG]  [BUGGY]  while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	117	None	replace
136	[BUG]  [BUGGY]  while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	117	None	replace
137	[BUG]  [BUGGY]  while(end  <  =  0)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  	107	None	replace
138	[BUG]  [BUGGY]  ||  end  <  =  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  =  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  =  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
139	[BUG]  [BUGGY]  ||  end  <  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
140	[BUG]  [BUGGY]  if(end  <  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
141	[BUG]  [BUGGY]  while(end  <  0)  {  start++;  }  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  	107	None	replace
142	[BUG]  [BUGGY]  while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
143	[BUG]  [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	114	None	replace
144	[BUG]  [BUGGY]  while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
145	[BUG]  [BUGGY]  while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
146	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	75	None	replace
147	[BUG]  [BUGGY]  final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	75	None	replace
148	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	75	None	replace
149	[BUG]  [BUGGY]  End  <  =  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	75	None	replace
150	[BUG]  [BUGGY]  cast(buffer,  0,  end  -  1)  {  break;  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  0,  end  -  1)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  0,  end  -  1)  {  break;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  	87	None	replace
151	[BUG]  [BUGGY]  result(buffer,  0,  end  -  1)  {  start++;  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  result(buffer,  0,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	result(buffer,  0,  end  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  	87	None	replace
152	[BUG]  [BUGGY]  cast(start,  0,  end  -  1)  {  buffer[start++];  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  0,  end  -  1)  {  buffer[start++];  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  0,  end  -  1)  {  buffer[start++];  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  	87	None	replace
153	[BUG]  [BUGGY]  cast(buffer,  0,  start  -  1)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  0,  start  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  0,  start  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  	87	None	replace
154	[BUG]  [BUGGY]  while(end  <  =  end)  {  start++;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  end)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  end)  {  start++;	  while(end    <    end)    {    start++;    	non-compiled	[CE]  	8	None	replace
155	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;	  while(end    <    end)    {    start++;    	non-compiled	[CE]  	8	None	replace
156	[BUG]  [BUGGY]  while(end  <  start)  {  start++;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  start)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  start)  {  start++;	  while(end    <    end)    {    start++;    	non-compiled	[CE]  	8	None	replace
157	[BUG]  [BUGGY]  while(end  <  len)  {  start++;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  len)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  len)  {  start++;	  while(end    <    end)    {    start++;    	non-compiled	[CE]  	8	None	replace
158	[BUG]  [BUGGY]  ||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	65	None	replace
159	[BUG]  [BUGGY]  ||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	65	None	replace
160	[BUG]  [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
161	[BUG]  [BUGGY]  ||  start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
162	[BUG]  [BUGGY]  ||  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
167	[BUG]  [BUGGY]  end  =  start  >  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  start  >  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  start  >  end)  {  start++;  }	  if(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  while(end  >  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  start)  {  start++;  }	  if(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
169	[BUG]  [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
170	[BUG]  [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
171	[BUG]  [BUGGY]  ensureLength(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ensureLength(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	ensureLength(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
172	[BUG]  [BUGGY]  allowNegatedByte)  {  start++;  }  else  if(length  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatedByte)  {  start++;  }  else  if(length  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte)  {  start++;  }  else  if(length  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
173	[BUG]  [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
174	[BUG]  [BUGGY]  allowNegatedByte)  {  start++;  }  else  if(length  >  buffer[start])  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatedByte)  {  start++;  }  else  if(length  >  buffer[start])  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte)  {  start++;  }  else  if(length  >  buffer[start])  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
175	[BUG]  [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
176	[BUG]  [BUGGY]  start  +=  end  -  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  -  2;	  start    +=    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
177	[BUG]  [BUGGY]  start  +=  end  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  -  1;	  start    +=    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
178	[BUG]  [BUGGY]  start  -=  length  -  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  -  2;	  start    +=    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
179	[BUG]  [BUGGY]  start  =  end  /  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  2;	  start    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  start  =  length  -  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  2;	  start    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
181	[BUG]  [BUGGY]  start  =  end  -  2  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  -  2  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  2  +  1;	  start    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
183	[BUG]  [BUGGY]  while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
184	[BUG]  [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
185	[BUG]  [BUGGY]  start  -=  end;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  end;	  start    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
186	[BUG]  [BUGGY]  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  -=  length;	  start    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
187	[BUG]  [BUGGY]  start  -=  length  -  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  -  1;	  start    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
188	[BUG]  [BUGGY]  start  =  end  +  1l  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  +  1l  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1l  -  1;	  start    =    end    +    1l;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
189	[BUG]  [BUGGY]  start  =  end  /  1l;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  1l;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  1l;	  start    =    end    +    1l;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
190	[BUG]  [BUGGY]  start  =  end  /  3;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  3;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  3;	  start    =    end    /    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
191	[BUG]  [BUGGY]  allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start  +  1)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
192	[BUG]  [BUGGY]  allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(end  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
193	[BUG]  [BUGGY]  while(start  <  end)  {  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
194	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  +  1];  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  +  1];	  byte    trailer    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
195	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  *  2];  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  *  2];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  *  2];	  byte    trailer    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
196	[BUG]  [BUGGY]  start  +=  end  /  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  /  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  /  2;	  start    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
197	[BUG]  [BUGGY]  start  +=  length  /  2  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  /  2  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  /  2  +  1;	  start    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
198	[BUG]  [BUGGY]  end  +=  start;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  start;	  start    +=    end;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
199	[BUG]  [BUGGY]  start  +=  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  1;	  start    +=    end;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
200	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
201	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
202	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
203	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
204	[BUG]  [BUGGY]  while(start  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(start    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	116	None	replace
205	[BUG]  [BUGGY]  while(start  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(start    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	116	None	replace
206	[BUG]  [BUGGY]  while(end  <  =  length)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  length)  {  start++;  }	  while(end    <    length)    {    start++;    }    	non-compiled	[CE]  	7	None	replace
207	[BUG]  [BUGGY]  while(end  <  offset)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  offset)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  offset)  {  start++;  }	  while(end    <    length)    {    start++;    }    	non-compiled	[CE]  	7	None	replace
208	[BUG]  [BUGGY]  while(end  <  start)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  start)  {  start++;  }	  while(end    <    length)    {    start++;    }    	non-compiled	[CE]  	7	None	replace
209	[BUG]  [BUGGY]  while(end  <  len)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  len)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  len)  {  start++;  }	  while(end    <    length)    {    start++;    }    	non-compiled	[CE]  	7	None	replace
210	[BUG]  [BUGGY]  byte  trailer  =  buffer[start  -  1]  +  length;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[start  -  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[start  -  1]  +  length;	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  	23	None	replace
211	[BUG]  [BUGGY]  byte  trailer  =  end[start  -  1];  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  end[start  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  end[start  -  1];	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  	23	None	replace
212	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
213	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
214	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
215	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0L;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0L;	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
216	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  1);  return  0;	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
217	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  2);  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  2);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length  -  2);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  	46	None	replace
218	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  	110	None	replace
219	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  	110	None	replace
220	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  	110	None	replace
221	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  	110	None	replace
222	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  	110	None	replace
223	[BUG]  [BUGGY]  while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	115	None	replace
224	[BUG]  [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	115	None	replace
225	[BUG]  [BUGGY]  while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	115	None	replace
226	[BUG]  [BUGGY]  allowMissing(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowMissing(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowMissing(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowMissing(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	78	None	replace
227	[BUG]  [BUGGY]  allowMissing(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowMissing(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowMissing(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowMissing(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	78	None	replace
228	[BUG]  [BUGGY]  start  +=  length  -  1L;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  -  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  -  1L;	  start    +=    length    -    1;    	non-compiled	[CE]  	36	None	replace
229	[BUG]  [BUGGY]  end  +=  length  -  1;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  length  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  length  -  1;	  start    +=    length    -    1;    	non-compiled	[CE]  	36	None	replace
230	[BUG]  [BUGGY]  while(end  <  =  length)  {  start++;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  length)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  length)  {  start++;	  while(end    <    length)    {    start++;    	non-compiled	[CE]  	6	None	replace
231	[BUG]  [BUGGY]  while(end  <  offset)  {  start++;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  offset)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  offset)  {  start++;	  while(end    <    length)    {    start++;    	non-compiled	[CE]  	6	None	replace
232	[BUG]  [BUGGY]  start  +=  end  *  2;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  end  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end  *  2;	  start    +=    length    *    2;    	non-compiled	[CE]  	40	None	replace
233	[BUG]  [BUGGY]  start  +=  length  *  2  +  1;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  *  2  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  *  2  +  1;	  start    +=    length    *    2;    	non-compiled	[CE]  	40	None	replace
234	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
235	[BUG]  [BUGGY]  End  <  =  length)  {  end++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  end++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  end++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
236	[BUG]  [BUGGY]  End  <  =  offset)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  offset)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  offset)  {  start++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
237	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
238	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
239	[BUG]  [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	121	None	replace
240	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
241	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
242	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	29	None	replace
243	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
244	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
245	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Offset  of  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  [FE]                                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Offset  of  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Offset  of  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	29	None	replace
246	[BUG]  [BUGGY]  Bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  Bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	Bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	14	None	replace
247	[BUG]  [BUGGY]  while(end  >  length)  {  start++;  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
248	[BUG]  [BUGGY]  while(start  <  length)  {  start++;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  length)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  length)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
249	[BUG]  [BUGGY]  while(start  >  end)  {  start++;  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >  end)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >  end)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
250	[BUG]  [BUGGY]  while(start  >=  end)  {  start++;  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  end)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  end)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
251	[BUG]  [BUGGY]  while(start  >=  length)  {  start++;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  length)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  length)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
252	[BUG]  [BUGGY]  while(end  >  length)  {  end++;  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  end++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  end++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  	73	None	replace
253	[BUG]  [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	101	None	replace
254	[BUG]  [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	101	None	replace
255	[BUG]  [BUGGY]  ||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  offset)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	67	None	replace
256	[BUG]  [BUGGY]  ||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	67	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  	129	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end  +  length);  end  +=  length;  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end  +  length);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end  +  length);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  	129	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  +=  length;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  	129	None	replace
260	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  +=  length;  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  loader,  length);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  	129	None	replace
261	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
262	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
263	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start,  length);  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1,  length);  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  +  1,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  buffer[start  -  start]);  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  buffer[start  -  start]);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  buffer[start  -  start]);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  	95	None	replace
267	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  &  0xffff;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  &  0xffff;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  &  0xffff;	  end    =    buffer[start    +    1];    	non-compiled	[CE]  	54	None	replace
268	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  &  0x7F;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  &  0x7F;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  &  0x7F;	  end    =    buffer[start    +    1];    	non-compiled	[CE]  	54	None	replace
269	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  &  0xfff;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  &  0xfff;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  &  0xfff;	  end    =    buffer[start    +    1];    	non-compiled	[CE]  	54	None	replace
270	[BUG]  [BUGGY]  end  =  buffer.length  -  1L;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length  -  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  -  1L;	  end    =    buffer.length    -    1;    	non-compiled	[CE]  	132	None	replace
271	[BUG]  [BUGGY]  end  =  buffer.length  -  2;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  -  2;	  end    =    buffer.length    -    1;    	non-compiled	[CE]  	132	None	replace
272	[BUG]  [BUGGY]  end  =  buffer.length  -  1  +  1;  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length  -  1  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  -  1  +  1;	  end    =    buffer.length    -    1;    	non-compiled	[CE]  	132	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  length;  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  trailer,  0,  length);  end  -=  length;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  trailer,  0,  length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  trailer,  0,  length);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  trailer.length);  end  -=  length;  [CE]  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  trailer.length);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  trailer.length);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  size);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  1;  [CE]  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  1;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
279	[BUG]  [BUGGY]  start  =  end  -  3;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  -  3;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  3;	  start    =    end    +    3;    	non-compiled	[CE]  	21	None	replace
280	[BUG]  [BUGGY]  start  =  end  *  3;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  *  3;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  *  3;	  start    =    end    +    3;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
281	[BUG]  [BUGGY]  end  =  start  >  length?  start++  :  end;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  start  >  length?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  start  >  length?  start++  :  end;	  if(start    >    length)    {    start++;    }    	non-compiled	[CE]  	85	None	replace
282	[BUG]  [BUGGY]  while(start  <  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  length)  {  start++;  }	  if(start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
283	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
284	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
285	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
286	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end));  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
287	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  1));  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length  -  1));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  1));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
288	[BUG]  [BUGGY]  cast(buffer,  end  +  1,  length));  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  end  +  1,  length));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  end  +  1,  length));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
289	[BUG]  [BUGGY]  setLength(buffer,  start  +  1,  length));  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  setLength(buffer,  start  +  1,  length));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	setLength(buffer,  start  +  1,  length));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
290	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length,  end));  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length,  end));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length,  end));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
291	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  offset));  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length  -  offset));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  offset));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
292	[BUG]  [BUGGY]  setLength(buffer,  start  +  1,  end  -  1);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  setLength(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	setLength(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  	90	None	replace
293	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end  -  2);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end  -  2);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end  -  2);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  	90	None	replace
294	[BUG]  [BUGGY]  set(buffer,  start  +  1,  end  -  1);  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  set(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	set(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  	90	None	replace
295	[BUG]  [BUGGY]  cast(start,  buffer  +  1,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  buffer  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  buffer  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
296	[BUG]  [BUGGY]  dump(buffer,  start  +  1,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  dump(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	dump(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
297	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
298	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
299	[BUG]  [BUGGY]  End  <  =  offset)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  offset)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  offset)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
300	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
301	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
302	[BUG]  [BUGGY]  End  <  =  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
303	[BUG]  [BUGGY]  start  =  length  >  0?  start++  :  end;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  0?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  0?  start++  :  end;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
304	[BUG]  [BUGGY]  start  =  length  >  end?  start++  :  end;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  end?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  end?  start++  :  end;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
305	[BUG]  [BUGGY]  start  =  end  >  start?  start++  :  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  >  start?  start++  :  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  >  start?  start++  :  length;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
306	[BUG]  [BUGGY]  start  =  length  >  start?  start  +  1  :  end;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  start?  start  +  1  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  start?  start  +  1  :  end;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
307	[BUG]  [BUGGY]  start  =  end  >  length?  start++  :  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  >  length?  start++  :  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  >  length?  start++  :  length;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
308	[BUG]  [BUGGY]  End  end  =  buffer[end  -  1];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  buffer[end  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  buffer[end  -  1];	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
309	[BUG]  [BUGGY]  End  end  =  buffer[start  -  1];  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  buffer[start  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  buffer[start  -  1];	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
310	[BUG]  [BUGGY]  start  =  buffer[start  -  1];  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[start  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[start  -  1];	  start    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
311	[BUG]  [BUGGY]  start  =  buffer.length  -  1L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer.length  -  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer.length  -  1L;	  start    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
312	[BUG]  [BUGGY]  start  =  buffer.length  -  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer.length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer.length  -  2;	  start    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
313	[BUG]  [BUGGY]  start  =  buffer.length  -  1  +  end;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer.length  -  1  +  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer.length  -  1  +  end;	  start    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
314	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
315	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
316	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
317	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
318	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
319	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end  -  1)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
320	[BUG]  [BUGGY]  cast(buffer,  end  +  1,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  end  +  1,  length  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  end  +  1,  length  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
321	[BUG]  [BUGGY]  cast(start,  buffer  +  1,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  buffer  +  1,  length  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  buffer  +  1,  length  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
322	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  buffer.length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  buffer.length  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  buffer.length  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
323	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
324	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
325	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
326	[BUG]  [BUGGY]  ||(end  <  buffer.length))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  <  buffer.length))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  <  buffer.length))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
327	[BUG]  [BUGGY]  ||(end  >  buffer.length  -  1))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  >  buffer.length  -  1))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  >  buffer.length  -  1))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
328	[BUG]  [BUGGY]  ||(end  <  length))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  <  length))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  <  length))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
329	[BUG]  [BUGGY]  ||(end  >=  buffer.length))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  >=  buffer.length))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  >=  buffer.length))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
330	[BUG]  [BUGGY]  ||(end  <  =  buffer.length))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  <  =  buffer.length))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  <  =  buffer.length))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
331	[BUG]  [BUGGY]  ||(end  ==  buffer.length))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  ==  buffer.length))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  ==  buffer.length))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
332	[BUG]  [BUGGY]  while(end  <  =  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  end)  {  start++;  }	  while(end    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
333	[BUG]  [BUGGY]  while(start  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
334	[BUG]  [BUGGY]  while(start  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
335	[BUG]  [BUGGY]  while(start  <  end  -  1)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end  -  1)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end  -  1)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
336	[BUG]  [BUGGY]  start  =  end  +  1L  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  +  1L  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1L  -  1;	  start    =    end    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
337	[BUG]  [BUGGY]  start  =  end  *  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  *  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  *  1L;	  start    =    end    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
338	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  1]  +  length;	  byte    trailer    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
339	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  offset;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  1]  +  offset;	  byte    trailer    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
340	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  2];  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  -  2];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  2];	  byte    trailer    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
341	[BUG]  [BUGGY]  end  =  buffer[length  -  1];  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[length  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[length  -  1];	  end    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
342	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  2;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  2;	  end    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
343	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  1;	  end    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
344	[BUG]  [BUGGY]  while(start  >=  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  end)  {  start++;  }	  while(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
345	[BUG]  [BUGGY]  while(start  <  =  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  =  end)  {  start++;  }	  while(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
346	[BUG]  [BUGGY]  while(start  ==  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  ==  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  ==  end)  {  start++;  }	  while(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
347	[BUG]  [BUGGY]  while(start  <  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end  -  1)  {  start++;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
348	[BUG]  [BUGGY]  while(start  <  end  &&  buffer[start]!='')  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end  &&  buffer[start]!='')  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end  &&  buffer[start]!='')  {  start++;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
349	[BUG]  [BUGGY]  while(start  <  end  &&  buffer[start]  =='')  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end  &&  buffer[start]  =='')  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end  &&  buffer[start]  =='')  {  start++;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  if(length  >  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  if(length  >  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  if(length  >  0)  {  start++;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
351	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
352	[BUG]  [BUGGY]  if(end  <  =  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  length)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
353	[BUG]  [BUGGY]  if(end  <  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  end)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
354	[BUG]  [BUGGY]  if(end  <  length  ||  end  >  buffer.length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  length  ||  end  >  buffer.length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length  ||  end  >  buffer.length)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
355	[BUG]  [BUGGY]  if(length  <  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(length  <  end)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  <  end)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
356	[BUG]  [BUGGY]  while(end  <  end)  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  end)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
357	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
358	[BUG]  [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
359	[BUG]  [BUGGY]  end  =  length()  -  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length()  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length()  -  1;	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
360	[BUG]  [BUGGY]  end  =  length()  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length()  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length()  +  1;	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
361	[BUG]  [BUGGY]  end  =  buffer.length();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length();	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
362	[BUG]  [BUGGY]  end  =  offset();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  offset();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  offset();	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
363	[BUG]  [BUGGY]  end  =  this.length();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  this.length();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  this.length();	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
364	[BUG]  [BUGGY]  end  =  length()  -  2;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length()  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length()  -  2;	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
365	[BUG]  [BUGGY]  while(end  >  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  end)  {  start++;  }	  if(end    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
366	[BUG]  [BUGGY]  if(end  >  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  >  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  0)  {  start++;  }	  if(end    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
367	[BUG]  [BUGGY]  ||  end  >  buffer.length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >  buffer.length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >  buffer.length)  {  start++;  }	  if(end    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
368	[BUG]  [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(end    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
369	[BUG]  [BUGGY]  end  >  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  >  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  >  length)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
370	[BUG]  [BUGGY]  start  +  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  length)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
371	[BUG]  [BUGGY]  start+=  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start+=  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start+=  length)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
372	[BUG]  [BUGGY]  start  =  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
373	[BUG]  [BUGGY]  start+1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start+1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start+1)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
374	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
375	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	66	None	replace
376	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	66	None	replace
377	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	66	None	replace
378	[BUG]  [BUGGY]  ||  end  <  buffer.length)  {  start++;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  buffer.length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  buffer.length)  {  start++;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  	131	None	replace
379	[BUG]  [BUGGY]  ||  end  <  offset)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  offset)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  offset)  {  start++;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  	131	None	replace
380	[BUG]  [BUGGY]  ||  end  <  =  length)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  =  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  =  length)  {  start++;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  	131	None	replace
381	[BUG]  [BUGGY]  ||  end  >=  length)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >=  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >=  length)  {  start++;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  	131	None	replace
382	[BUG]  [BUGGY]  ||  end  <  len)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  len)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  len)  {  start++;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  	131	None	replace
383	[BUG]  [BUGGY]  end  +=  offset;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  offset;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  offset;	  end    +=    length;    	non-compiled	[CE]  	39	None	replace
384	[BUG]  [BUGGY]  end  +=  buffer.length;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  buffer.length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  buffer.length;	  end    +=    length;    	non-compiled	[CE]  	39	None	replace
385	[BUG]  [BUGGY]  end  +=  length  -  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  length  -  2;	  end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
386	[BUG]  [BUGGY]  end  +=  length  +  2;  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  length  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  length  +  2;	  end    +=    length;    	non-compiled	[CE]  	39	None	replace
387	[BUG]  [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	105	None	replace
388	[BUG]  [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	105	None	replace
389	[BUG]  [BUGGY]  end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
390	[BUG]  [BUGGY]  end  <  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  length)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
391	[BUG]  [BUGGY]  end  =  length  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  -  1)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
392	[BUG]  [BUGGY]  end  =  length  -  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  -  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  -  0)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
393	[BUG]  [BUGGY]  end  =  length  /  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  /  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  /  0)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
394	[BUG]  [BUGGY]  end  =  length  >  1)  {  start++;  }  [CE]  not  a  statement  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  >  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  1)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
395	[BUG]  [BUGGY]  end  =  offset  >  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  offset  >  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  offset  >  0)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
396	[BUG]  [BUGGY]  end  =  length  >  2)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  >  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  2)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
397	[BUG]  [BUGGY]  while(end  >=  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >=  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >=  length)  {  start++;  }	  while(end    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
398	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
399	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length,  end);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length,  end);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
400	[BUG]  [BUGGY]  cast(buffer,  end  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  end  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  end  +  1,  length);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
401	[BUG]  [BUGGY]  setLength(buffer,  start  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  setLength(buffer,  start  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	setLength(buffer,  start  +  1,  length);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
402	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length,  buffer.length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length,  buffer.length);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
403	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  2);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length  -  2);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  2);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
404	[BUG]  [BUGGY]  End  end  =  length  -  offset;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  offset;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  offset;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
405	[BUG]  [BUGGY]  End  end  =  length  -  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  1;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
406	[BUG]  [BUGGY]  End  end  =  length  -  start  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  start  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  start  +  1;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
407	[BUG]  [BUGGY]  End  end  =  offset  -  start;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  offset  -  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  offset  -  start;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
408	[BUG]  [BUGGY]  End  end  =  start  -  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  start  -  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  start  -  length;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
409	[BUG]  [BUGGY]  End  end  =  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  buffer.length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  buffer.length;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
410	[BUG]  [BUGGY]  End  end  =  length  -  buffer[start];  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  buffer[start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  buffer[start];	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
411	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[end  -  1];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte[]  trailer  =  buffer[end  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[end  -  1];	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
412	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[length  -  1];  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte[]  trailer  =  buffer[length  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[length  -  1];	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
413	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[start  +  1];  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte[]  trailer  =  buffer[start  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[start  +  1];	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
414	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[offset  -  1];  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte[]  trailer  =  buffer[offset  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[offset  -  1];	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
415	[BUG]  [BUGGY]  end  =  buffer[end  +  1]  -  start;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  +  1]  -  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  +  1]  -  start;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
416	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  -  start;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  -  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  -  start;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
417	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  -  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  length;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
418	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  -  start;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  -  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  -  start;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
419	[BUG]  [BUGGY]  end  =  buffer[end  +  1]  -  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  +  1]  -  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  +  1]  -  length;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
420	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  /  start;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  /  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  /  start;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
421	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  offset;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  -  offset;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  offset;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
422	[BUG]  [BUGGY]  if(end  <  =  offset)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  offset)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  offset)  {  start++;  }	  if(end    <    offset)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
423	[BUG]  [BUGGY]  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
424	[BUG]  [BUGGY]  final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
425	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
426	[BUG]  [BUGGY]  end  =  length  -  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  -  1;	  start    =    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
427	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length  +  1;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
428	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length  +  2;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
429	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  trailer;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  trailer;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  trailer;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
430	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  trailer.length;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  trailer.length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  trailer.length;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
431	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length  +  3;  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length  +  3;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length  +  3;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  	55	None	replace
432	[BUG]  [BUGGY]  ||  end  <  buffer.length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  buffer.length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  buffer.length)  {  throw  new  IllegalArgumentException( " ");  }	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	124	None	replace
433	[BUG]  [BUGGY]  if(end  <  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  end++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
434	[BUG]  [BUGGY]  end  =  buffer[end  -  start];  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  start];	  end    =    buffer[start    -    start];    	non-compiled	[CE]  	74	None	replace
435	[BUG]  [BUGGY]  end  =  buffer[length  -  start];  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[length  -  start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[length  -  start];	  end    =    buffer[start    -    start];    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
436	[BUG]  [BUGGY]  end  =  buffer[offset  -  start];  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[offset  -  start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[offset  -  start];	  end    =    buffer[start    -    start];    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
437	[BUG]  [BUGGY]  end  =  buffer[start  -  2];  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  2];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  2];	  end    =    buffer[start    -    start];    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
438	[BUG]  [BUGGY]  while(end  <  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  1)  {  start++;  }	  if(end    <    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
439	[BUG]  [BUGGY]  if(end  <  =  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  1)  {  start++;  }	  if(end    <    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
440	[BUG]  [BUGGY]  byte  currentByte  =  buffer[start  -  1];  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  currentByte  =  buffer[start  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  currentByte  =  buffer[start  -  1];	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
441	[BUG]  [BUGGY]  byte  currentByte  =  buffer[start  +  1];  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  currentByte  =  buffer[start  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  currentByte  =  buffer[start  +  1];	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
442	[BUG]  [BUGGY]  byte  currentByte  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  currentByte  =  buffer[start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  currentByte  =  buffer[start];	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
443	[BUG]  [BUGGY]  cast(buffer,  end  +  1,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  end  +  1,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  end  +  1,  length  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
444	[BUG]  [BUGGY]  setLength(buffer,  start  +  1,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  setLength(buffer,  start  +  1,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	setLength(buffer,  start  +  1,  length  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
445	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  buffer.length  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  buffer.length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  buffer.length  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
446	[BUG]  [BUGGY]  while(end  >  length)  {  end++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  end++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  end++;  }	  while(start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
447	[BUG]  [BUGGY]  while(start  >=  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  length)  {  start++;  }	  while(start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
448	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
449	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
450	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
451	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
452	[BUG]  [BUGGY]  start  =  buffer[end  -  1]  +  length;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  -  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1]  +  length;	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
453	[BUG]  [BUGGY]  start  =  buffer[end  -  1]  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  -  1]  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1]  +  1;	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
454	[BUG]  [BUGGY]  start  =  buffer[end  -  1]  +  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  -  1]  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1]  +  2;	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
455	[BUG]  [BUGGY]  start  =  buffer[end  +  1];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  +  1];	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
456	[BUG]  [BUGGY]  start  =  buffer[end  -  1]  *  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  -  1]  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1]  *  2;	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
457	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
458	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  if(start  <  length)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
459	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
460	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	133	None	replace
461	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	10	None	replace
462	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	25	None	replace
463	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
464	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
465	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
466	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
467	[BUG]  [BUGGY]  end(buffer,  start  +  1,  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end(buffer,  start  +  1,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end(buffer,  start  +  1,  end)  {  start++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
468	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end  -  1)  {  start++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
469	[BUG]  [BUGGY]  cast(start,  start  +  1,  end)  {  start++;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  start  +  1,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  start  +  1,  end)  {  start++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
470	[BUG]  [BUGGY]  result(buffer,  start  +  1,  end)  {  result++;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  result(buffer,  start  +  1,  end)  {  result++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	result(buffer,  start  +  1,  end)  {  result++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
471	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  end)  {  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end)  {  return  0;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
472	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  -  1,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  -  1,  buffer,  0,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  -  1,  buffer,  0,  end);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	126	None	replace
473	[BUG]  [BUGGY]  enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
474	[BUG]  [BUGGY]  enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	enableNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
475	[BUG]  [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
476	[BUG]  [BUGGY]  casting(buffer,  start  +  1,  end  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  casting(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	casting(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
477	[BUG]  [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
478	[BUG]  [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  end)  {  start++;  }  else  if(buffer[start]  =='')  {  throw  new  IllegalArgumentException( " ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
479	[BUG]  [BUGGY]  while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
480	[BUG]  [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
481	[BUG]  [BUGGY]  ||(end  <  end))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  <  end))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  <  end))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
482	[BUG]  [BUGGY]  end  =  buffer.length  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  +  1;	  end    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
483	[BUG]  [BUGGY]  while(end  >  start)  {  start++;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  start)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  start)  {  start++;	  while(start    >    length)    {    start++;    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
484	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length  +  1)  {  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
485	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
486	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
487	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  =  0)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  =  0)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  start++;  }  else  if(end  <  =  0)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
488	[BUG]  [BUGGY]  End  end  =  length  -  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  length  -  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  2;	  End    end    =    length    -    start;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
489	[BUG]  [BUGGY]  start  =  length  +  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  +  2;	  start    =    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
490	[BUG]  [BUGGY]  if(end  >  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  >  length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  length)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
491	[BUG]  [BUGGY]  if(end  >=  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  >=  length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >=  length)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
492	[BUG]  [BUGGY]  if(end  >  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  >  end)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  end)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
493	[BUG]  [BUGGY]  if(end  <  start)  {  break;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  start)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  start)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
494	[BUG]  [BUGGY]  end  =  buffer.length  -  1  +  start;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer.length  -  1  +  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  -  1  +  start;	  end    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
495	[BUG]  [BUGGY]  if(start  >=  end)  {  start++;  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  >=  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  >=  end)  {  start++;  }	  if(start    >    end)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
496	[BUG]  [BUGGY]  start(buffer,  0,  end  -  1)  {  start++;  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start(buffer,  0,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start(buffer,  0,  end  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
497	[BUG]  [BUGGY]  validate(buffer,  0,  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  validate(buffer,  0,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	validate(buffer,  0,  end  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
498	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  *  1];  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  *  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  *  1];	  byte    trailer    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
499	[BUG]  [BUGGY]  byte  trailer  =  end[start  +  1];  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  end[start  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  end[start  +  1];	  byte    trailer    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
500	[BUG]  [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
501	[BUG]  [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
502	[BUG]  [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
503	[BUG]  [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0l;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0l;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0l;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
504	[BUG]  [BUGGY]  start  =  offset  -  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  offset  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  offset  -  1;	  start    =    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
505	[BUG]  [BUGGY]  ||  end  ==  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  ==  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  ==  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
506	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length,  0);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length,  0);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length,  0);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
507	[BUG]  [BUGGY]  if(start  <  =  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  =  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  =  length)  {  start++;  }	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
508	[BUG]  [BUGGY]  if(length  <  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(length  <  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  <  start)  {  start++;  }	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
509	[BUG]  [BUGGY]  start  =  length  /  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  /  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  /  start)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
510	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
511	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  1;	  end    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
512	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  &  0x7f;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  &  0x7f;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  &  0x7f;	  end    =    buffer[start    +    1];    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
513	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
514	[BUG]  [BUGGY]  while(start  >=  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
515	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
516	[BUG]  [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
517	[BUG]  [BUGGY]  End  <  =  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
518	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  start];  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  -  start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  start];	  byte    trailer    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
519	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  start;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  buffer[end  -  1]  +  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  1]  +  start;	  byte    trailer    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
520	[BUG]  [BUGGY]  cast(start  +  1,  end)  {  if(end  <  =  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start  +  1,  end)  {  if(end  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start  +  1,  end)  {  if(end  <  =  end)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
521	[BUG]  [BUGGY]  cast(start,  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  end)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
522	[BUG]  [BUGGY]  cast(start  +  1,  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start  +  1,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start  +  1,  end)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
523	[BUG]  [BUGGY]  cast(start  +  1,  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start  +  1,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start  +  1,  end  -  1)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
524	[BUG]  [BUGGY]  cast(start  +  1,  end)  {  if(end  <  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start  +  1,  end)  {  if(end  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start  +  1,  end)  {  if(end  <  end)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
525	[BUG]  [BUGGY]  while(end  >  end)  {  start++;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  end)  {  start++;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  end)  {  start++;	  while(end    <    end)    {    start++;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
526	[BUG]  [BUGGY]  end  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start];	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
527	[BUG]  [BUGGY]  start  =  buffer[start  +  1];  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[start  +  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[start  +  1];	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
528	[BUG]  [BUGGY]  start  =  buffer[start];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[start];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[start];	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
529	[BUG]  [BUGGY]  start  +=  length  *  2  +(end  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  *  2  +(end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  *  2  +(end  -  1);	  start    +=    length    *    2;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
530	[BUG]  [BUGGY]  start  -=  length  *  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  *  2;	  start    +=    length    *    2;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
531	[BUG]  [BUGGY]  while(end  >  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(end    <    start)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
532	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  start  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  -  start  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  start  +  1;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
533	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  width;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  -  width;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  width;	  end    =    buffer[start    +    1]    -    start;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
534	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length.intValue();  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length.intValue();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length.intValue();	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
535	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length  +  4;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length  +  4;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length  +  4;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
536	[BUG]  [BUGGY]  end  =  length()  -  start;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length()  -  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length()  -  start;	  end    =    length();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
537	[BUG]  [BUGGY]  end  =  buffer[start++]  &  0x7F;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  &  0x7F;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  &  0x7F;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
538	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  -  1,  buffer,  start  +  1,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  -  1,  buffer,  start  +  1,  length);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  -  1,  buffer,  start  +  1,  length);  return  0L;	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
539	[BUG]  [BUGGY]  cast(start,  start  +  1,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  start  +  1,  length  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  start  +  1,  length  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
540	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[start  -  1]  +  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte[]  trailer  =  buffer[start  -  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[start  -  1]  +  length;	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
541	[BUG]  [BUGGY]  start  =  end  +  1l  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  +  1l  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1l  +  1;	  start    =    end    +    1l;    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
542	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
543	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
544	[BUG]  [BUGGY]  end  =  buffer[start  -  start]  +  1;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  start]  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  start]  +  1;	  end    =    buffer[start    -    start];    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
545	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  -  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  -  1,  buffer,  0,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  -  1,  buffer,  0,  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
546	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
547	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
548	[BUG]  [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
549	[BUG]  [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  end  +  1,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  end  +  1,  length);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  end  +  1,  length);  return  0L;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
550	[BUG]  [BUGGY]  while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
551	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  return  0;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
552	[BUG]  [BUGGY]  while(end  >  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  0)  {  start++;  }	  while(end    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
553	[BUG]  [BUGGY]  End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	33	None	replace
554	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
555	[BUG]  [BUGGY]  End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <?>  end  -  start)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
556	[BUG]  [BUGGY]  End  allowedNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  allowedNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  allowedNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
557	[BUG]  [BUGGY]  allowNegatedByte()  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatedByte()  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte()  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
558	[BUG]  [BUGGY]  safely())  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  safely())  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	safely())  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatedByte)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
559	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  2;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  2;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
560	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  1);  end  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
561	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  start;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  end  -=  start;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
562	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  -  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start  -  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
563	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
564	[BUG]  [BUGGY]  start  =  end  /  2  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  /  2  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  2  +  1;	  start    =    end    /    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
565	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
566	[BUG]  [BUGGY]  bail(buffer,  start  +  1,  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bail(buffer,  start  +  1,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bail(buffer,  start  +  1,  end)  {  start++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
567	[BUG]  [BUGGY]  start  +  1,  end)  {  buffer[start++]  ='';  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  buffer[start++]  ='';  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  buffer[start++]  ='';  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
568	[BUG]  [BUGGY]  start  +  1,  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  start++;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
569	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length  +  1)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
570	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
571	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  length);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  length);  end  +=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  length);  end  +=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
572	[BUG]  [BUGGY]  start  =  buffer[end  -  1]  +  offset;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  buffer[end  -  1]  +  offset;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1]  +  offset;	  start    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
573	[BUG]  [BUGGY]  while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
574	[BUG]  [BUGGY]  start  =  end  +  1L  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  +  1L  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1L  +  1;	  start    =    end    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
575	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  start;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  start;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
576	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  length  +  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
577	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  end  -=  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
578	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  1;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
579	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
580	[BUG]  [BUGGY]  end  =  length  >  3)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  >  3)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  3)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
581	[BUG]  [BUGGY]  while(start  >>  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >>  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >>  end)  {  start++;  }	  while(start    >    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
582	[BUG]  [BUGGY]  start  =  end  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  *  2  +  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  *  2  +  1;	  start    =    end    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
583	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "' ");  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "' ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "' ");	  {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
584	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer.length+ "'. ");  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer.length+ "'. ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer.length+ "'. ");	  {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
585	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "'. ");  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "'. ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]+ "'. ");	  {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
586	[BUG]  [BUGGY]  start  +=  length  /  2  +  4;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +=  length  /  2  +  4;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  /  2  +  4;	  start    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
587	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
588	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  +  start;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  +  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  +  start;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
589	[BUG]  [BUGGY]  end  =  buffer[end  -  1]  *  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[end  -  1]  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1]  *  2;	  end    =    buffer[end    -    1];    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
590	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }	  if(end    <    =    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
591	[BUG]  [BUGGY]  End  >  length)  {  start++;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  >  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  >  length)  {  start++;  }	  if(end    >    length)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
592	[BUG]  [BUGGY]  scan(buffer,  start  +  1,  end  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  scan(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	scan(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
593	[BUG]  [BUGGY]  bail(buffer,  start  +  1,  end  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bail(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bail(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
594	[BUG]  [BUGGY]  while(offset  <  end)  {  start++;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(offset  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(offset  <  end)  {  start++;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
595	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Byte  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
596	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Offset  of  length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Offset  of  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Offset  of  length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
597	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
598	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+start+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+start+ "'  must  be  at  least  2 ");  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Byte  ' "+start+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]);  [CE]  illegal  start  of  expression  [FE]                                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ' "+buffer[start  +  1]);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
600	[BUG]  [BUGGY]  bucket  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  >=  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
601	[BUG]  [BUGGY]  start  =  length  %  0)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  %  0)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  %  0)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
602	[BUG]  [BUGGY]  start  =  end  -  2L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  -  2L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  2L;	  start    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
603	[BUG]  [BUGGY]  byte  trailer  =(end  -  1)+  buffer[start  -  1];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =(end  -  1)+  buffer[start  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =(end  -  1)+  buffer[start  -  1];	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
604	[BUG]  [BUGGY]  byte  trailer  =  end[buffer  -  1];  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  end[buffer  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  end[buffer  -  1];	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
605	[BUG]  [BUGGY]  byte  trailer  =  end[buffer.length  -  1];  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  byte  trailer  =  end[buffer.length  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  end[buffer.length  -  1];	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  	23	None	replace
606	[BUG]  [BUGGY]  End  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
607	[BUG]  [BUGGY]  End  <  =  start)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  start)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  start)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	66	None	replace
608	[BUG]  [BUGGY]  enableMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  enableMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	enableMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowMissing(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	78	None	replace
609	[BUG]  [BUGGY]  while(end  >  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	121	None	replace
610	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length,  0));  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length,  0));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length,  0));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
611	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  start));  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(buffer,  start  +  1,  length  -  start));  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  start));	  cast(buffer,    start    +    1,    length));    	non-compiled	[CE]  	88	None	replace
612	[BUG]  [BUGGY]  if(start  >=  length)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  >=  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  >=  length)  {  start++;  }	  if(start    >    length)    {    start++;    }    	non-compiled	[CE]  	85	None	replace
613	[BUG]  [BUGGY]  if(start  <  length)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  length)  {  start++;  }	  if(start    >    length)    {    start++;    }    	non-compiled	[CE]  	85	None	replace
614	[BUG]  [BUGGY]  End  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	100	None	replace
615	[BUG]  [BUGGY]  while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	113	None	replace
616	[BUG]  [BUGGY]  start  =  length  -  start?  start++  :  end;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  start?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  start?  start++  :  end;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  	72	None	replace
617	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;	  [Delete]    	non-compiled	[CE]  	64	None	replace
618	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	  [Delete]    	non-compiled	[CE]  	64	None	replace
619	[BUG]  [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  end++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	105	None	replace
620	[BUG]  [BUGGY]  while(start  >=  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  >=  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >=  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  while(start    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	116	None	replace
621	[BUG]  [BUGGY]  if(end  <  len)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  len)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  len)  {  start++;  }	  if(end    <    offset)    {    start++;    }    	non-compiled	[CE]  	108	None	replace
622	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  +  1);  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  +  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    end);    	non-compiled	[CE]  	126	None	replace
623	[BUG]  [BUGGY]  end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  bucket    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
624	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  bucket    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
625	[BUG]  [BUGGY]  start  =  end  >  length?  start++  :  end;  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  end  >  length?  start++  :  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  >  length?  start++  :  end;	  start    =    length    >    start?    start++    :    end;    	non-compiled	[CE]  	72	None	replace
626	[BUG]  [BUGGY]  while(end  >  length  -  1)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  length  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length  -  1)  {  start++;  }	  while(end    >    length)    {    start++;    }    	non-compiled	[CE]  	48	None	replace
627	[BUG]  [BUGGY]  while(end  >  3)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  >  3)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  3)  {  start++;  }	  while(end    >    length)    {    start++;    }    	non-compiled	[CE]  	48	None	replace
628	[BUG]  [BUGGY]  End  <  =  length)  {  break;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  break;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  	45	None	replace
629	[BUG]  [BUGGY]  End  <  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  end)  {  start++;  }	  End    <    =    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
630	[BUG]  [BUGGY]  while(start  ==  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  ==  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  ==  length)  {  start++;  }	  while(start    >    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
631	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
632	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
633	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }	  ==    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
634	[BUG]  [BUGGY]  while(start  <  end)  {  start  +=  end;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start  +=  end;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start  +=  end;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
635	[BUG]  [BUGGY]  while(start  <  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  start)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  start)  {  start++;  }	  while(start    <    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
636	[BUG]  [BUGGY]  setLength(buffer,  start  +  1,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  setLength(buffer,  start  +  1,  length  -  1)  {  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	setLength(buffer,  start  +  1,  length  -  1)  {	  cast(buffer,    start    +    1,    length    -    1)    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
637	[BUG]  [BUGGY]  end  -=  start;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  -=  start;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  -=  start;	  start    +=    end;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
638	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  2;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  2;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
639	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  end;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  end;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  -=  end;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
640	[BUG]  [BUGGY]  ||(end  >  buffer.length  +  1))  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||(end  >  buffer.length  +  1))  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  >  buffer.length  +  1))  {  start++;  }	  ||(end    >    buffer.length))    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
641	[BUG]  [BUGGY]  while(end  <  len)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  len)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  len)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  while(end    <    start)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
642	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length  -  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length  -  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  length  -  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
643	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  1;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  +=  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
644	[BUG]  [BUGGY]  if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
645	[BUG]  [BUGGY]  if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
646	[BUG]  [BUGGY]  if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
647	[BUG]  [BUGGY]  if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
648	[BUG]  [BUGGY]  ||  end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  len)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
649	[BUG]  [BUGGY]  ||  end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
650	[BUG]  [BUGGY]  end  =  length  %  BYTE_MASK)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  %  BYTE_MASK)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  %  BYTE_MASK)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
651	[BUG]  [BUGGY]  end  =  length  /  2)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  /  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  /  2)  {  start++;  }	  end    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  	68	None	replace
652	[BUG]  [BUGGY]  End  <  =  length  -  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length  -  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length  -  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end    -    1);    return    0L;    }    	non-compiled	[CE]  	106	None	replace
653	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  length);  [CE]  [FE]                                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end  -  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
654	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  length  -=  length;  [CE]  [FE]                                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  length  -=  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  length  -=  length;	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    end    -=    length;    	non-compiled	[CE]  	130	None	replace
655	[BUG]  [BUGGY]  start  -=  length  /  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  length  /  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length  /  2;	  start    +=    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
656	[BUG]  [BUGGY]  end  +=  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  +=  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  1;	  end    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
657	[BUG]  [BUGGY]  rollback(buffer,  start  +  1,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  rollback(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	rollback(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
658	[BUG]  [BUGGY]  expand(buffer,  start  +  1,  end  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  expand(buffer,  start  +  1,  end  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	expand(buffer,  start  +  1,  end  -  1);	  cast(buffer,    start    +    1,    end    -    1);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
659	[BUG]  [BUGGY]  start  =  offset  /  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  offset  /  1;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  offset  /  1;	  start    =    end    /    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
660	[BUG]  [BUGGY]  start  =  length  /  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  /  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  /  2;	  start    =    end    /    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
661	[BUG]  [BUGGY]  End  <  0  ||  end  >  buffer.length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  0  ||  end  >  buffer.length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0  ||  end  >  buffer.length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
662	[BUG]  [BUGGY]  start  =  length  +  1L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  +  1L;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  +  1L;	  start    =    end    +    1L;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
663	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  while(start    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
664	[BUG]  [BUGGY]  if(start  <  =  end)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(start  <  =  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  <  =  end)  {  start++;  }	  if(length    <    =    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
665	[BUG]  [BUGGY]  buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
666	[BUG]  [BUGGY]  buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	buffer[start]  =='')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
667	[BUG]  [BUGGY]  ||  end  <  length)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  length)  {  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  return  0;  }	  ||    end    <    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
668	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
669	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end  -  start);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start  +  1,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end    -    start);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
670	[BUG]  [BUGGY]  rollback(buffer,  start  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  rollback(buffer,  start  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	rollback(buffer,  start  +  1,  length);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
671	[BUG]  [BUGGY]  dump(buffer,  start  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  dump(buffer,  start  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	dump(buffer,  start  +  1,  length);	  cast(buffer,    start    +    1,    length);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
672	[BUG]  [BUGGY]  bucket  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
673	[BUG]  [BUGGY]  if(end  <  3)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  3)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  3)  {  start++;  }	  if(end    <    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
674	[BUG]  [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    1;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
675	[BUG]  [BUGGY]  while(end  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(end  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  while(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
676	[BUG]  [BUGGY]  start  =  cast(buffer,  0,  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  cast(buffer,  0,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  cast(buffer,  0,  end  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
677	[BUG]  [BUGGY]  cast(start,  0,  end  -  1)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  0,  end  -  1)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  0,  end  -  1)  {  start++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
678	[BUG]  [BUGGY]  cast(start,  0,  end  -  1)  {  buffer++;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  cast(start,  0,  end  -  1)  {  buffer++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(start,  0,  end  -  1)  {  buffer++;  }	  cast(buffer,    0,    end    -    1)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
679	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
680	[BUG]  [BUGGY]  End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
681	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  End    <    =    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
682	[BUG]  [BUGGY]  rollback(buffer,  start  +  1,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  rollback(buffer,  start  +  1,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	rollback(buffer,  start  +  1,  length  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
683	[BUG]  [BUGGY]  dump(buffer,  start  +  1,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  dump(buffer,  start  +  1,  length  -  1);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	dump(buffer,  start  +  1,  length  -  1);	  cast(buffer,    start    +    1,    length    -    1);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
684	[BUG]  [BUGGY]  start  =  length  >  0)  {  end  =  length;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  >  0)  {  end  =  length;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  0)  {  end  =  length;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
685	[BUG]  [BUGGY]  end  =  length  %  2)  {  start++;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  %  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  %  2)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  	50	None	replace
686	[BUG]  [BUGGY]  end  =  length  -  2)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  length  -  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  -  2)  {  start++;  }	  end    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
687	[BUG]  [BUGGY]  allowNegatives(start  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(start  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(start  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	102	None	replace
688	[BUG]  [BUGGY]  end  =  buffer[start++]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start++]  &  BYTE_MASK;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++]  &  BYTE_MASK;	  end    =    buffer[start++];    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
689	[BUG]  [BUGGY]  start  -=  end  +  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  -=  end  +  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  end  +  2;	  start    =    end    +    2;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
690	[BUG]  [BUGGY]  start  =  length  +  1l;  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  +  1l;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  +  1l;	  start    =    end    +    1l;    	non-compiled	[CE]  	96	None	replace
691	[BUG]  [BUGGY]  end  =  offset  +  length();  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  offset  +  length();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  offset  +  length();	  end    =    length();    	non-compiled	[CE]  	52	None	replace
692	[BUG]  [BUGGY]  end  -=  length();  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  -=  length();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  -=  length();	  end    =    length();    	non-compiled	[CE]  	52	None	replace
693	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  [CE]  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	25	None	replace
694	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);  [CE]  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	25	None	replace
695	[BUG]  [BUGGY]  End  -  1  =  System.currentTimeMillis();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  -  1  =  System.currentTimeMillis();  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  -  1  =  System.currentTimeMillis();	  {    start++;    }    	non-compiled	[CE]  	83	None	replace
696	[BUG]  [BUGGY]  ||  length  <  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  length  <  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  length  <  2)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  ||    end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	67	None	replace
697	[BUG]  [BUGGY]  start  =  length  -  2)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  -  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  2)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  	71	None	replace
698	[BUG]  [BUGGY]  start  =  length  %  2)  {  start++;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  %  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  %  2)  {  start++;  }	  start    =    length    >    0)    {    start++;    }    	non-compiled	[CE]  	71	None	replace
699	[BUG]  [BUGGY]  start  =  length  /  2)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  =  length  /  2)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  /  2)  {  start++;  }	  start    =    length    >    start)    {    start++;    }    	non-compiled	[CE]  	69	None	replace
700	[BUG]  [BUGGY]  start  <  length)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  <  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  <  length)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  	134	None	replace
701	[BUG]  [BUGGY]  start  >=  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  >=  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  >=  end)  {  start++;  }	  start    >    length)    {    start++;    }    	non-compiled	[CE]  	134	None	replace
702	[BUG]  [BUGGY]  final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	34	None	replace
703	[BUG]  [BUGGY]  final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	final  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	34	None	replace
704	[BUG]  [BUGGY]  bucket  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  0)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  bucket    <    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
705	[BUG]  [BUGGY]  if(end  <  end  ||  end  >  buffer.length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  end  ||  end  >  buffer.length)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end  ||  end  >  buffer.length)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
706	[BUG]  [BUGGY]  if(end  <  len)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  len)  {  break;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  len)  {  break;  }	  if(end    <    length)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
707	[BUG]  [BUGGY]  start  +  1,  end)  {  buffer.append('  ');  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  buffer.append('  ');  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  buffer.append('  ');	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
708	[BUG]  [BUGGY]  start  +  1,  end)  {  buffer[start]  ='';  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  buffer[start]  ='';  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  buffer[start]  ='';  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
709	[BUG]  [BUGGY]  start  +  1,  end)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  return  0;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  return  0;  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
710	[BUG]  [BUGGY]  start  +  1,  end)  {  buffer[start++]  =  '.';  }  [CE]  [FE]                                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  start  +  1,  end)  {  buffer[start++]  =  '.';  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +  1,  end)  {  buffer[start++]  =  '.';  }	  cast(buffer,    start    +    1,    end)    {    start++;    }    	non-compiled	[CE]  	109	None	replace
711	[BUG]  [BUGGY]  ensureLength(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ensureLength(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	ensureLength(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	79	None	replace
712	[BUG]  [BUGGY]  allowNegatives(1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  allowNegatives(1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length    +    1)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	79	None	replace
713	[BUG]  [BUGGY]  if(end  <  end  ||  end  >  buffer.length)  {  start++;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  end  ||  end  >  buffer.length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end  ||  end  >  buffer.length)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  	17	None	replace
714	[BUG]  [BUGGY]  ||  end  <  end)  {  start++;  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  <  end)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  end)  {  start++;  }	  if(end    <    =    end)    {    start++;    }    	non-compiled	[CE]  	17	None	replace
715	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);	  End    end    =    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	42	None	replace
716	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length  *  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  +  length  *  2;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length  *  2;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
717	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  *  length;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  -  1]  *  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  *  length;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
718	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  +  length;  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  =  buffer[start  +  1]  +  length;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  +  length;	  end    =    buffer[start    -    1]    +    length;    	non-compiled	[CE]  	55	None	replace
719	[BUG]  [BUGGY]  Byte  trailer  =  buffer[end  -  1];  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  Byte  trailer  =  buffer[end  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	Byte  trailer  =  buffer[end  -  1];	  byte    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  <identifier>  expected	23	None	replace
720	[BUG]  [BUGGY]  if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	133	None	replace
721	[BUG]  [BUGGY]  if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	133	None	replace
722	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  =='')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
723	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  if(buffer[start]  ==  '.')  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
724	[BUG]  [BUGGY]  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    0)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	100	None	replace
725	[BUG]  [BUGGY]  if(length  >  0)  {  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  if(length  >  0)  {  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  >  0)  {  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  allowNegatives(length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	76	None	replace
726	[BUG]  [BUGGY]  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  bucket    <    end)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
727	[BUG]  [BUGGY]  buffer[start]  ==  '.')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  buffer[start]  ==  '.')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	buffer[start]  ==  '.')  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	33	None	replace
728	[BUG]  [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  bucket    <    end)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	33	None	replace
729	[BUG]  [BUGGY]  bytes[]  trailer  =  buffer[end  -  1];  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  bytes[]  trailer  =  buffer[end  -  1];  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bytes[]  trailer  =  buffer[end  -  1];	  byte[]    trailer    =    buffer[start    -    1];    	non-compiled	[CE]  	93	None	replace
730	[BUG]  [BUGGY]  End  <  =  1L)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1L)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1L)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    >    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	66	None	replace
731	[BUG]  [BUGGY]  End  <  =  1L)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1L)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1L)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    if(start    <    end)    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	43	None	replace
732	[BUG]  [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  1L)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  End    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    0,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	44	None	replace
733	[BUG]  [BUGGY]  ||  end  >  length)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ||  end  >  length)  {  start++;  }  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  >  length)  {  start++;  }	  if(end    >    length)    {    start++;    }    	non-compiled	[CE]  	49	None	replace
734	[BUG]  [BUGGY]  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	104	None	replace
735	[BUG]  [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){      [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  [BUGGY]      }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);	  parent!=    ((    byte[])end).arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    	non-compiled	[CE]  	104	None	replace
