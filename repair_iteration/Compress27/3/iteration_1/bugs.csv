bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  end++;  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  end++;  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end++;	start++;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  length)  {  start++;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }	start++;  	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  if(end  <  =  length)  {  start++;  }  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  =  length)  {  start++;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  length)  {  start++;  }	start++;  	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  if(length  >  start)  {  start++;  }  [CE]  [FE]          IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(length  >  start)  {  start++;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  >  start)  {  start++;  }	start++;  	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  if(length  >  end)  {  start++;  }  [CE]  [FE]            IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(length  >  end)  {  start++;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  >  end)  {  start++;  }	start++;  	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  if(end  <  end)  {  start++;  }  [CE]  [FE]              IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  end)  {  start++;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end)  {  start++;  }	start++;  	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]    [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	  	start++;  	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  start  =  end  -  1;  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  start  =  end  -  1;  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  1;	start++;  	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  start  =  end  +  1;  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  start  =  end  +  1;  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1;	start++;  	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  start  +=  length;  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  start  +=  length;  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length;	start++;  	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	start++;  	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	start++;  	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	start++;  	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	start++;  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]            IllegalArgumentException  [CONTEXT]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [BUGGY]  if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]  }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	start++;  	non-compiled	[CE]  	5	None	replace
