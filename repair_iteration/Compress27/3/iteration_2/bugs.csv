bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  start  =  end  -  1L;  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  -  1L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  1L;	  start    =    end    -    1;    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  start  =  end  -  1  +  1;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  -  1  +  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  1  +  1;	  start    =    end    -    1;    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  start  =  end  -  2;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  -  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  -  2;	  start    =    end    -    1;    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  start  =  buffer[end  -  1];  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  buffer[end  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer[end  -  1];	  start    =    end    -    1;    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  start  =  length  -  1;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  length  -  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  -  1;	  start    =    end    -    1;    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  while(end  <  length)  {  start++;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  length)  {  start++;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  length)  {  start++;	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  while(end  <  length)  {  start++;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  length)  {  start++;  }	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  while(end  <  end)  {  start++;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  end)  {  start++;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {  start++;	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  while(end  <  end)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {  start++;  }	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
11	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
12	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
13	[BUG]  [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
14	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  <  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  if(end  <  =  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  =  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  end)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  start  =  end  +  1L;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  +  1L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1L;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  start  =  end  +  2;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  +  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  2;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  start  =  end  /  1;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  /  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  /  1;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  start  =  end  +  3;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  +  3;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  3;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  start  =  length  +  1;  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  length  +  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  +  1;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  byte  trailer  =  buffer[start  -  1];  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  byte  trailer  =  buffer[start  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[start  -  1];	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  byte  trailer  =  buffer[end  -  1];  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  byte  trailer  =  buffer[end  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[end  -  1];	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  byte  trailer  =  buffer[start  +  1];  [CE]  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  byte  trailer  =  buffer[start  +  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte  trailer  =  buffer[start  +  1];	      	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	throw  new  IllegalArgumentException( " ");	      	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  start  +=  end;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  end;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  end;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  start  +=  length  -  1;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  -  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  -  1;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  start  +=  length  +  1;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  +  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  +  1;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  start  +=  length  -  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  -  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  -  2;	  start    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  end  +=  length;  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  +=  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  +=  length;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  start  +=  length  *  2;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  *  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  *  2;	  start    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  start  +=  length  /  2;  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  /  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  /  2;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  if(start  <  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
44	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  0,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
45	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
46	[BUG]  [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  length);  return  0L;	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
48	[BUG]  [BUGGY]  while(end  >  length)  {  start++;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  >  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  >  length)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  if(end  >  length)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  >  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  length)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  end  =  length  >  0)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  length  >  0)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  0)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  while(start  >  end)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  >  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >  end)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  end  =  length();  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  length();  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length();	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
53	[BUG]  [BUGGY]  end  =  buffer[start  -  1];  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1];	  end++;    	non-compiled	[CE]  	1	None	replace
54	[BUG]  [BUGGY]  end  =  buffer[start  +  1];  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start  +  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1];	  end++;    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  end  =  buffer[start  -  1]  +  length;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start  -  1]  +  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  1]  +  length;	  end++;    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  end  =  buffer[end  -  1];  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[end  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[end  -  1];	  end++;    	non-compiled	[CE]  	1	None	replace
57	[BUG]  [BUGGY]  end  =  buffer[start  +  1]  -  start;  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start  +  1]  -  start;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  +  1]  -  start;	  end++;    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  end  =  buffer[start++];  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start++];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start++];	  end++;    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  end  =  end  +  1;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  end  +  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  end  +  1;	  if(end    <    length)    {    start++;    }    	non-compiled	[CE]  	2	None	replace
60	[BUG]  [BUGGY]  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  bucket  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	bucket  <  =  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  [Delete]  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	[Delete]	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	14	None	replace
66	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  if(start  >  end)  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	14	None	replace
67	[BUG]  [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  ||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	14	None	replace
68	[BUG]  [BUGGY]  end  =  length  >  start)  {  start++;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  length  >  start)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  length  >  start)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
69	[BUG]  [BUGGY]  start  =  length  >  start)  {  start++;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  length  >  start)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  start)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
70	[BUG]  [BUGGY]  while(start  >  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  >  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >  length)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  start  =  length  >  0)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  length  >  0)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  0)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
72	[BUG]  [BUGGY]  start  =  length  >  start?  start++  :  end;  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  length  >  start?  start++  :  end;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  length  >  start?  start++  :  end;	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
73	[BUG]  [BUGGY]  while(start  >  length)  {  start++;  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  >  length)  {  start++;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  >  length)  {  start++;	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
74	[BUG]  [BUGGY]  end  =  buffer[start  -  start];  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer[start  -  start];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer[start  -  start];	  end++;    	non-compiled	[CE]  	1	None	replace
75	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatedByte)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  allowMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowMissing(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  if(end  >  start)  {  start++;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  >  start)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  start)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  ||(end  >  buffer.length))  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  ||(end  >  buffer.length))  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||(end  >  buffer.length))  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
82	[BUG]  [BUGGY]  if(start  >  end)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(start  >  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  >  end)  {  start++;  }	  if(length    >    end)    {    start++;    }    	non-compiled	[CE]  	5	None	replace
83	[BUG]  [BUGGY]  {  start++;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	{  start++;  }	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
84	[BUG]  [BUGGY]  End  end  =  length  -  start;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  end  =  length  -  start;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  end  =  length  -  start;	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  	3	None	replace
85	[BUG]  [BUGGY]  if(start  >  length)  {  start++;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(start  >  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(start  >  length)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
86	[BUG]  [BUGGY]  if(end  >  end)  {  start++;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  >  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  >  end)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  	4	None	replace
87	[BUG]  [BUGGY]  cast(buffer,  0,  end  -  1)  {  start++;  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  0,  end  -  1)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  0,  end  -  1)  {  start++;  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
88	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length));  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  length));  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length));	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
89	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  length  -  1)  {  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  1)  {	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
90	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end  -  1);  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  end  -  1);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end  -  1);	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
91	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length  -  1);  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  length  -  1);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length  -  1);	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
92	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  length);  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  length);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  length);	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
93	[BUG]  [BUGGY]  byte[]  trailer  =  buffer[start  -  1];  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  byte[]  trailer  =  buffer[start  -  1];  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	byte[]  trailer  =  buffer[start  -  1];	      	non-compiled	[CE]  	7	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;	      	non-compiled	[CE]  	7	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	      	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  start  =  end  +  1l;  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  +  1l;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  +  1l;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
97	[BUG]  [BUGGY]  start  =  end  *  1;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  end  *  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  end  *  1;	  start    =    end    +    1;    	non-compiled	[CE]  	9	None	replace
98	[BUG]  [BUGGY]  start  -=  length;  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  -=  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  -=  length;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
99	[BUG]  [BUGGY]  start  +=  length  +  2;  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  +=  length  +  2;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  +=  length  +  2;	  start    +=    length;    	non-compiled	[CE]  	10	None	replace
100	[BUG]  [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  0)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
101	[BUG]  [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
102	[BUG]  [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length  +  1)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
103	[BUG]  [BUGGY]  start  =  buffer.length  -  1;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  =  buffer.length  -  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  =  buffer.length  -  1;	  start    =    end    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
104	[BUG]  [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	parent!=  ((  byte[])end).arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	allowNegatives(length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end  -  1);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  if(end  <  =  0)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  =  0)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  =  0)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
108	[BUG]  [BUGGY]  if(end  <  offset)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  offset)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  offset)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
109	[BUG]  [BUGGY]  cast(buffer,  start  +  1,  end)  {  start++;  }  [CE]  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  cast(buffer,  start  +  1,  end)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	cast(buffer,  start  +  1,  end)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
110	[BUG]  [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	End  <  =  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  1;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	15	None	replace
111	[BUG]  [BUGGY]  if(end  <  start)  {  start++;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  start)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  start)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
112	[BUG]  [BUGGY]  if(end  <  1)  {  start++;  }  [CE]  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  1)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  1)  {  start++;  }	  if(end    <    end)    {    start++;    }    	non-compiled	[CE]  	6	None	replace
113	[BUG]  [BUGGY]  while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
114	[BUG]  [BUGGY]  while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
115	[BUG]  [BUGGY]  while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  length)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
116	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  [FE]                  IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  	13	None	replace
117	[BUG]  [BUGGY]  while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
118	[BUG]  [BUGGY]  if(end  <  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  length)  {  break;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  length)  {  break;  }	  if(end    <    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
119	[BUG]  [BUGGY]  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
120	[BUG]  [BUGGY]  while(end  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
121	[BUG]  [BUGGY]  while(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  length)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(start  <  end)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
123	[BUG]  [BUGGY]  while(end  <  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  while(end  <  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	while(end  <  start)  {  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
124	[BUG]  [BUGGY]  ==  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  ==  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	==  start++;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    length)    {    start++;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
127	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  -=  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  +=  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  +=  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  +=  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  end  -=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  end  -=  length;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  end  -=  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
131	[BUG]  [BUGGY]  ||  end  <  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  ||  end  <  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	||  end  <  length)  {  start++;  }	  if(end    <    =    length)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
132	[BUG]  [BUGGY]  end  =  buffer.length  -  1;  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  end  =  buffer.length  -  1;  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	end  =  buffer.length  -  1;	  end++;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
133	[BUG]  [BUGGY]  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(end  <  end)  {  start++;  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer,  start  +  1,  end);  return  0L;  }	  if(end    <    =    length)    {    start++;    }    else    {    System.arraycopy(buffer,    start    +    1,    buffer,    start    +    1,    end);    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
134	[BUG]  [BUGGY]  start  >  length)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  start  >  length)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	start  >  length)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
135	[BUG]  [BUGGY]  if(length  <  =  start)  {  start++;  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){    [BUGGY]  if(length  <  =  start)  {  start++;  }  [BUGGY]    }  else  {  break;  }  }      byte  trailer  =  buffer[end  -  1];  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress27/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	118	118	1	replace	if(length  <  =  start)  {  start++;  }	  if(length    >    start)    {    start++;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
