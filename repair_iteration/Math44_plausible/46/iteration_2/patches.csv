bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2	[BUG]  [BUGGY]  return  orderSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderSign  /  Double.compare(es1.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
3	[BUG]  [BUGGY]  return  orderSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());	  return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
6	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventStates)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occurredingEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es2.getEventTime());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es2.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  *  Double.compare(es0.getEventTime(),  es2.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es2.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
10	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es2.getEventTime());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es2.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(es1.getEventTime(),  es2.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es2.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
11	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)&&    eventT!=    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
15	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)&&    eventT!=    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
16	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)&&    eventT!=    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
17	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(es0.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es0.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es0.getEventTime());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(es1.getEventTime(),  es0.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(es1.getEventTime(),  es0.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es0.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
22	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
23	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
24	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(event.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(event.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(event.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(event.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  return  orderT  *  Double.compare(event.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderT  *  Double.compare(event.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderT  *  Double.compare(event.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(event.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
27	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
28	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(eventT))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(eventT))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(eventT))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
29	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  isLastStep)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  isLastStep)  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  isLastStep)  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.iterator())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.iterator())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
33	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates.iterator())  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.iterator())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
34	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
35	[BUG]  [BUGGY]  int  stepSize  =  state.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.getStep();	  int    stepSize    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  int  stepSize  =  es1.getStep();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  es1.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  es1.getStep();	  int    stepSize    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  int  stepSize  =  es0.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  es0.getStep()  +  1;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  es0.getStep()  +  1;	  int    stepSize    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
39	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
40	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.equals(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.equals(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.equals(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  ')'  expected	31	None	replace
41	[BUG]  [BUGGY]  eventT  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  eventT  =  state.evaluateStep(interpolator);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	eventT  =  state.evaluateStep(interpolator);	  for(final    EventState    state    :    eventsInitialized)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
42	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(events.getEventTime(),  es1.getEventTime());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(events.getEventTime(),  es1.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(events.getEventTime(),  es1.getEventTime());	  return    orderingSign    *    Double.compare(events.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
43	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
46	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	final  int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);	  final    int    stepStart    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
47	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(eventT);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(eventT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	final  int  stepStart  =  state.evaluateStep(eventT);	  final    int    stepStart    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
48	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
51	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
55	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&!occuringEvents.contains(state))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
56	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
57	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(currentT);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(currentT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.evaluateStep(currentT);	  int    stepSize    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
58	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(currentEvent,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(currentEvent,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.evaluateStep(currentEvent,  orderingSign);	  int    stepSize    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
59	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(eventT);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(eventT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.evaluateStep(eventT);	  int    stepSize    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
60	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!occuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
61	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!occurrenceT.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!occurrenceT.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!occurrenceT.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!occuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
62	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignoreEvents.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignoreEvents.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!ignoreEvents.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!occuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
64	[BUG]  [BUGGY]  int  stepStart  =  state.getStep();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.getStep();	  int    stepStart    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
65	[BUG]  [BUGGY]  int  stepStart  =  es0.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  es0.getStep()  +  1;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  es0.getStep()  +  1;	  int    stepStart    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
66	[BUG]  [BUGGY]  int  stepSize  =  es1.getEventTime();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  es1.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  es1.getEventTime();	  int    stepSize    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  int  stepSize  =  state.getEventTime();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.getEventTime();	  int    stepSize    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  int  stepSize  =  currentEvent.getEventTime();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  currentEvent.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  currentEvent.getEventTime();	  int    stepSize    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  int  stepSize  =  eventT.getEventTime();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  eventT.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  eventT.getEventTime();	  int    stepSize    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
71	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!ignuringSign.isEmpty()  ||  eventT  ==  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    events)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
72	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
73	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
74	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentT))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentT))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(currentT))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
75	[BUG]  [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	For(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
76	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
77	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates.values())  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
78	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(currentT);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(currentT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(currentT);	  int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
79	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);	  int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
80	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(stepSize);	  int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
81	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(entrySize);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(entrySize);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(entrySize);	  int    stepStart    =    state.evaluateStep(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
82	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentT);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(currentT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	final  int  stepStart  =  state.evaluateStep(currentT);	  final    int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
83	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(stepSize);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	final  int  stepStart  =  state.evaluateStep(stepSize);	  final    int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
84	[BUG]  [BUGGY]  final  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  final  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	final  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign);	  final    int    stepStart    =    state.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
85	[BUG]  [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep(),  orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep(),  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  getStep(currentEvent.getStep(),  orderingSign);	  int    stepStart    =    getStep(currentEvent.getStep());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
86	[BUG]  [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep()  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep()  -  1);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  getStep(currentEvent.getStep()  -  1);	  int    stepStart    =    getStep(currentEvent.getStep());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
87	[BUG]  [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep()  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep()  +  1);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  getStep(currentEvent.getStep()  +  1);	  int    stepStart    =    getStep(currentEvent.getStep());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
88	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
89	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
90	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(es0.getStep());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(es0.getStep());  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(es0.getStep());	  int    stepStart    =    es1.getStep();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
91	[BUG]  [BUGGY]  int  stepStart  =  es1.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  es1.getStep()  +  1;  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  es1.getStep()  +  1;	  int    stepStart    =    es1.getStep();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
92	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(currentEvent,  orderingSign);	  int    stepStart    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
93	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(eventT);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(eventT);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(eventT);	  int    stepStart    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
94	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
95	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
96	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(eventT))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
97	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
98	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(stepEnd);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(stepEnd);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(stepEnd);	  int    stepStart    =    state.evaluateStep(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
99	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
100	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
101	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
102	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
103	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates.iterator())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events.iterator())    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
104	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
105	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  &&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
106	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
107	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
108	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
110	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
111	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
112	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
114	[BUG]  [BUGGY]  if(!occuringSign.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!occuringSign.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(!occuringSign.isEmpty())  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
115	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep(),  orderSign);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  getStep(currentEvent.getStep(),  orderSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  getStep(currentEvent.getStep(),  orderSign);	  int    stepStart    =    getStep(currentEvent.getStep());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
117	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(interpolator);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.evaluateStep(interpolator);	  int    stepSize    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
118	[BUG]  [BUGGY]  if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
119	[BUG]  [BUGGY]  return  orderingSign  /  Double.compare(es0.getEventTime(),  es0.getEventTime());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  return  orderingSign  /  Double.compare(es0.getEventTime(),  es0.getEventTime());  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	return  orderingSign  /  Double.compare(es0.getEventTime(),  es0.getEventTime());	  return    orderingSign    *    Double.compare(es1.getEventTime(),    es0.getEventTime());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
120	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  eventT  =  state.evaluateOccurred(interpolator);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
121	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
122	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
124	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
125	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    events)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
126	[BUG]  [BUGGY]  int  stepSize  =  es2.getStep();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  es2.getStep();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  es2.getStep();	  int    stepSize    =    es0.getStep();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
127	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
128	[BUG]  [BUGGY]  int  stepSize  =  es2.getEventTime();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  es2.getEventTime();  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  es2.getEventTime();	  int    stepSize    =    es0.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
129	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(!occuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!occuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
130	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
131	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
132	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
133	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
134	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
136	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
137	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
138	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
139	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
140	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates.values())  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    events.values())    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
141	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT!=  state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(eventT!=  state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(eventT!=  state.evaluateStep(interpolator)&&  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)&&    eventT!=    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
142	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
143	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
144	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
145	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
146	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
148	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
149	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator)||  eventT!=  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)&&    eventT!=    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
150	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
151	[BUG]  [BUGGY]  for(final  EventState  state  :  events.iterator())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  events.iterator())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  events.iterator())  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
152	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
153	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
154	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  break;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
155	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
156	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
157	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
158	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  continue;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
159	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsInitialized)    {    if(state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
160	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStepInterpolator(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    eventStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
161	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStepInterpolator(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
162	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(!ignuringSign.isEmpty())  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    events)    {    if(!ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
163	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
164	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(stepStart,  orderingSign);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepStart  =  state.evaluateStep(stepStart,  orderingSign);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepStart  =  state.evaluateStep(stepStart,  orderingSign);	  int    stepStart    =    state.evaluateStep(stepStart);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
165	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(!ignuringSign.isEmpty()  ||  state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!ignuringSign.isEmpty()    ||    state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
166	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
167	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  break;  }	  for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
168	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }  [BUGGY]      }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.clear();  }	  for(final    EventState    state    :    events)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.clear();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
169	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurrence(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
170	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  this.eventStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	  for(final    EventState    state    :    eventStates)    {    if(!state.evaluateOccurred(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
171	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
172	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
173	[BUG]  [BUGGY]  int  stepSize  =  state.evaluateStep(stepStart);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  int  stepSize  =  state.evaluateStep(stepStart);  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	int  stepSize  =  state.evaluateStep(stepStart);	  int    stepSize    =    state.evaluateStep(currentEvent);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
174	[BUG]  [BUGGY]  if(eventT  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventT  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventT  ==  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
175	[BUG]  [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	if(eventT!=  null)  {  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  eventT  =  state.evaluateStep(interpolator);  }  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    eventT    =    state.evaluateStep(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  =  state.evaluateStep(interpolator);  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(ignuringSign.isEmpty()  ||  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsInitialized)    {    if(ignuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  ')'  expected	33	None	replace
177	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!isLastStep)  {  eventT  =  state.evaluateStep(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }      [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!isLastStep)  {  eventT  =  state.evaluateStep(interpolator);  }  [BUGGY]        while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	306	306	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!isLastStep)  {  eventT  =  state.evaluateStep(interpolator);  }	  for(final    EventState    state    :    eventsStates)    {    if(!occuringSign.isEmpty())    {    eventT    =    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
