bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warning);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warning);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warning);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	56	None	replace
2	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warningSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warningSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  warningSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	56	None	replace
3	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  sign);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  sign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  +  sign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	56	None	replace
4	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  this.currentEvent.getEventsInitialized();  [CE]  cannot  find  symbol  currentEvent  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  this.currentEvent.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  this.currentEvent.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    currentEvent.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  currentEvent	31	None	replace
5	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  eventsState.evaluateStepHandlers();  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  eventsState.evaluateStepHandlers();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  eventsState.evaluateStepHandlers();	  final    Incrementor    <    EventState>    stepHandlers    =    eventState.evaluateStepHandlers();    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	35	None	replace
6	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  eventState.evaluateStepHandlers(occuringEvents);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  eventState.evaluateStepHandlers(occuringEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  eventState.evaluateStepHandlers(occuringEvents);	  final    Incrementor    <    EventState>    stepHandlers    =    eventState.evaluateStepHandlers();    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	35	None	replace
7	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.get(0).evaluate();	  final    EventState    <    EventState>    eventState    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	39	None	replace
8	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
9	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(events,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
10	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
11	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(adjustedEvents);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(adjustedEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(adjustedEvents);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
12	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.get(0).evaluate();	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
13	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(null);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
14	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(this);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(this);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(this);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
15	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  EventsStates.iterator();  [CE]  cannot  find  symbol  EventsStates  [FE]        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  EventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  EventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final    Iterator    <    EventState>    iterator    =    EventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  EventsStates	37	None	replace
16	[BUG]  [BUGGY]  Iterator  iterator  =  this.eventsStates.iterator();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  iterator  =  this.eventsStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  incompatible  types	8	None	replace
17	[BUG]  [BUGGY]  Iterator  iterator  =  events.iterator();  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  iterator  =  events.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  iterator  =  events.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
18	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(ignoredEvents);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(ignoredEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(ignoredEvents);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
19	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(this,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(this,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(this,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
20	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotationSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotationSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotationSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
21	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events);  [CE]  type  Incrementor  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	34	None	replace
22	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(events,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	34	None	replace
23	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occurrences);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occurrences);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occurrences);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	34	None	replace
24	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(annotations);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(annotations);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(annotations);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	34	None	replace
25	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventStates.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	52	None	replace
26	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  events.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  events	52	None	replace
27	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  +  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  +  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	15	None	replace
28	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	15	None	replace
29	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).eventState();  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).eventState();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).eventState();	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).eventState;    	non-compiled	[CE]  type  EventState  does  not  take  parameters	3	None	replace
30	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).eventState;  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).eventState;  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.get(0).eventState;	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).eventState;    	non-compiled	[CE]  type  EventState  does  not  take  parameters	3	None	replace
31	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).getEventState();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(0).getEventState();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.get(0).getEventState();	  final    EventState    <    EventState>    eventState    =    events.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
32	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  stateInitialized.getStepHandlersInitialized();  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  stateInitialized.getStepHandlersInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  stateInitialized.getStepHandlersInitialized();	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlersInitialized();    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	25	None	replace
33	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  events.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  events.get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  events.get(0);	  final    EventState    <    EventState>    state    =    eventStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
34	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventStates.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventStates.get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventStates.get(0).evaluate();	  final    EventState    <    EventState>    state    =    eventStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
35	[BUG]  [BUGGY]  final  EventState[]  eventSignsInitialized  =  state.getEventsInitialized();  [CE]  cannot  find  symbol  state  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventSignsInitialized  =  state.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventSignsInitialized  =  state.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    eventState.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  state	32	None	replace
36	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringSign  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	57	None	replace
37	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	57	None	replace
38	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size());	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents.size());    	non-compiled	[CE]  type  EventState  does  not  take  parameters	41	None	replace
39	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size());	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents.size());    	non-compiled	[CE]  type  EventState  does  not  take  parameters	41	None	replace
40	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(events.size()  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents.size());    	non-compiled	[CE]  type  EventState  does  not  take  parameters	41	None	replace
41	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsEvents.iterator();  [CE]  cannot  find  symbol  eventsEvents  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsEvents.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.eventsEvents.iterator();	  final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsEvents	5	None	replace
42	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
43	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents,  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents,  orderingSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
44	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  this.eventsInitialized.getEventsInitialized();  [CE]  cannot  find  symbol  eventsInitialized  [FE]                        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  this.eventsInitialized.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  this.eventsInitialized.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    event.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	33	None	replace
45	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    getEventsInitialized().getEventsInitialized();    	non-compiled	[CE]  ';'  expected	23	None	replace
46	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventSign.getEventsInitialized();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventSign.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventSign.getEventsInitialized();	  final    EventState[]    eventsInitialized    =    getEventsInitialized().getEventsInitialized();    	non-compiled	[CE]  ';'  expected	23	None	replace
47	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  state.getAllEventsInitialized();  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  state.getAllEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  state.getAllEventsInitialized();	  final    EventState[]    eventsInitialized    =    getAllEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  state	22	None	replace
48	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized(occuringEvents);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized(occuringEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getAllEventsInitialized(occuringEvents);	  final    EventState[]    eventsInitialized    =    getAllEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
49	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
50	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
51	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	6	None	add
52	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());	  	non-compiled	[CE]  ';'  expected	6	None	add
53	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  this.eventsStates.get(0).evaluate();	  final    EventState    <    EventState>    state    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
54	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.getEvents().iterator();  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  events.getEvents().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  events.getEvents().iterator();	  Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  events	50	None	replace
55	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.getEvents().iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.getEvents().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.getEvents().iterator();	  Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	50	None	replace
56	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size()  -  1);	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
57	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(occuringEvents.size());	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
58	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(ignoredEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(ignoredEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(ignoredEvents.size());	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
59	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  events.get(occuringEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  events.get(occuringEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  events.get(occuringEvents.size()  -  1);	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
60	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [CE]  cannot  find  symbol  eventStates  [FE]        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	60	None	replace
61	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.values().iterator();  [CE]  cannot  find  symbol  events  [FE]          AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  events.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  events.values().iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  events	60	None	replace
62	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(occuringEvents.size()  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	38	None	replace
63	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(state);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(state);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(state);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
64	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(currentEvent);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(currentEvent);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(currentEvent);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
65	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.eventsInitialized();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.eventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  state.eventsInitialized();	  final    EventState[]    eventsInitialized    =    getEventsInitialized().eventsInitialized();    	non-compiled	[CE]  ';'  expected	48	None	replace
66	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventsInitialized();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getEventsInitialized(),  eventsInitialized();	  final    EventState[]    eventsInitialized    =    getEventsInitialized().eventsInitialized();    	non-compiled	[CE]  ';'  expected	48	None	replace
67	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	4	None	add
68	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  ';'  expected	4	None	add
69	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator());	  	non-compiled	[CE]  ';'  expected	4	None	add
70	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();  [CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]          AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  final  Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    final  Iterator  <  EventState>  iterator  =  that.eventsStates.iterator();	  	non-compiled	[CE]  variable  iterator  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	4	None	add
71	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  warningSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  warningSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  warningSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
72	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  tEnd);  [CE]  type  EventState  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  tEnd);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  tEnd);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
73	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignoreSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignoreSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignoreSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
74	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingSign,  tEnd);  [CE]  type  EventState  does  not  take  parameters  [FE]                          AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingSign,  tEnd);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingSign,  tEnd);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
75	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
76	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(this,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(this,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(this,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
77	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsInitialized,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsInitialized,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsInitialized,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
78	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();	  Iterator    <    EventState>    iterator    =    stateInitialized.iterator();    	non-compiled	[CE]  package  state  does  not  exist	21	None	replace
79	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.getEventsInitialized();  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.getEventsInitialized();	  Iterator    <    EventState>    iterator    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	47	None	replace
80	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.getEventsInitialized();  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.getEventsInitialized();	  Iterator    <    EventState>    iterator    =    state.getEventsInitialized();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	47	None	replace
81	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    stateInitialized.iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	53	None	replace
82	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occuringEvents,  eventsStates);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occuringEvents,  eventsStates);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(occuringEvents,  eventsStates);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(eventsStates);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	44	None	replace
83	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsStates,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsStates,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(eventsStates,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(eventsStates);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	44	None	replace
84	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  incompatible  types	55	None	replace
85	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [CE]  package  events  does  not  exist  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  package  events  does  not  exist	55	None	replace
86	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().iterator().next();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().iterator().next();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.values().iterator().next();	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
87	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventStates.values().get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventStates.values().get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventStates.values().get(0);	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
88	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(this);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(this);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(this);	  final    EventState    <    EventState>    state    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
89	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(events);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(events);	  final    EventState    <    EventState>    state    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
90	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator().next();  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator().next();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator().next();	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
91	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(0).evaluate();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(0).evaluate();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.values().get(0).evaluate();	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
92	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  static  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  static  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    static  final  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
93	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized().getEventsInitialized();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized().getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getAllEventsInitialized().getEventsInitialized();	  final    EventState[]    eventsInitialized    =    getAllEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
94	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized().eventsInitialized;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  getAllEventsInitialized().eventsInitialized;  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  getAllEventsInitialized().eventsInitialized;	  final    EventState[]    eventsInitialized    =    getAllEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
95	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventStates.iterator();  [CE]  package  state  does  not  exist  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  state.eventStates.iterator();	  Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	42	None	replace
96	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(interpolator);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(interpolator);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(interpolator);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
97	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
98	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  state.stateInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    stateInitialized.iterator();    	non-compiled	[CE]  package  state  does  not  exist	53	None	replace
99	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();  [CE]  cannot  find  symbol  stateInitialized  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    stateInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	53	None	replace
100	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	57	None	replace
101	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.getEventsInitialized();  [CE]  cannot  find  symbol  stateInitialized  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.getEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  stateInitialized.getEventsInitialized();	  Iterator    <    EventState>    iterator    =    state.getEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	47	None	replace
102	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.eventStates.iterator();	  final    Iterator    <    EventState>    iterator    =    state.eventStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	61	None	replace
103	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size());	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents.size());    	non-compiled	[CE]  type  EventState  does  not  take  parameters	41	None	replace
104	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(ignoredEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(ignoredEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.values().get(ignoredEvents.size()  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
105	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(eventsStates.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().get(eventsStates.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.values().get(eventsStates.size()  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
106	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  this.eventState.evaluateStepHandlers();  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  this.eventState.evaluateStepHandlers();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  this.eventState.evaluateStepHandlers();	  final    Incrementor    <    EventState>    stepHandlers    =    eventState.evaluateStepHandlers();    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	35	None	replace
107	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size()  -  1);	  final    EventState    <    EventState>    eventState    =    events.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
108	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.events.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.events.get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.events.get(0);	  final    EventState    <    EventState>    eventState    =    events.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
109	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.get(ignoredEvents.size());	  final    EventState    <    EventState>    eventState    =    events.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
110	[BUG]  [BUGGY]  Iterator  iterator  =  eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  iterator  =  eventsStates.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  iterator  =  eventsStates.values().iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
111	[BUG]  [BUGGY]  Iterator  iterator  =  state.eventsStates.iterator();  [CE]  package  state  does  not  exist  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  iterator  =  state.eventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  iterator  =  state.eventsStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	8	None	replace
112	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  statesInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    state.eventsInitialized.iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	17	None	replace
113	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();	  Iterator    <    EventState>    iterator    =    statesInitialized.iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	20	None	replace
114	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.getEvents().iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.getEvents().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.getEvents().iterator();	  Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	50	None	replace
115	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();	  final    Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
116	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
117	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es.values().iterator();  [CE]  cannot  find  symbol  es  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  es.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  es.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  es	52	None	replace
118	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(null);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(null);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(null);	  final    EventState    <    EventState>    state    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
119	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(interpolator);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(interpolator);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(0).evaluate(interpolator);	  final    EventState    <    EventState>    state    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	9	None	replace
120	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesInitialized);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesInitialized);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesInitialized);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
121	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
122	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart,  orderingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart,  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(stepStart,  orderingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
123	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  Ilerator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    Ilerator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
124	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  WeakReference  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  WeakReference  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    WeakReference  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
125	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(events);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(events);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
126	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(entitiesInitialized);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(entitiesInitialized);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).evaluate(entitiesInitialized);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).evaluate();    	non-compiled	[CE]  type  EventState  does  not  take  parameters	1	None	replace
127	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents.size()  +  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents.size()  +  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredEvents.size()  +  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	15	None	replace
128	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(occuringSign);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(occuringSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.get(occuringSign);	  final    EventState    <    EventState>    eventState    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	39	None	replace
129	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.get(ignoredEvents.size()  -  1);	  final    EventState    <    EventState>    eventState    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	39	None	replace
130	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignorantSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignorantSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(orderingSign,  ignorantSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
131	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingEvents);  [CE]  type  EventState  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign,  orderingEvents);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign,    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	14	None	replace
132	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsState.stepHandlers.iterator();  [CE]  package  eventsState  does  not  exist  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsState.stepHandlers.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventsState.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  package  eventsState  does  not  exist	49	None	replace
133	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotations);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotations);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(annotations);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
134	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(eventsStates);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(eventsStates);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(eventsStates);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
135	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.get(ignoredEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.get(ignoredEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  this.eventsStates.get(ignoredEvents.size()  -  1);	  final    EventState    <    EventState>    state    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
136	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesInitialized);  [CE]  type  Incrementor  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesInitialized);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesInitialized);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
137	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  -  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  -  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  -  orderingSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	56	None	replace
138	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size()  -  1);	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
139	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size());  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.values().get(ignoredEvents.size());	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
140	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(events.size()  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(events.size()  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(events.size()  -  1);	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
141	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  events.values().get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  events.values().get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  events.values().get(0);	  final    EventState    <    EventState>    eventState    =    events.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	2	None	replace
142	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(rollingSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(rollingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(rollingSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
143	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(entitiesSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	24	None	replace
144	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(events.size());  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.get(events.size());  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.get(events.size());	  final    EventState    <    EventState>    state    =    eventsStates.get(ignoredEvents.size()    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	45	None	replace
145	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.getEvents().iterator();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsStates.getEvents().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventsStates.getEvents().iterator();	  Iterator    <    EventState>    iterator    =    state.getEvents().iterator();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
146	[BUG]  [BUGGY]  Iterator  iterator  =  eventStates.iterator();  [CE]  cannot  find  symbol  eventStates  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  iterator  =  eventStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  iterator  =  eventStates.iterator();	  Iterator    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventStates	8	None	replace
147	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.state.eventsInitialized.iterator();  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  this.state.eventsInitialized.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  this.state.eventsInitialized.iterator();	  final    Iterator    <    EventState>    iterator    =    state.eventsInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
148	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  EventsStates.iterator();  [CE]  cannot  find  symbol  EventsStates  [FE]        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  EventsStates.iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  EventsStates.iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.iterator();    final    Iterator    <    EventState>    iterator    =    EventsStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  EventsStates	37	None	replace
149	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized.iterator();  [CE]  package  stateInitialized  does  not  exist  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  stateInitialized.eventsInitialized.iterator();	  Iterator    <    EventState>    iterator    =    state.eventsInitialized.iterator();    	non-compiled	[CE]  package  stateInitialized  does  not  exist	19	None	replace
150	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();  [CE]  cannot  find  symbol  stateInitialized  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  this.stateInitialized.iterator();	  Iterator    <    EventState>    iterator    =    stateInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	21	None	replace
151	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(currentSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(currentSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(currentSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
152	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(entitiesSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                    AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(entitiesSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(entitiesSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(occuringSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	13	None	replace
153	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.values().get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.values().get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.values().get(0);	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
154	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.values().iterator();	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
155	[BUG]  [BUGGY]  EventState  <  EventState>  eventState  =  eventsStates.values().get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  EventState  <  EventState>  eventState  =  eventsStates.values().get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	EventState  <  EventState>  eventState  =  eventsStates.values().get(0);	  final    EventState    <    EventState>    eventState    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	58	None	replace
156	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  state.getEventStates().iterator();	  Iterator    <    EventState>    iterator    =    eventStates.iterator();    	non-compiled	[CE]  cannot  find  symbol  state	42	None	replace
157	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesSign);  [CE]  type  Incrementor  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesSign);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
158	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart);  [CE]  type  Incrementor  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(stepStart);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringSign);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	43	None	replace
159	[BUG]  [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.values().iterator();  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Iterator  <  EventState>  iterator  =  state.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Iterator  <  EventState>  iterator  =  state.values().iterator();	  final    Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  state	60	None	replace
160	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventState.stepHandlers.iterator();  [CE]  package  eventState  does  not  exist  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  eventState.stepHandlers.iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  eventState.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  package  eventState  does  not  exist	49	None	replace
161	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.remove(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.remove(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  this.eventsStates.remove(0);	  final    EventState    <    EventState>    state    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	10	None	replace
162	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.remove(0);  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  this.eventsStates.remove(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  this.eventsStates.remove(0);	  final    EventState    <    EventState>    eventState    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	39	None	replace
163	[BUG]  [BUGGY]  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  EventState  <  EventState>  eventState  =  this.eventsStates.get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	EventState  <  EventState>  eventState  =  this.eventsStates.get(0);	  final    EventState    <    EventState>    eventState    =    this.eventsStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	39	None	replace
164	[BUG]  [BUGGY]  EventState  <  EventState>  state  =  eventsStates.get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  EventState  <  EventState>  state  =  eventsStates.get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	EventState  <  EventState>  state  =  eventsStates.get(0);	  final    EventState    <    EventState>    state    =    eventStates.get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	11	None	replace
165	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.values().iterator();  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  Iterator  <  EventState>  iterator  =  state.values().iterator();  [BUGGY]      final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	Iterator  <  EventState>  iterator  =  state.values().iterator();	  Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  cannot  find  symbol  state	52	None	replace
166	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(clockStart  -  1);  [CE]  type  EventState  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(clockStart  -  1);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(clockStart  -  1);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    -    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	57	None	replace
167	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(events);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(events);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredEvents);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	12	None	replace
168	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlersInitialized(),  this);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlersInitialized(),  this);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlersInitialized(),  this);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlersInitialized();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
169	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).getEventState();  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(0).getEventState();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(0).getEventState();	  final    EventState    <    EventState>    eventState    =    eventsStates.get(0).eventState;    	non-compiled	[CE]  type  EventState  does  not  take  parameters	3	None	replace
170	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().iterator();  [CE]  type  EventState  does  not  take  parameters  [FE]              AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  eventsStates.values().iterator();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  eventsStates.values().iterator();	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
171	[BUG]  [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.values().get(0);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  state  =  this.eventsStates.values().get(0);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  state  =  this.eventsStates.values().get(0);	  final    EventState    <    EventState>    state    =    eventsStates.values().get(0);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	59	None	replace
172	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesStates);  [CE]  type  Incrementor  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesStates);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.evaluateStepHandlers(entitiesStates);	  final    Incrementor    <    EventState>    stepHandlers    =    state.evaluateStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	34	None	replace
173	[BUG]  [BUGGY]  final  EventState[]  eventsInitialized  =  createAllEventsInitialized();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState[]  eventsInitialized  =  createAllEventsInitialized();  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState[]  eventsInitialized  =  createAllEventsInitialized();	  final    EventState[]    eventsInitialized    =    getAllEventsInitialized();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
174	[BUG]  [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingEvents);  [CE]  type  Incrementor  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingEvents);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  Incrementor  <  EventState>  stepHandlers  =  state.getStepHandlers(orderingEvents);	  final    Incrementor    <    EventState>    stepHandlers    =    state.getStepHandlers(occuringEvents);    	non-compiled	[CE]  type  Incrementor  does  not  take  parameters	26	None	replace
175	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  +  2);  [CE]  type  EventState  does  not  take  parameters  [FE]                      AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  +  2);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  +  2);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    1);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	15	None	replace
176	[BUG]  [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  orderingSign);  [CE]  type  EventState  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {        [BUGGY]  final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  orderingSign);  [BUGGY]      final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  final  double  eventT  =  currentEvent.getEventTime();  interpolator.setSoftPreviousTime(previousT);  interpolator.setSoftCurrentTime(eventT);  interpolator.setInterpolatedTime(eventT);  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	311	311	1	replace	final  EventState  <  EventState>  eventState  =  eventsStates.get(ignoredSign  /  orderingSign);	  final    EventState    <    EventState>    eventState    =    eventsStates.get(ignoredSign    +    orderingSign);    	non-compiled	[CE]  type  EventState  does  not  take  parameters	56	None	replace
