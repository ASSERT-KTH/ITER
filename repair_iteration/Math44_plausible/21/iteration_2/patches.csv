bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.expandable  =  equations.elements()  ||  isLastStep;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.elements()  ||  isLastStep;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements()  ||  isLastStep;	  this.expandable    =    equations.elements()    &&    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  this.expandable  =  equations.elements()  &&  isLastStep  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.elements()  &&  isLastStep  +  1;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements()  &&  isLastStep  +  1;	  this.expandable    =    equations.elements()    &&    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  this.expandable  =  equations.elements()  &&  isFirstStep;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.elements()  &&  isFirstStep;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements()  &&  isFirstStep;	  this.expandable    =    equations.elements()    &&    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations.elements);    }    	non-compiled	[CE]  '.class'  expected	4	None	replace
5	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations.elements);    }    	non-compiled	[CE]  >  expected	4	None	replace
6	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  >  expected	38	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
11	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if    	non-compiled	[CE]  '('  expected	66	None	replace
12	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if    	non-compiled	[CE]  '('  expected	66	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if    	non-compiled	[CE]  '('  expected	66	None	replace
14	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if    	non-compiled	[CE]  '('  expected	66	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equivalences.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  '	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  line  end  in  character  literal	63	None	replace
22	[BUG]  [BUGGY]  this.expandable  =  equations.get(equations.size());  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(equations.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(equations.size());	  this.expandable    =    equations.get(equations.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
23	[BUG]  [BUGGY]  this.expandable  =  equations.get(equivalences.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(equivalences.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(equivalences.size());	  this.expandable    =    equations.get(equations.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
24	[BUG]  [BUGGY]  this.expandable  =  equations.get(equalations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(equalations.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(equalations.size());	  this.expandable    =    equations.get(equations.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==  null  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==  null  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==  null	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	11	None	replace
26	[BUG]  [BUGGY]  Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	76	None	replace
27	[BUG]  [BUGGY]  int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	76	None	replace
28	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	76	None	replace
29	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	76	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep,    expandable);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep,    expandable);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep,    expandable);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep,    expandable);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
34	[BUG]  [BUGGY]  this.expandable  =  equations.values()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.values()  -  1;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.values()  -  1;	  this.expandable    =    equations.values();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
35	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equals!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	23	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
38	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
39	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
40	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations.getExpandable();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations.getExpandable();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations.getExpandable();	  this.expandable    =    equations!=    null?    equations.getExpandable()    :    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
41	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getEquivalence();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getEquivalence();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getEquivalence();	  this.expandable    =    equations!=    null?    equations.getExpandable()    :    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
42	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableStatement();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getExpandableStatement();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getExpandableStatement();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableStatements();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getExpandableStatements();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getExpandableStatements();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  This.expandable  =  equations.size();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  This.expandable  =  equations.size();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	This.expandable  =  equations.size();	  this.expandable    =    equations.size()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
45	[BUG]  [BUGGY]  this.events.remove(events.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(events.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(events.size());	  this.events.remove(events);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
46	[BUG]  [BUGGY]  this.events.add(events);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.add(events);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.add(events);	  this.events.remove(events);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    equations.get(i));    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
51	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    equations.get(i));    }    	non-compiled	[CE]  >  expected	57	None	replace
52	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    equations.get(i));    }    	non-compiled	[CE]  '.class'  expected	57	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
55	[BUG]  [BUGGY]  this.expandable  =  equations.equations;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equations;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equations;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
56	[BUG]  [BUGGY]  this.expandable  =  equations.expandable;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.expandable;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.expandable;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  this.expandable  =  equations.equations.equivalence;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equations.equivalence;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equations.equivalence;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
60	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	64	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(1),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(1),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(1),  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(0),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
62	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(0),    isLastStep);    }    	non-compiled	[CE]  >  expected	16	None	replace
63	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  >  expected	94	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
67	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.size  -  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.size  -  1);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
68	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.size  +  1);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.size  +  1);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
69	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.size());	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.expandables.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.expandables.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.expandables.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(0);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(0);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(0);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
72	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations.getExpandableState();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations.getExpandableState();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations.getExpandableState();	  this.expandable    =    equations!=    null?    equations.getExpandableState()    :    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
73	[BUG]  [BUGGY]  this.expandable  =  equations.equals(expansionable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(expansionable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(expansionable);	  this.expandable    =    expansionable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
74	[BUG]  [BUGGY]  int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  >  expected	88	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
78	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	10	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	10	None	replace
80	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	10	None	replace
82	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	60	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
85	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  >  expected	29	None	replace
86	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	29	None	replace
87	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.equivalence);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.equivalence);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.equivalence);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
88	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences.elements);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equivalences.elements);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equivalences.elements);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  ==  '	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	43	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expan  ==  '	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	43	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  1;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	43	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addElement(i,  equations);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
99	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	3	None	replace
100	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  '.class'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  '.class'  expected	3	None	replace
101	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableSize();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getExpandableSize();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getExpandableSize();	  this.expandable    =    equations.getEquivalenceSize();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
102	[BUG]  [BUGGY]  this.expandable  =  equations.getEquivalenceSize()  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getEquivalenceSize()  +  1;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getEquivalenceSize()  +  1;	  this.expandable    =    equations.getEquivalenceSize();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
103	[BUG]  [BUGGY]  this.expandable  =  equations.getExecutableSize();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getExecutableSize();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getExecutableSize();	  this.expandable    =    equations.getEquivalenceSize();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
108	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	72	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
110	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	72	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
115	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	7	None	replace
116	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [CE]  '('  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	7	None	replace
117	[BUG]  [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(ex  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(ex  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equixes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(ex	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	7	None	replace
118	[BUG]  [BUGGY]  this.expandable  =  isLastStep?  equations.equals(this.expandable):  equations.equals(this.expandable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  isLastStep?  equations.equals(this.expandable):  equations.equals(this.expandable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  isLastStep?  equations.equals(this.expandable):  equations.equals(this.expandable);	  this.expandable    =    equations.equals(this.expandable);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
119	[BUG]  [BUGGY]  this.expandable  =  equations.get(this.expandable);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(this.expandable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(this.expandable);	  this.expandable    =    equations.equals(this.expandable);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
120	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	  if(equals!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	5	None	replace
121	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	  if(equals!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	5	None	replace
122	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  equations.getExpandable()  :  equations;	  this.expandable    =    equations!=    null?    equations.getExpandable()    :    equations;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
123	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  >  expected	18	None	replace
124	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  >  expected	18	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    	non-compiled	[CE]  ')'  expected	22	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    	non-compiled	[CE]  ')'  expected	22	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
132	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
133	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
134	[BUG]  [BUGGY]  Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	Integer  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  >  expected	27	None	replace
135	[BUG]  [BUGGY]  this.expandable  =  equations.equals(expansion);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(expansion);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(expansion);	  this.expandable    =    expandable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
136	[BUG]  [BUGGY]  this.expandable  =  equations.equals(expandeable);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(expandeable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(expandeable);	  this.expandable    =    expandable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
137	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  >  expected	89	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equals.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equals.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equals.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
141	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
142	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
143	[BUG]  [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equals!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	42	None	replace
144	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==	  if(equals!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0,  isStep  =  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isStep  =  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isStep  =  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
148	[BUG]  [BUGGY]  this.events.add(events.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.add(events.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.add(events.size());	  this.events.remove(events.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
149	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  '.class'  expected	1	None	replace
150	[BUG]  [BUGGY]  Integer  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  Integer  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	Integer  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	1	None	replace
151	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  equations.getExpandableState()  :  equations;	  this.expandable    =    equations!=    null?    equations.getExpandableState()    :    equations;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equations.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equations.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)expandables.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)expandables.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)expandables.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equations.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
158	[BUG]  [BUGGY]  this.expandable  =  EquationState.size();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  EquationState.size();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  EquationState.size();	  this.expandable    =    equations.size()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
159	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equivalences);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equivalences);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equivalences);	  this.expandable    =    equations.equalsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
160	[BUG]  [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences    ==    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	78	None	replace
161	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(0),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
165	[BUG]  [BUGGY]  this.events.add(equations);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.add(equations);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.add(equations);	  this.events.add(event);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
166	[BUG]  [BUGGY]  this.events.add(elements);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.add(elements);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.add(elements);	  this.events.add(event);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
167	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	73	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	73	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
170	[BUG]  [BUGGY]  For(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	81	None	replace
171	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	81	None	replace
172	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
174	[BUG]  [BUGGY]  this.events.remove(equations.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(equations.size());  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(equations.size());	  this.events.remove(equations);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
175	[BUG]  [BUGGY]  this.events.remove(equations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(equations.size()  -  1);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(equations.size()  -  1);	  this.events.remove(equations);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)escapes.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  ';'  expected	20	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  values.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  values.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  values.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
186	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	27	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
190	[BUG]  [BUGGY]  this.expandable  =  equations.equals(expanable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(expanable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(expanable);	  this.expandable    =    expandable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  ')'  expected	37	None	replace
194	[BUG]  [BUGGY]  this.expandable  =  equations.expandableStatementsInitialized;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.expandableStatementsInitialized;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.expandableStatementsInitialized;	  this.expandable    =    equations.equationsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
195	[BUG]  [BUGGY]  this.expandable  =  equations.valuesInitialized;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.valuesInitialized;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.valuesInitialized;	  this.expandable    =    equations.equationsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
198	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
199	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandable.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandable.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)expandable.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
200	[BUG]  [BUGGY]  this.expandable  =  equations.get(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(0);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(0);	  this.expandable    =    equations.size()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
202	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
203	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	61	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
205	[BUG]  [BUGGY]  this.events.remove(element);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(element);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(element);	  this.events.add(event);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
206	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	59	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable!=	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expandable  ==	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
209	[BUG]  [BUGGY]  if(equixes  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [CE]  '('  expected  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equixes  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equixes  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	7	None	replace
210	[BUG]  [BUGGY]  this.expandable  =  equations.getEquals();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getEquals();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getEquals();	  this.expandable    =    equations.getElements();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
213	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	73	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  elements.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	43	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    '    	non-compiled	[CE]  illegal  line  end  in  character  literal	43	None	replace
216	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations);	  this.expandable    =    equations.equalsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
217	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  this.expandable);  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  this.expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  this.expandable);  }	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  >  expected	82	None	replace
218	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  >  expected	82	None	replace
219	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i);  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i);  }	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  >  expected	82	None	replace
220	[BUG]  [BUGGY]  this.expandable  =  equations.getExpandableState(equations.size());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getExpandableState(equations.size());  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getExpandableState(equations.size());	  this.expandable    =    equations.elements.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep,    expandable);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
222	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	60	None	replace
223	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	60	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get0,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get0,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get0,  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(0),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
226	[BUG]  [BUGGY]  this.expandable  =  equations.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.clone();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.clone();	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
227	[BUG]  [BUGGY]  this.expandable  =  equations.next();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.next();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.next();	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
228	[BUG]  [BUGGY]  this.expandable  =  equations.get(name);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.get(name);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(name);	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
229	[BUG]  [BUGGY]  this.expandable  =  equations.getEquations();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.getEquations();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getEquations();	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  }	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan!=    	non-compiled	[CE]  ')'  expected	22	None	replace
231	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.values);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.values);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.values);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
232	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	90	None	replace
233	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	90	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
235	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	  for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    equations.get(i));    }    	non-compiled	[CE]  >  expected	57	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable  ==	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    ==    	non-compiled	[CE]  ')'  expected	12	None	replace
243	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	75	None	replace
244	[BUG]  [BUGGY]  this.expandable  =  Equations.size();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  Equations.size();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  Equations.size();	  this.expandable    =    equations.size()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
245	[BUG]  [BUGGY]  this.expansionable  =  equations.equals(expansionable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expansionable  =  equations.equals(expansionable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expansionable  =  equations.equals(expansionable);	  this.expandable    =    expansionable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isFirstStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0))  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  ';'  expected	41	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
249	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  '.class'  expected	1	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addElement(i,  equations);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
252	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
253	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  }	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
254	[BUG]  [BUGGY]  this.expandable  =  equations.values()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.values()  +  1;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.values()  +  1;	  this.expandable    =    equations.values();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
255	[BUG]  [BUGGY]  this.expandable  =  equations.elements.equals(equations.elements);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.elements.equals(equations.elements);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements.equals(equations.elements);	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.clone());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.clone());  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.clone());  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandative!=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandative!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandative!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
261	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	63	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  ')'  expected	44	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  ')'  expected	6	None	replace
265	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
268	[BUG]  [BUGGY]  this.expandable  =  expansionable.equals(this.expandable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  expansionable.equals(this.expandable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  expansionable.equals(this.expandable);	  this.expandable    =    equations.equals(this.expandable);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(  }	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)expandables.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
270	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(0,  equations);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(0,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(0,  equations);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
271	[BUG]  [BUGGY]  this.expandable  =  equations.values().expandable;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.values().expandable;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.values().expandable;	  this.expandable    =    equations.values();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
272	[BUG]  [BUGGY]  this.expandable  =  equations.values().clone();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.values().clone();  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.values().clone();	  this.expandable    =    equations.values();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
273	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.size();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.size();	  this.expandable    =    equations!=    null?    equations.getExpandable()    :    equations;    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
274	[BUG]  [BUGGY]  this.expandable  =  equations.equals(extendable);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(extendable);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(extendable);	  this.expandable    =    expandable.equals(equations);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
276	[BUG]  [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
277	[BUG]  [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLas  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLas  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLas	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
278	[BUG]  [BUGGY]  this.events.remove(0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(0);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(0);	  this.events.remove(events.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
282	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if    	non-compiled	[CE]  '('  expected	10	None	replace
283	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep  =  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  For(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	27	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >>  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >>  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  >>	  for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
285	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(	  if(equivalences    ==    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
286	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  +  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  +  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  +  1;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  ';'  expected	80	None	replace
287	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  islastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  islastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  islastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expansionable);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expansionable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expansionable);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
289	[BUG]  [BUGGY]  this.events.remove(event);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.events.remove(event);  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(event);	  this.events.add(event);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
290	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
291	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(0);  }	  if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    expandable    =(ExpandableStatefulODE)equivalences.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  iterations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  iterations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  iterations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    ==    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
295	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.elements)&&  isLastStep;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.elements)&&  isLastStep;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.elements)&&  isLastStep;	  this.expandable    =    equations.equals(equations.elements);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
296	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  equations.size();  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    equations.size();    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  ';'  expected	28	None	replace
297	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  ')'  expected	72	None	replace
298	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.length;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand  ==	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
302	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.equalsInitialized);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.equalsInitialized);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.equalsInitialized);	  this.expandable    =    equations.equalsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
303	[BUG]  [BUGGY]  int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addElement(i,  equations);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep  =  0;  i  <  isLastStep;  i++)  {  extendable.addElement(i,  equations);  }	  int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	76	None	replace
304	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    ==    	non-compiled	[CE]  '('  expected	37	None	replace
305	[BUG]  [BUGGY]  this.expandable  =  equations.equations.size();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equations.size();  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equations.size();	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
306	[BUG]  [BUGGY]  this.expandable  =  equations.equations.size;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equations.size;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equations.size;	  this.expandable    =    equations.equivalence;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addElement(i,  equations.elements);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addElement(i,  equations.elements);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep  +  1;  i++)  {  expandable.addElement(i,  equations.elements);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations.elements);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
309	[BUG]  [BUGGY]  this.expandable  =  equations!=  null  &&  equations.getExpandableState()  :  equations;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations!=  null  &&  equations.getExpandableState()  :  equations;  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null  &&  equations.getExpandableState()  :  equations;	  this.expandable    =    equations!=    null?    equations.getExpandableState()    :    equations;    	non-compiled	[CE]  ';'  expected	85	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  valuesInitialized;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
311	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	7	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  ==  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  ==	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equixes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=  expansionable)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=  expansionable)  {  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expandable!=  expansionable)  {	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    extendable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
316	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
317	[BUG]  [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(elements!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  if(equations!=    null)    {    for(int    i    =    0,    isLastStep    =    elements.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
318	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
319	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable  ==  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	  if(equivalents!=    null)    {    for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable  ==  }	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(ex    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
321	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size,  expansionable);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.equals(equations.size,  expansionable);  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.size,  expansionable);	  this.expandable    =    equations.equals(equations.size);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
322	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isFirstStep;  i++)  {  expandable.addChangeListener(this);  }	  if(expandable!=    null)    {    for(int    i    =    0,    isFirstStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equinoxes.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)this.equations.get(i);  if(expand!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand!=    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  expansionable.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  expansionable.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  expansionable.size();  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
326	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  2;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	  for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expansionable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  elements.get(0);  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  0,  isStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isStep  =  elements.size();  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }	  for(int    i    =    0,    isLastStep;    i    <    elements.size();    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
329	[BUG]  [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	71	None	replace
330	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if	  if(equinoxes!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if    	non-compiled	[CE]  '('  expected	58	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(expandable!=  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)this.equations.get(i);  if(expandable!=	  for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expandable!=    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
332	[BUG]  [BUGGY]  this.expandable  =  equations.elements()  &&  expansion;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  this.expandable  =  equations.elements()  &&  expansion;  [BUGGY]        [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements()  &&  expansion;	  this.expandable    =    equations.elements()    &&    isLastStep;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;      [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }  [BUGGY]      }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  expandable);  }	  for(int    i    =    0,    isLastStep    =    equations.size();    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
