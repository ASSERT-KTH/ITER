bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  '.class'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations.elements);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	14	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equixes.get(i);  if(expand	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	14	None	replace
8	[BUG]  [BUGGY]  this.expandable  =  equations.getElements();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.getElements();  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getElements();	  this.expandable    =    equations.elements();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  this.expandable  =  equations.elements()  &&  isLastStep;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.elements()  &&  isLastStep;  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements()  &&  isLastStep;	  this.expandable    =    equations.elements();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    	non-compiled	[CE]  '('  expected	15	None	replace
11	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(ex  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(ex  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(ex	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	15	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand  ==	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(0),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan!=	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	16	None	replace
24	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getExpandable();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getExpandable();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  null  :  equations.getExpandable();	      this.expandable    =    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getExpandable();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getExpandable();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.getExpandable();	      this.expandable    =    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	For(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  '.class'  expected	6	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  equations.size();  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  this.expandable  =  equations.equals(this.expandable);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equals(this.expandable);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(this.expandable);	  this.expandable    =    equations.equals(expandable);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  this.expandable  =  equations.get(equations.size()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.get(equations.size()  -  1);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.get(equations.size()  -  1);	  this.expandable    =    equations.equals(expandable);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  this.expandable  =  equations.equationsInitialized;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equationsInitialized;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equationsInitialized;	      this.expandable    =    equations.elementsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  this.expandable  =  equations.equivalence;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equivalence;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equivalence;	      this.expandable    =    equations.elementsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.size);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equals(equations.size);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.size);	      this.expandable    =    equations.elementsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand!=	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(expand  ==	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  elements.size();  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equals!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  '	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  line  end  in  character  literal	12	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  ==	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
45	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getExpandableState();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  null  :  equations.getExpandableState();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  null  :  equations.getExpandableState();	      this.expandable    =    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getExpandableState();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations  ==  null?  null  :  equations.getExpandableState();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations  ==  null?  null  :  equations.getExpandableState();	      this.expandable    =    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  expandable  =(ExpandableStatefulODE)equivalences.get(i);  }	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  this.expandable  =  equations.size()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.size()  -  1;  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.size()  -  1;	  this.expandable    =    equations.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  this.expandable  =  equations.size()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.size()  +  1;  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.size()  +  1;	  this.expandable    =    equations.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  this.expandable  =  equations.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.size()  -  2;  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.size()  -  2;	  this.expandable    =    equations.size();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  this.events.remove(events.size()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.events.remove(events.size()  -  1);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(events.size()  -  1);	  this.events.clear();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
53	[BUG]  [BUGGY]  this.events.remove(events);  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.events.remove(events);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(events);	  this.events.clear();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep,  expandable);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep  +  1);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  this.expandable  =  equations.equalsInitialized;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equalsInitialized;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equalsInitialized;	      this.expandable    =    equations.elementsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  equations.get(i));  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
58	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  '('  expected	16	None	replace
59	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	16	None	replace
60	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  i++)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	  if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    i++)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  '('  expected	16	None	replace
61	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  '('  expected	12	None	replace
62	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  '('  expected	12	None	replace
63	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expan	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expan    	non-compiled	[CE]  ')'  expected	12	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expansionable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  extendable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  '('  expected	11	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)expandables.get(i);  if(	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  this.expandable  =  equations.values();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.values();  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.values();	  this.expandable    =    equations.elements();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  this.events.remove(equations);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.events.remove(equations);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.remove(equations);	  this.events.clear();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	13	None	replace
72	[BUG]  [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equinoxes!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	13	None	replace
73	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expansion  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expansion    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	13	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(expandable!=	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
75	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if(ex	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  ')'  expected	14	None	replace
76	[BUG]  [BUGGY]  int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  >  expected	10	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep  +  1);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
78	[BUG]  [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalences  ==  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    	non-compiled	[CE]  '('  expected	15	None	replace
79	[BUG]  [BUGGY]  this.expandable  =  expansionable.equals(equations);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  expansionable.equals(equations);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  expansionable.equals(equations);	  this.expandable    =    equations.equals(expandable);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isFirstStep;  i  <  isLastStep;  i++)  {  expandable.addChangeListener(this);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addChangeListener(this);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep,  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep,    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  expandable.addElement(i,  equations);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    expandable.addElement(i,    equations);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  this.expandable  =  expandable.equals(equations);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  expandable.equals(equations);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  expandable.equals(equations);	  this.expandable    =    equations.equals(expandable);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations;	      this.expandable    =    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations.getExpandableState();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations.getExpandableState();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandableState()  :  equations.getExpandableState();	      this.expandable    =    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
87	[BUG]  [BUGGY]  this.expandable  =  equations.elements.getExpandableState();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.elements.getExpandableState();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements.getExpandableState();	      this.expandable    =    equations.getExpandableState();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
88	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equivalents!=  null)  {  for(int  i  =  0,  isLastStep  =  equations.size();  i  <  isLastStep;  i++)  {  setEquations(equivalents.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(equivalents.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equinoxes.get(i);  if	      if(equations!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equinoxes.get(i);    if(expand    	non-compiled	[CE]  '('  expected	14	None	replace
91	[BUG]  [BUGGY]  this.expandable  =  equations.getEquivalenceSize();  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.getEquivalenceSize();  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.getEquivalenceSize();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	for(int  i  =  0;  i  <  equations.size();  ++i)  {  ExpandableStatefulODE  expandable  =(ExpandableStatefulODE)equivalences.get(i);  if(expand!=	      if(equivalences!=    null)    {    for(int    i    =    0;    i    <    equations.size();    ++i)    {    ExpandableStatefulODE    expandable    =(ExpandableStatefulODE)equivalences.get(i);    if(expand    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(expandable!=  null)  {  for(int  i  =  0,  isLastStep;  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
94	[BUG]  [BUGGY]  if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	if(equations!=  null)  {  for(int  i  =  0,  isLastStep  =  elements.size();  i  <  isLastStep;  i++)  {  setEquations(elements.get(i),  isLastStep);  }	      if(equations!=    null)    {    for(int    i    =    0,    isLastStep;    i    <    isLastStep;    i++)    {    setEquations(elements.get(i),    isLastStep);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
95	[BUG]  [BUGGY]  this.events.add(event);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.events.add(event);  [BUGGY]      [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.events.add(event);	  this.events.clear();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
96	[BUG]  [BUGGY]  this.expandable  =  equations.equals(equations.elements);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.equals(equations.elements);  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.equals(equations.elements);	      this.expandable    =    equations.elementsInitialized;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
97	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations;  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations;	      this.expandable    =    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getExpandable();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getExpandable();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations!=  null?  equations.getExpandable()  :  equations.getExpandable();	      this.expandable    =    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
99	[BUG]  [BUGGY]  this.expandable  =  equations.elements.getExpandable();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    protected  void  setEquations(final  ExpandableStatefulODE  equations)  {  this.expandable  =  equations;    [BUGGY]  this.expandable  =  equations.elements.getExpandable();  [BUGGY]    }  [CLASS]  AbstractIntegrator  1  [METHOD]  setEquations  [RETURN_TYPE]  void  ExpandableStatefulODE  equations  [VARIABLES]  ExpandableStatefulODE  equations  expandable  boolean  isLastStep  resetOccurred  statesInitialized  double  convergence  maxCheckInterval  stepSize  stepStart  Collection  eventsStates  stepHandlers  Incrementor  evaluations  String  name  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	193	193	1	replace	this.expandable  =  equations.elements.getExpandable();	      this.expandable    =    equations.getExpandable();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
