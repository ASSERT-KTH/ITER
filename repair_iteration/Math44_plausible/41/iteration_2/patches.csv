bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2	[BUG]  [BUGGY]  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    final    int    isLastStep    =    state.isLastStep();    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  state	70	None	replace
3	[BUG]  [BUGGY]  if(eventsInitialized)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    final    int    isLastStep    =    state.isLastStep();    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
4	[BUG]  [BUGGY]  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    final    int    isLastStep    =    state.isLastStep();    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  state	70	None	replace
5	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  1  :  -1;  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitializing()?  1  :  -1;	  final    int    orderingSign    =    state.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
6	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  -1  :  -1;  [CE]  cannot  find  symbol  state  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitializing()?  -1  :  -1;	  final    int    orderingSign    =    state.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
7	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  +1  :  1;  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  +1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitializing()?  +1  :  1;	  final    int    orderingSign    =    state.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
8	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
9	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [CE]  package  es  does  not  exist  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  package  es  does  not  exist	39	None	replace
12	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  state.reinitializeBegin(interpolator);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  state.reinitializeBegin(interpolator);	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
15	[BUG]  [BUGGY]  int  orderSign  =  interface.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    interface.isForward()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
16	[BUG]  [BUGGY]  int  orderSign  =  interface.isForward()?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isForward()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isForward()?  -1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    interface.isForward()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
17	[BUG]  [BUGGY]  int  orderSign  =  interface.isInitializing()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isInitializing()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isInitializing()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    interface.isForward()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
18	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  incompatible  types	73	None	replace
19	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [CE]  package  events  does  not  exist  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  package  events  does  not  exist	73	None	replace
20	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  event  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  cannot  find  symbol  event	67	None	replace
22	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  event  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  cannot  find  symbol  event	67	None	replace
23	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  -1  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitialized()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	84	None	replace
24	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  -1  :  1;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  -1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitialized()?  -1  :  1;	  final    int    orderingSign    =    interpolator.isInitialized()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
25	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
26	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  events	56	None	replace
27	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	42	None	replace
28	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  -1  :  -1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isInitializing()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
29	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	44	None	replace
30	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
31	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  state.events();  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
32	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    final  int  orderingSign  =  interpolator.isForward()?  1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	27	None	add
33	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    int  orderingSign  =  interpolator.isForward()?  1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	27	None	add
34	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  int  orderSign  =  interpolator.isForward()?  1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  int  orderSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    int  orderSign  =  interpolator.isForward()?  1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	27	None	add
35	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    int    orderSign    =    interpolator.isForward()?    0    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	33	None	replace
36	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isForward()?  0  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isForward()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isForward()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    int    orderSign    =    interpolator.isForward()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	33	None	replace
37	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  0  :  -1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isInitializing()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    int    orderSign    =    interpolator.isForward()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
38	[BUG]  [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  1  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderingSign  =  interpolator.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	2	None	replace
39	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	2	None	replace
40	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
41	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  state.getEvents();  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
42	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
43	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state,  orderingSign);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
44	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.restartBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.restartBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.restartBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
45	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
46	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.restartBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.restartBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.restartBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
47	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
48	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  -1  :  1;	  final    int    orderingSign    =    interpolator.isInitializing()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
50	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.getEvents();  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
51	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  1;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
52	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isForward()?  0  :  1;  [CE]  cannot  find  symbol  state  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isForward()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
53	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isOrder()?  0  :  1;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isOrder()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isOrder()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
54	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isForward()?  +1  :  -1;	  final    int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	23	None	replace
55	[BUG]  [BUGGY]  final  int  orderSign  =  state.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderSign  =  state.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderSign  =  state.isForward()?  +1  :  -1;	  final    int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	23	None	replace
56	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
57	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
58	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  return  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
59	[BUG]  [BUGGY]  int  orderSign  =  Interpolator.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  Interpolator  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  Interpolator.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  Interpolator.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    Interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  Interpolator	16	None	replace
60	[BUG]  [BUGGY]  state.resetOccurred();  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.resetOccurred();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.resetOccurred();	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	20	None	replace
61	[BUG]  [BUGGY]  state.resetOccurred(interpolator);  [CE]  cannot  find  symbol  state  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.resetOccurred(interpolator);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.resetOccurred(interpolator);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	20	None	replace
62	[BUG]  [BUGGY]  state.reinitializeBegin(eventsInitialized);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.reinitializeBegin(eventsInitialized);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.reinitializeBegin(eventsInitialized);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	20	None	replace
63	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.values())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.values())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events.values())  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
64	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isForward()?  1  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int    orderSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	3	None	replace
66	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isInitializing()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int    orderSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
67	[BUG]  [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  1  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderSign  =  interpolator.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    int    orderSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	3	None	replace
68	[BUG]  [BUGGY]  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Int  orderSign  =  interpolator.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    Int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
69	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  statesInitialized.stepHandlers();  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  statesInitialized.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  statesInitialized.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    es1.stepHandlers();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	10	None	replace
70	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  es0.stepHandlers();  [CE]  cannot  find  symbol  es0  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  es0.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  es0.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    es1.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  es0	10	None	replace
71	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    getEventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
72	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  getEventsInitialized();  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  getEventsInitialized();  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  getEventsInitialized();  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    getEventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
73	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  getEventsInitialized;  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  getEventsInitialized  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  getEventsInitialized;  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  getEventsInitialized;  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    getEventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  getEventsInitialized	72	None	replace
74	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    final  int  orderingSign  =  interpolator.isForward()?  0  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	54	None	add
75	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    int  orderingSign  =  interpolator.isForward()?  0  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	54	None	add
76	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  int  orderSign  =  interpolator.isForward()?  0  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  int  orderSign  =  interpolator.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    int  orderSign  =  interpolator.isForward()?  0  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	54	None	add
77	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    final  int  orderingSign  =  interpolator.isForward()?  0  :  1;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	36	None	add
78	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    int  orderingSign  =  interpolator.isForward()?  0  :  1;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	36	None	add
79	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  int  orderSign  =  interpolator.isForward()?  0  :  1;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  int  orderSign  =  interpolator.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    int  orderSign  =  interpolator.isForward()?  0  :  1;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	36	None	add
80	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  isLastStepInterpolator)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  isLastStepInterpolator)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  isLastStepInterpolator)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
81	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  iterator.stepHandlers();  [CE]  cannot  find  symbol  iterator  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  iterator.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  iterator.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    this.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  iterator	8	None	replace
83	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  events.stepHandlers();  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  events.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  events.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    this.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
84	[BUG]  [BUGGY]  int  orderSign  =  state.isForward()?  -1  :  -1;  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  state.isForward()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  state.isForward()?  -1  :  -1;	  int    orderSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
85	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  0  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitializing()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitializing()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isInitializing()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	35	None	replace
86	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  state.initializeBegin(interpolator);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  state.initializeBegin(interpolator);  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  0  :  state.initializeBegin(interpolator);	  final    int    orderingSign    =    interpolator.isInitializing()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
87	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
88	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state,  orderingSign);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
89	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.restartBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.restartBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.restartBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
90	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEvents();  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  state.getEvents();  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
91	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  return  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  return  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  return  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
92	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  this.statesInitialized.iterator();	  Iterator    <    EventState>    iterator    =    statesInitialized.iterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	46	None	replace
93	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [CE]  package  state  does  not  exist  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.statesInitialized.iterator();	  Iterator    <    EventState>    iterator    =    statesInitialized.iterator();    	non-compiled	[CE]  package  state  does  not  exist	46	None	replace
94	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.iterator();	  Iterator    <    EventState>    iterator    =    statesInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	46	None	replace
95	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventsInitialized().iterator();  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.getEventsInitialized().iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.getEventsInitialized().iterator();	  Iterator    <    EventState>    iterator    =    state.eventsInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
96	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
97	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state,  orderingSign);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
98	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsInitialized)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	58	None	replace
99	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
100	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
101	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
102	[BUG]  [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEventStates();  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  final  EventState  state  =  state.getEventStates();  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  final  EventState  state  =  state.getEventStates();  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
103	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  events.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  events.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  events.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
104	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
105	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
106	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.eventsIterator();  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  eventsInitialized.eventsIterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  eventsInitialized.eventsIterator();	  Iterator    <    EventState>    iterator    =    state.eventsIterator();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	74	None	replace
107	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.eventsIterator();  [CE]  boolean  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  statesInitialized.eventsIterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  statesInitialized.eventsIterator();	  Iterator    <    EventState>    iterator    =    state.eventsIterator();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	74	None	replace
108	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsIterator();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsIterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  this.eventsIterator();	  Iterator    <    EventState>    iterator    =    state.eventsIterator();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
109	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  orderingSign  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  orderingSign	69	None	replace
110	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  events	69	None	replace
111	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
112	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  interpolator.events)  {  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
113	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  0;  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isForward()?  1  :  0;	  final    int    orderingSign    =    state.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
114	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  -2;  [CE]  cannot  find  symbol  state  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  -2;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isForward()?  1  :  -2;	  final    int    orderingSign    =    state.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
115	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state,  orderingSign);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
116	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.restartBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.restartBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.restartBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
117	[BUG]  [BUGGY]  int  orderSign  =  state.isInitializing()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  state.isInitializing()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  state.isInitializing()?  +1  :  -1;	  int    orderSign    =    interpolator.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	24	None	replace
118	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  -1  :  -1;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isInitializing()?  -1  :  -1;	  int    orderSign    =    interpolator.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
119	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  1  :  -1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isInitializing()?  1  :  -1;	  int    orderSign    =    interpolator.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
120	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
121	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
122	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reInitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reInitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reInitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
123	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsInitialized)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	66	None	replace
124	[BUG]  [BUGGY]  int  orderSign  =  state.isOrder()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  state.isOrder()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  state.isOrder()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrder()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	26	None	replace
125	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isOrder()?  -1  :  -1;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isOrder()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isOrder()?  -1  :  -1;	  int    orderSign    =    interpolator.isOrder()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
126	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isOrder()?  1  :  -1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isOrder()?  1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isOrder()?  1  :  -1;	  int    orderSign    =    interpolator.isOrder()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
127	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
128	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
129	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
130	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
131	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
132	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
133	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [CE]  package  state  does  not  exist  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.eventsStates.iterator();	  Iterator    <    EventState>    iterator    =    this.eventsStates.iterator();    	non-compiled	[CE]  package  state  does  not  exist	51	None	replace
135	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.getForward()?  1  :  0;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.getForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.getForward()?  1  :  0;	  final    int    orderingSign    =    interpolator.getForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
136	[BUG]  [BUGGY]  final  int  orderingSign  =  state.getForward()?  1  :  -1;  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.getForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.getForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.getForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	50	None	replace
137	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.getForward()?  1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.getForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.getForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.getForward()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
138	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
139	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
140	[BUG]  [BUGGY]  int  orderingSign  =  interface.isForward()?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interface.isForward()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interface.isForward()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
141	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
142	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
143	[BUG]  [BUGGY]  int  orderingSign  =  interface.isForward()?  1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interface.isForward()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interface.isForward()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final    int    orderingSign    =    interface.isForward()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
144	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  1  :  -1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitializing()?  1  :  -1;	  final    int    orderingSign    =    interface.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
145	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitializing()?  -1  :  -1;	  final    int    orderingSign    =    interface.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
146	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  0  :  -1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitializing()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitializing()?  0  :  -1;	  final    int    orderingSign    =    interface.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
147	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  event.stepHandlers();  [CE]  cannot  find  symbol  event  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  event.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  event.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    currentEvent.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  event	9	None	replace
148	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  eventsInitialized.stepHandlers();  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  eventsInitialized.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  eventsInitialized.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    currentEvent.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
149	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
150	[BUG]  [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
151	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  0  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
152	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    final    int    orderingSign    =    interface.isForward()?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
153	[BUG]  [BUGGY]  int  orderingSign  =  interface.isForward()?  0  :  -1;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interface.isForward()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interface.isForward()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    final    int    orderingSign    =    interface.isForward()?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
154	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  events.get(0))  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [CE]  package  state  does  not  exist  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.events.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.events.iterator();	  Iterator    <    EventState>    iterator    =    this.events.iterator();    	non-compiled	[CE]  package  state  does  not  exist	41	None	replace
156	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  event.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  event.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  event.events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
157	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
158	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  1  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitializing()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitializing()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
159	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isOrder()?  1  :  0;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isOrder()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isOrder()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
160	[BUG]  [BUGGY]  int  orderSign  =  state.isOrdinal()?  +1  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  state.isOrdinal()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  state.isOrdinal()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrdinal()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	47	None	replace
161	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isOrdinal()?  -1  :  -1;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isOrdinal()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isOrdinal()?  -1  :  -1;	  int    orderSign    =    interpolator.isOrdinal()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
162	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isOrdinal()?  1  :  -1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isOrdinal()?  1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isOrdinal()?  1  :  -1;	  int    orderSign    =    interpolator.isOrdinal()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
163	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.resetOccurred();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
164	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  this.eventsInitialized)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  this.eventsInitialized)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  this.eventsInitialized)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.resetOccurred();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
165	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  statesInitialized)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.resetOccurred();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
166	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  0  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitialized()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	83	None	replace
167	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  1;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitialized()?  0  :  1;	  final    int    orderingSign    =    interpolator.isInitialized()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
168	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  state.reinitializeBegin(interpolator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  state.reinitializeBegin(interpolator);  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitialized()?  0  :  state.reinitializeBegin(interpolator);	  final    int    orderingSign    =    interpolator.isInitialized()?    0    :    -1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
169	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	52	None	add
170	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    int  orderingSign  =  interpolator.isForward()?  -1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	52	None	add
171	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  int  orderSign  =  interpolator.isForward()?  -1  :  0;  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  int  orderSign  =  interpolator.isForward()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    int  orderSign  =  interpolator.isForward()?  -1  :  0;	  	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	52	None	add
172	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(eventsInitialized!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	59	None	replace
173	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsInitialized!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	59	None	replace
174	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsInitialized!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
175	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  1  :  -1;  [CE]  cannot  find  symbol  state  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isInitialized()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isInitialized()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	92	None	replace
176	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  1  :  0;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitialized()?  1  :  0;	  final    int    orderingSign    =    interpolator.isInitialized()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
177	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  1  :  -1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitialized()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
178	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.restartBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.restartBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.restartBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
179	[BUG]  [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderSign  =  interpolator.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    Integer    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	63	None	replace
180	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
181	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  eventsInitialized.add(event.reinitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  eventsInitialized.add(event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  eventsInitialized.add(event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	82	None	replace
182	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  events.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  events.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  events.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
183	[BUG]  [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  0  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderingSign  =  interpolator.isForward()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	32	None	replace
184	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	32	None	replace
185	[BUG]  [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderingSign  =  interpolator.isForward()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	43	None	replace
186	[BUG]  [BUGGY]  int  orderSign  =  interface.isForward()?  +1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isForward()?  +1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isForward()?  +1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    Int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
187	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    -1;    final    int    orderingSign    =    interface.isForward()?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
188	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
189	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
190	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }  else  {  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  final  int  orderingSign  =  interface.isForward()?  -1  :  -1;  }  else  {	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
191	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
192	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  -1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitialized()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
193	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state,  orderingSign);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state,  orderingSign);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(state,  orderingSign);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlersIterator();  [CE]  cannot  find  symbol  state  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlersIterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlersIterator();	  Iterator    <    EventState>    iterator    =    state.eventsIterator();    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
195	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers();  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  state.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  state.stepHandlers();	  Iterator    <    EventState>    iterator    =    state.eventsIterator();    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
196	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  1;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  -1  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	43	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Preconditions.checkState(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Preconditions.checkState(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsInitialized)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	66	None	replace
198	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  events)  {  state.reinitializeBegin(interpolator);  }	  if(eventsInitialized)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
199	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.reinitialized;  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
200	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
201	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(event);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(event);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(event);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
202	[BUG]  [BUGGY]  state.reinitializeBegin(entitiesInitialized);  [CE]  cannot  find  symbol  entitiesInitialized  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.reinitializeBegin(entitiesInitialized);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.reinitializeBegin(entitiesInitialized);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  entitiesInitialized	20	None	replace
203	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE);  [CE]  cannot  find  symbol  expandableODE  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.reinitializeBegin(expandableODE);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.reinitializeBegin(expandableODE);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	20	None	replace
204	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  final  int  orderingSign  =  interface.isForward()?  1  :  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  0;  final  int  orderingSign  =  interface.isForward()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    final  int  orderingSign  =  interface.isForward()?  1  :  0;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
205	[BUG]  [BUGGY]  if(eventsInitialized  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized  ==  null)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }	  if(eventsInitialized!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
206	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  event.getEvents())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  event.getEvents())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  event.getEvents())  {  event.reinitializeBegin(interpolator);  }	  if(eventsInitialized!=    null)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
207	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final    int    orderingSign    =    interface.isForward()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
208	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }  else  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }  else  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interface.isForward()?  1  :  -1;  }  else  {  state.reinitializeBegin(interpolator);  }	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final    int    orderingSign    =    interface.isForward()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
209	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  final  int  orderingSign  =  interface.isForward()?  0  :  1;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  final  int  orderingSign  =  interface.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    final  int  orderingSign  =  interface.isForward()?  0  :  1;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
210	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isReturn()?  +1  :  -1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isReturn()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isReturn()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
211	[BUG]  [BUGGY]  final  int  orderingSign  =  isLastStep?  interpolator.isInitializing()  :  -1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  isLastStep?  interpolator.isInitializing()  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  isLastStep?  interpolator.isInitializing()  :  -1;	  final    int    orderingSign    =    interpolator.isInitializing()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
212	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  final  int  orderingSign  =  interface.isForward()?  0  :  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  final  int  orderingSign  =  interface.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    final  int  orderingSign  =  interface.isForward()?  0  :  0;	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
213	[BUG]  [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	18	None	replace
214	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventStates.size())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventStates.size())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventStates.size())  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
215	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
216	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
217	[BUG]  [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
218	[BUG]  [BUGGY]  if(events  instanceof  EventState)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(events  instanceof  EventState)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(events  instanceof  EventState)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
219	[BUG]  [BUGGY]  if(events  instanceof  EventState)  {  for(final  EventState  state  :(EventState)state).reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(events  instanceof  EventState)  {  for(final  EventState  state  :(EventState)state).reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(events  instanceof  EventState)  {  for(final  EventState  state  :(EventState)state).reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
220	[BUG]  [BUGGY]  if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
221	[BUG]  [BUGGY]  if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  event.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
222	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  this.events)  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
223	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
224	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
225	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  final  int  isLastStep  =  state.isLastStep();  for(final  EventState  state  :  eventsInitialized)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
226	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
227	[BUG]  [BUGGY]  int  orderSign  =  Interpolator.isForward()?  -1  :  -1;  [CE]  cannot  find  symbol  Interpolator  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  Interpolator.isForward()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  Interpolator.isForward()?  -1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    int    orderSign    =    Interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  Interpolator	16	None	replace
228	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
229	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
230	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventsStates)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
231	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeAfter(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeAfter(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
232	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(getEventState());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(getEventState());  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(getEventState());  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
233	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEventStates())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEventStates())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  getEventStates())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
234	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  getStepHandlers();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  getStepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  getStepHandlers();	  Iterator    <    EventState>    stepHandlers    =    this.stepHandlers();    	non-compiled	[CE]  incompatible  types	8	None	replace
235	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  isLastStep?  this.stepHandlers()  :  state.stepHandlers();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  isLastStep?  this.stepHandlers()  :  state.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  isLastStep?  this.stepHandlers()  :  state.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    this.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
236	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
237	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
238	[BUG]  [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  +1;  [CE]  cannot  find  symbol  state  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  state.isForward()?  1  :  +1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  state.isForward()?  1  :  +1;	  final    int    orderingSign    =    state.isForward()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	30	None	replace
239	[BUG]  [BUGGY]  int  orderSign  =  iterator.isOrder()?  +1  :  -1;  [CE]  cannot  find  symbol  iterator  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  iterator.isOrder()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  iterator.isOrder()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrder()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  iterator	26	None	replace
240	[BUG]  [BUGGY]  int  orderSign  =  interface.isOrder()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isOrder()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isOrder()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrder()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
241	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
242	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.getEventStates();  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
243	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
244	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isInitializing()?  +1  :  1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isInitializing()?  +1  :  1;	  int    orderSign    =    interpolator.isInitializing()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
245	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
246	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(!isFirstStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
247	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getCurrentEventStates())  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getCurrentEventStates())  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getCurrentEventStates())  {  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
248	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(event);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(event);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(event);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
249	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  0  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isInitialized()?  0  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isInitialized()?  0  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
250	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
251	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
252	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeAfter(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeAfter(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
253	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
254	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  states.stepHandlers.iterator();  [CE]  package  states  does  not  exist  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  states.stepHandlers.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  states.stepHandlers.iterator();	  Iterator    <    EventState>    iterator    =    state.stepHandlers.iterator();    	non-compiled	[CE]  package  states  does  not  exist	39	None	replace
255	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
256	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.initialized)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.initialized)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.initialized)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
257	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsInitialized)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
258	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.getForward()?  0  :  1;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.getForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.getForward()?  0  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	add	final  int  orderingSign  =  interpolator.isForward()?  1  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	compilable	  [FE]  AssertionError  	37	1	replace
260	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isForward()?  1  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    	compilable	  [FE]  AssertionError  	37	1	replace
261	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }  [CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  variable  orderingSign  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	1	None	replace
262	[BUG]  [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }  else  {  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(interpolator!=  null)  {  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  final  int  orderingSign  =  interpolator.isForward()?  1  :  -1;  }  else  {	  final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    final    int    orderingSign    =    interpolator.isForward()?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
263	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  events)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  events)  {  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
264	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  es2.stepHandlers();  [CE]  cannot  find  symbol  es2  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  es2.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  es2.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    es1.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol  es2	10	None	replace
265	[BUG]  [BUGGY]  int  orderSign  =  interface.isOrdinal()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interface.isOrdinal()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interface.isOrdinal()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrdinal()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
266	[BUG]  [BUGGY]  int  orderSign  =  iterator.isOrdinal()?  +1  :  -1;  [CE]  cannot  find  symbol  iterator  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  iterator.isOrdinal()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  iterator.isOrdinal()?  +1  :  -1;	  int    orderSign    =    interpolator.isOrdinal()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  iterator	47	None	replace
267	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
268	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
269	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
270	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEvents())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEvents())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  getEvents())  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
271	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    getEventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
272	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.initializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.initializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.initializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	add	final  int  orderingSign  =  interpolator.isForward()?  -1  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    	compilable	  [FE]  AssertionError  	53	1	replace
274	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isForward()?  -1  :  1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    	compilable	  [FE]  AssertionError  	53	1	replace
275	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interface.isForward()?  -1  :  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interface.isForward()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    final  int  orderingSign  =  interface.isForward()?  -1  :  0;	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
276	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeAfter(interpolator);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.reinitializeAfter(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
277	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getInitializeBegin(interpolator);  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getInitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getInitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
278	[BUG]  [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.resetOccurred();    }    	non-compiled	[CE]  ';'  expected	14	None	replace
279	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
280	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events;  state.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events;  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.events;  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  events	93	None	replace
281	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
282	[BUG]  [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events;  event.reinitializeBegin(interpolator);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  final  EventState  state  =  state.events;  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  final  EventState  state  =  state.events;  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  events	79	None	replace
283	[BUG]  [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
284	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();	  Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
285	[BUG]  [BUGGY]  if(eventsInitialized!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
286	[BUG]  [BUGGY]  if(eventsInitialized  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized  ==  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  eventsInitialized)  {  event.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
287	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
288	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  Interpolator  interpolator.reinitializeBegin(state);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  Interpolator  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  Interpolator  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    Interpolator    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  ';'  expected	61	None	replace
289	[BUG]  [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsInitialized)  {  for(final  EventState  state  :  eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
290	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.initializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.initializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.initializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
291	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isOrdinal()?  1  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isOrdinal()?  1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isOrdinal()?  1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    1    :    0;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
292	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  0;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  0  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    final    int    orderingSign    =    interface.isForward()?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
293	[BUG]  [BUGGY]  final  int  orderingSign  =  this.interpolator.isInitialized()?  -1  :  -1;  [CE]  cannot  find  symbol  interpolator  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  this.interpolator.isInitialized()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  this.interpolator.isInitialized()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  interpolator	84	None	replace
294	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  Final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  Final  int  orderingSign  =  interpolator.isForward()?  0  :  1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    1;    Final  int  orderingSign  =  interpolator.isForward()?  0  :  1;	  	non-compiled	[CE]  not  a  statement	36	None	add
295	[BUG]  [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderSign  =  interpolator.isForward()?  -1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderSign  =  interpolator.isForward()?  -1  :  -1;  Int  orderSign  =  interpolator.isForward()?  +1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    Int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
296	[BUG]  [BUGGY]  Iterator  <  EventState>  stepHandlers  =  interpolator.stepHandlers();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  stepHandlers  =  interpolator.stepHandlers();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  stepHandlers  =  interpolator.stepHandlers();	  Iterator    <    EventState>    stepHandlers    =    this.stepHandlers();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
297	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeAfter(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  event.reinitializeAfter(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEventStates())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
298	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
299	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
300	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
301	[BUG]  [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
302	[BUG]  [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
303	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.resetOccurred())  {  event.resetOccurred();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.resetOccurred())  {  event.resetOccurred();  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.resetOccurred())  {  event.resetOccurred();  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.resetOccurred();    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
304	[BUG]  [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
305	[BUG]  [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
306	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
307	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
308	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getEventStates())  {  interpolator.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
309	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeAfter(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  state.reinitializeAfter(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
310	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.iterator();  [CE]  cannot  find  symbol  stateInitialized  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Iterator  <  EventState>  iterator  =  stateInitialized.iterator();  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Iterator  <  EventState>  iterator  =  stateInitialized.iterator();	  Iterator    <    EventState>    iterator    =    this.eventsInitialized.iterator();    	non-compiled	[CE]  cannot  find  symbol  stateInitialized	38	None	replace
311	[BUG]  [BUGGY]  int  orderingSign  =  state.isForward()?  -1  :  -1;  [CE]  cannot  find  symbol  state  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  state.isForward()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  state.isForward()?  -1  :  -1;	  int    orderSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
312	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventStates)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
313	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeEnd(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeEnd(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  state.reinitializeEnd(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
314	[BUG]  [BUGGY]  state.reinitializeBegin(state);  [CE]  cannot  find  symbol  state  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.reinitializeBegin(state);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.reinitializeBegin(state);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  state	20	None	replace
315	[BUG]  [BUGGY]  state.reinitializeBegin(expanableODE);  [CE]  cannot  find  symbol  expanableODE  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  state.reinitializeBegin(expanableODE);  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	state.reinitializeBegin(expanableODE);	  state.reinitializeBegin(interpolator);    	non-compiled	[CE]  cannot  find  symbol  expanableODE	20	None	replace
316	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getInitialized())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getInitialized())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getInitialized())  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
317	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeAfter(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeAfter(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.getEvents())  {  event.reinitializeAfter(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
318	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isInitialized()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interpolator.isInitialized()?  0  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
319	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]          AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  0  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	43	None	replace
320	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.events.size())  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.events.size())  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events.events.size())  {  state.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
321	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  events.size())  {  state.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    events.size())    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
322	[BUG]  [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
323	[BUG]  [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
324	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.getevents())  {  event.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.getEvents())    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
325	[BUG]  [BUGGY]  final  int  orderingSign  =  interface.isForward()?  +1  :  -1;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interface.isForward()?  +1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  interface.isForward()?  +1  :  -1;	  final    int    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
326	[BUG]  [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
327	[BUG]  [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
328	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  event  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  cannot  find  symbol  event	67	None	replace
329	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(eventsStates!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(eventsStates!=  null)  {  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  event.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    event.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
330	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  -  :  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  final  int  orderingSign  =  interpolator.isForward()?  -  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    -1    :    0;    final  int  orderingSign  =  interpolator.isForward()?  -  :  0;	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
331	[BUG]  [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]            AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  int  orderingSign  =  interpolator.isForward()?  -1  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	int  orderingSign  =  interpolator.isForward()?  -1  :  0;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    int    orderSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  local  variable  orderingSign  is  accessed  from  within  inner  class;  needs  to  be  declared  final	44	None	replace
332	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventsInitialized)  {  interpolator.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventsInitialized)  {  interpolator.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.eventsInitialized)  {  interpolator.reinitializeBegin(state);  }	  if(isLastStep)    {    for(final    EventState    state    :    eventsInitialized)    {    interpolator.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
333	[BUG]  [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  -1  :  -1;  [CE]  cannot  find  symbol  orderingSign  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Integer  orderSign  =  interpolator.isForward()?  -1  :  -1;  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Integer  orderSign  =  interpolator.isForward()?  -1  :  -1;	          int    orderSign    =    interpolator.isForward()?    +1    :    -1;    Integer    orderSign    =    interpolator.isForward()?    +1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  orderingSign	63	None	replace
334	[BUG]  [BUGGY]  Final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  Final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	Final  int  orderingSign  =  interpolator.isForward()?  -1  :  -1;	  final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    Final    int    orderingSign    =    interpolator.isForward()?    -1    :    -1;    	non-compiled	[CE]  not  a  statement	78	None	replace
335	[BUG]  [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  Final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  Final  int  orderingSign  =  interpolator.isForward()?  0  :  0;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final    int    orderingSign    =    interpolator.isForward()?    0    :    0;    Final  int  orderingSign  =  interpolator.isForward()?  0  :  0;	  	non-compiled	[CE]  not  a  statement	54	None	add
336	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  getEventsInitialized)  {  state.reinitializeBegin(state);  }	  if(!isLastStep)    {    for(final    EventState    state    :    getEventsInitialized)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
337	[BUG]  [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
338	[BUG]  [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events  ==  null)  {  for(final  EventState  state  :  state.events)  {  event.reinitializeBegin(interpolator);  }	  if(isLastStep)    {    for(final    EventState    state    :    state.events)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
339	[BUG]  [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
340	[BUG]  [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(state.events!=  null)  {  if(!isLastStep)  {  for(final  EventState  state  :  state.events)  {  state.reinitializeBegin(interpolator);  }  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.events)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
341	[BUG]  [BUGGY]  final  int  orderingSign  =  this.interpolator.isInitialized()?  1  :  -1;  [CE]  cannot  find  symbol  interpolator  [FE]        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  final  int  orderingSign  =  this.interpolator.isInitialized()?  1  :  -1;  [BUGGY]      SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	final  int  orderingSign  =  this.interpolator.isInitialized()?  1  :  -1;	  final    int    orderingSign    =    interpolator.isInitialized()?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  interpolator	92	None	replace
342	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  orderingSign  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  cannot  find  symbol  orderingSign	65	None	replace
343	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [CE]  cannot  find  symbol  orderingSign  [FE]                AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  }	  if(eventsStates!=    null)    {    if(!isLastStep)    {    for(final    EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    }    	non-compiled	[CE]  cannot  find  symbol  orderingSign	65	None	replace
344	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  interpolator.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  interpolator.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  interpolator.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
345	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeEnd(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeEnd(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.reinitialized)  {  event.reinitializeEnd(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    state.reinitialized)    {    event.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
346	[BUG]  [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(!isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(!isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(interpolator);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
347	[BUG]  [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }        [BUGGY]  if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }  [BUGGY]      final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	291	291	1	replace	if(isLastStep)  {  for(final  EventState  state  :  state.eventStates)  {  state.reinitializeBegin(interpolator);  }	  if(!isLastStep)    {    for(final    EventState    state    :    eventStates)    {    state.reinitializeBegin(state);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
