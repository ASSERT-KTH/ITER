bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  events.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  events.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  events  =  this.events.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  events  =  this.events.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventStates  =  this.events.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventStates  =  this.events.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  eventStates.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  events  =  eventStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  events  =  eventStates.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates().iterator();	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(previousT);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(previousT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates(previousT);	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  getEventStates(currentT);	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  state.reinitializeBegin(eventT);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(eventT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(eventT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  state.resetOccurred(previousT);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.resetOccurred(previousT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.resetOccurred(previousT);	      state.reinitializeBegin(currentT);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(isLastStep  &&  isInitialized)  {  [CE]  cannot  find  symbol  isInitialized  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(isLastStep  &&  isInitialized)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(isLastStep  &&  isInitialized)  {	  if(isLastStep)    {    	non-compiled	[CE]  cannot  find  symbol  isInitialized	7	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(eventsStates.size()  ==  1)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	add	if(eventsStates.size()  ==  1)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
12	[BUG]  [BUGGY]  if(eventsStates.size()  ==  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(eventsStates.size()  ==  1)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(eventsStates.size()  ==  1)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
13	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  steps.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  steps.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  steps.iterator();	      Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  events.stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  if(isLastStep)  {  if(isLastStep)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(isLastStep)  {  if(isLastStep)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(isLastStep)    {    if(isLastStep)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
17	[BUG]  [BUGGY]  if(isLastStep)  {  If(isLastStep)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(isLastStep)  {  If(isLastStep)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(isLastStep)    {    If(isLastStep)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
18	[BUG]  [BUGGY]  if(isLastStep)  {  if(isLastStep)  <  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(isLastStep)  {  if(isLastStep)  <  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(isLastStep)    {    if(isLastStep)  <	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
19	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.events.iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.iterator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsStates.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  eventStates.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  eventStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  eventStates.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(previousT,  currentT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(previousT,  currentT);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  iterator.events.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  iterator.events.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  iterator.events.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(previousT,  interpolator);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(previousT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  currentT.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  currentT.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.eventsInitialized.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(currentT,  interpolator);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(currentT,  interpolator);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventStates  =  stepHandlers.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  state.reinitializeBegin(expandableODE);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(expandableODE);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(expandableODE);	      state.reinitializeBegin(previousT);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  state.eventsStates.iterator();	      Iterator    <    EventState>    eventsStates    =    currentEvents.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  if(previousT  >  t)  {  [CE]  cannot  find  symbol  t  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(previousT  >  t)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(previousT  >  t)  {	  if(isLastStep)    {    	non-compiled	[CE]  cannot  find  symbol  t	7	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(previousT  >  currentT)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	add	if(previousT  >  currentT)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
35	[BUG]  [BUGGY]  if(previousT  >  currentT)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(previousT  >  currentT)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(previousT  >  currentT)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
36	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.events.values().iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.stepHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  stepHandlers.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.stepHandlers.values().iterator();	      Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.eventsStates.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  eventStates.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  eventStates.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  if(isLastStep)  {  int  isLastStep)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(isLastStep)  {  int  isLastStep)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(isLastStep)    {    int  isLastStep)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
43	[BUG]  [BUGGY]  Iterator  <  EventState>  events  =  this.eventStates.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  events  =  this.eventStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  events  =  this.eventStates.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventStates  =  this.eventStates.iterator();	      Iterator    <    EventState>    eventStates    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(currentT  >  tEnd)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	add	if(currentT  >  tEnd)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
46	[BUG]  [BUGGY]  if(currentT  >  tEnd)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  if(currentT  >  tEnd)  {  [BUGGY]    for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(currentT  >  tEnd)  {	  if(isLastStep)    {    	compilable	  [FE]  AssertionError  	7	1	replace
47	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  es.stepHandlers.iterator();	      Iterator    <    EventState>    iterator    =    this.stepHandlers.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventHandlers.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.eventHandlers.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.eventHandlers.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  currentEvents.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  currentEvents.iterator();	      Iterator    <    EventState>    iterator    =    events.iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventStates.iterator();	      Iterator    <    EventState>    eventsStates    =    getEventStates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  eventsStates  =  this.eventsList.iterator();	      Iterator    <    EventState>    eventsStates    =    this.events.iterator();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  state.reinitializeBegin(expT);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  state.reinitializeBegin(expT);  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	state.reinitializeBegin(expT);	      state.reinitializeBegin(interpolator);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  MathIllegalStateException  {  double  previousT  =  interpolator.getGlobalPreviousTime();  final  double  currentT  =  interpolator.getGlobalCurrentTime();  resetOccurred  =  false;      [BUGGY]  Iterator  <  EventState>  iterator  =  this.events.values().iterator();  [BUGGY]    if  (!  statesInitialized)  {  for  (EventState  state  :  eventsStates)  {  state.reinitializeBegin(interpolator);  }  statesInitialized  =  true;  }  final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	Iterator  <  EventState>  iterator  =  this.events.values().iterator();	      Iterator    <    EventState>    iterator    =    eventsStates.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
