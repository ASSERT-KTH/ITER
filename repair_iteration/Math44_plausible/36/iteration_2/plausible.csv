26	[BUG]    [BUGGY]    if(previousT    >    currentT)    {    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]        throws    MathIllegalStateException    {    double    previousT    =    interpolator.getGlobalPreviousTime();    final    double    currentT    =    interpolator.getGlobalCurrentTime();    resetOccurred    =    false;            [BUGGY]    if(previousT    >    currentT)    {    [BUGGY]        for    (EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    statesInitialized    =    true;    }    final    int    orderingSign    =    interpolator.isForward()    ?    +1    :    -1;    SortedSet<EventState>    occuringEvents    =    new    TreeSet<EventState>(new    Comparator<EventState>()    {    [CLASS]    AbstractIntegrator    1    [METHOD]    acceptStep    [RETURN_TYPE]    double    AbstractStepInterpolator    interpolator    final    double[]    y    final    double[]    yDot    final    double    tEnd    [VARIABLES]    ExpandableStatefulODE    equations    expandable    expandableODE    EventState    currentEvent    es0    es1    state    double    convergence    currentT    eventT    maxCheckInterval    previousT    stepSize    stepStart    t    t0    tEnd    Incrementor    evaluations    StepHandler    handler    String    name    SortedSet    occuringEvents    int    orderingSign    boolean    isLastStep    resetOccurred    stateInitialized    statesInitialized    double[]    currentY    eventY    y    yDot    Iterator    iterator    Collection    eventsStates    stepHandlers    AbstractStepInterpolator    interpolator    	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(currentT  >  previousT)  {	  if(previousT    >    currentT)    {    	plausible		35	0
31	[BUG]    [BUGGY]    if(eventsStates.size()    ==    1)    {    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]        throws    MathIllegalStateException    {    double    previousT    =    interpolator.getGlobalPreviousTime();    final    double    currentT    =    interpolator.getGlobalCurrentTime();    resetOccurred    =    false;            [BUGGY]    if(eventsStates.size()    ==    1)    {    [BUGGY]        for    (EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    statesInitialized    =    true;    }    final    int    orderingSign    =    interpolator.isForward()    ?    +1    :    -1;    SortedSet<EventState>    occuringEvents    =    new    TreeSet<EventState>(new    Comparator<EventState>()    {    [CLASS]    AbstractIntegrator    1    [METHOD]    acceptStep    [RETURN_TYPE]    double    AbstractStepInterpolator    interpolator    final    double[]    y    final    double[]    yDot    final    double    tEnd    [VARIABLES]    ExpandableStatefulODE    equations    expandable    expandableODE    EventState    currentEvent    es0    es1    state    double    convergence    currentT    eventT    maxCheckInterval    previousT    stepSize    stepStart    t    t0    tEnd    Incrementor    evaluations    StepHandler    handler    String    name    SortedSet    occuringEvents    int    orderingSign    boolean    isLastStep    resetOccurred    stateInitialized    statesInitialized    double[]    currentY    eventY    y    yDot    Iterator    iterator    Collection    eventsStates    stepHandlers    AbstractStepInterpolator    interpolator    	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(eventsStates.size()  >  1)  {	  if(eventsStates.size()    ==    1)    {    	plausible		12	0
33	[BUG]    [BUGGY]    if(eventsStates.size()    ==    1)    {    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]        throws    MathIllegalStateException    {    double    previousT    =    interpolator.getGlobalPreviousTime();    final    double    currentT    =    interpolator.getGlobalCurrentTime();    resetOccurred    =    false;            [BUGGY]    if(eventsStates.size()    ==    1)    {    [BUGGY]        for    (EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    statesInitialized    =    true;    }    final    int    orderingSign    =    interpolator.isForward()    ?    +1    :    -1;    SortedSet<EventState>    occuringEvents    =    new    TreeSet<EventState>(new    Comparator<EventState>()    {    [CLASS]    AbstractIntegrator    1    [METHOD]    acceptStep    [RETURN_TYPE]    double    AbstractStepInterpolator    interpolator    final    double[]    y    final    double[]    yDot    final    double    tEnd    [VARIABLES]    ExpandableStatefulODE    equations    expandable    expandableODE    EventState    currentEvent    es0    es1    state    double    convergence    currentT    eventT    maxCheckInterval    previousT    stepSize    stepStart    t    t0    tEnd    Incrementor    evaluations    StepHandler    handler    String    name    SortedSet    occuringEvents    int    orderingSign    boolean    isLastStep    resetOccurred    stateInitialized    statesInitialized    double[]    currentY    eventY    y    yDot    Iterator    iterator    Collection    eventsStates    stepHandlers    AbstractStepInterpolator    interpolator    	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(eventsStates.size()!=  1)  {	  if(eventsStates.size()    ==    1)    {    	plausible		12	0
107	[BUG]    [BUGGY]    if(eventsStates.size()    ==    1)    {    [FE]    AssertionError    [FE]            AssertionError        [CONTEXT]        throws    MathIllegalStateException    {    double    previousT    =    interpolator.getGlobalPreviousTime();    final    double    currentT    =    interpolator.getGlobalCurrentTime();    resetOccurred    =    false;            [BUGGY]    if(eventsStates.size()    ==    1)    {    [BUGGY]        for    (EventState    state    :    eventsStates)    {    state.reinitializeBegin(interpolator);    }    statesInitialized    =    true;    }    final    int    orderingSign    =    interpolator.isForward()    ?    +1    :    -1;    SortedSet<EventState>    occuringEvents    =    new    TreeSet<EventState>(new    Comparator<EventState>()    {    [CLASS]    AbstractIntegrator    1    [METHOD]    acceptStep    [RETURN_TYPE]    double    AbstractStepInterpolator    interpolator    final    double[]    y    final    double[]    yDot    final    double    tEnd    [VARIABLES]    ExpandableStatefulODE    equations    expandable    expandableODE    EventState    currentEvent    es0    es1    state    double    convergence    currentT    eventT    maxCheckInterval    previousT    stepSize    stepStart    t    t0    tEnd    Incrementor    evaluations    StepHandler    handler    String    name    SortedSet    occuringEvents    int    orderingSign    boolean    isLastStep    resetOccurred    stateInitialized    statesInitialized    double[]    currentY    eventY    y    yDot    Iterator    iterator    Collection    eventsStates    stepHandlers    AbstractStepInterpolator    interpolator    	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	283	283	1	replace	if(eventsStates.size()  >=  1)  {	  if(eventsStates.size()    ==    1)    {    	plausible		12	0
