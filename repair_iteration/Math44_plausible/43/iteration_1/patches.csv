bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(final  EventState  state  :  events.size())  {  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.size())  {	  for(final    EventState    state    :    eventStates.size())    {    	non-compiled	[CE]  cannot  find  symbol  events	3	None	replace
2	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized.size())  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsInitialized.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized.size())  {	  for(final    EventState    state    :    eventStates.size())    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	3	None	replace
3	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.size())  {  [CE]  cannot  find  symbol  currentEvents  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  currentEvents.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents.size())  {	  for(final    EventState    state    :    eventStates.size())    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	3	None	replace
4	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  eventS  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventS	23	None	replace
5	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	23	None	replace
6	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  events)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
8	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator)&&  occuringEvents.contains(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  ')'  expected	8	None	replace
9	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	14	None	replace
10	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  cannot  find  symbol  events	14	None	replace
11	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	19	None	replace
13	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
14	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateInitialized(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
15	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	22	None	replace
16	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateOccurred(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
17	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
18	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  [CE]  cannot  find  symbol  currentEvents  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  currentEvents.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents.values())  {	  for(final    EventState    state    :    events.values())    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	18	None	replace
19	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.values())  {  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.events.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events.values())  {	  for(final    EventState    state    :    events.values())    {    	non-compiled	[CE]  cannot  find  symbol  events	18	None	replace
20	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsInitialized.values())  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsInitialized.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsInitialized.values())  {	  for(final    EventState    state    :    events.values())    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	18	None	replace
21	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates.values())  {  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates.values())  {	  for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
22	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates.size())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]      AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates.size())  {	  for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	17	None	replace
23	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsInitialized)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsInitialized)  {	  for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	17	None	replace
24	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingSign)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates,  orderingSign)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsStates,  orderingSign)  {	  for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
25	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  state  :  this.eventsStates)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  state  :  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    for(final  EventState  state  :  this.eventsStates)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
26	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  For(final  EventState  state  :  this.eventsStates)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  For(final  EventState  state  :  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    For(final  EventState  state  :  this.eventsStates)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
27	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  :  this.eventsStates)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  :  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    for(final  EventState  :  this.eventsStates)  {	  	non-compiled	[CE]  <identifier>  expected	16	None	add
28	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  :  this.eventsStates)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  :  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    final  EventState  state  :  this.eventsStates)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
29	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  =  this.eventsStates)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  final  EventState  state  =  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    final  EventState  state  =  this.eventsStates)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
30	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	9	None	replace
31	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
32	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
33	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
34	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsStates)  {  if(!isFirstStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
36	[BUG]  [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
37	[BUG]  [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  eventState  :  events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	20	None	replace
38	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
39	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  events	20	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	add	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	compilable	  [FE]  AssertionError  	15	1	replace
41	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	compilable	  [FE]  AssertionError  	15	1	replace
42	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvent.values())  {  [CE]  cannot  find  symbol  currentEvent  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  currentEvent.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvent.values())  {	  for(final    EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  currentEvent	2	None	replace
44	[BUG]  [BUGGY]  for(final  EventState  state  :  events.events)  {  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events.events)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.events)  {	  for(final    EventState    state    :    this.events)    {    	non-compiled	[CE]  cannot  find  symbol  events	10	None	replace
45	[BUG]  [BUGGY]  for(final  EventState  state  :  this.events.size())  {  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.events.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.events.size())  {	  for(final    EventState    state    :    this.events)    {    	non-compiled	[CE]  cannot  find  symbol  events	10	None	replace
46	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.next();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.next();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)events.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)events.clone();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)events.clone();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  state.evaluateStep(interpolator);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  state.evaluateStep(interpolator);  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	state.evaluateStep(interpolator);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(0);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)events.get(0);  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)events.get(0);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
54	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	7	None	replace
55	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
56	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
57	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(events!=  null)  {  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.remove(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
60	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEventsInitialized)  {  [CE]  cannot  find  symbol  currentEventsInitialized  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  currentEventsInitialized)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEventsInitialized)  {	  for(final    EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  currentEventsInitialized	1	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	add	for(final  EventState  state  :  occuringEvents)  {	  for(final    EventState    state    :    eventsInitialized)    {    	compilable	  [FE]  AssertionError  	1	1	replace
62	[BUG]  [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  occuringEvents)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  occuringEvents)  {	  for(final    EventState    state    :    eventsInitialized)    {    	compilable	  [FE]  AssertionError  	1	1	replace
63	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
65	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	21	None	replace
66	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
67	[BUG]  [BUGGY]  for(final  EventState  event  :  events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
68	[BUG]  [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
71	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	6	None	replace
72	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	8	None	replace
73	[BUG]  [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  eventsInitialized)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	8	None	replace
74	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  state  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
75	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
76	[BUG]  [BUGGY]  for(final  EventState  state  :  currentEvents)  {  [CE]  cannot  find  symbol  currentEvents  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  currentEvents)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  currentEvents)  {	  for(final    EventState    state    :    this.events)    {    	non-compiled	[CE]  cannot  find  symbol  currentEvents	10	None	replace
77	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
78	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    Iterator  <  EventState>  iterator  =  this.eventsStates.iterator();	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
79	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [CE]  cannot  find  symbol  state  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.remove(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.remove(state);    }    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
80	[BUG]  [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  eventS  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(orderingSign  >  0)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(orderingSign  >  0)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventS	23	None	replace
81	[BUG]  [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(orderingSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(orderingSign!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	23	None	replace
82	[BUG]  [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	final  EventState  event  :  eventsStates)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
83	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  state  :  eventsStates)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
84	[BUG]  [BUGGY]  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events)  {  if(!interpolator.evaluateStep(state))  {  occuringEvents.add(state);  }	      if(eventsStates!=    null)    {    for(final    EventState    state    :    eventsStates)    {    if(!interpolator.evaluateStep(state))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	13	None	replace
85	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)iterator.clone();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)iterator.clone();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  State  state  =(State)iterator.next();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(State)iterator.next();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(State)iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsEvents)  {  [CE]  cannot  find  symbol  eventsEvents  [FE]    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsEvents)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventsEvents)  {	  for(final    EventState    state    :    this.eventsStates)    {    	non-compiled	[CE]  cannot  find  symbol  eventsEvents	17	None	replace
88	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
89	[BUG]  [BUGGY]  for(final  EventState  event  :  this.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  this.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  this.events)  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
90	[BUG]  [BUGGY]  for(final  EventState  event  :  events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.size())  {  if(event.evaluateStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(event.evaluateStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	21	None	replace
91	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.values())  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	19	None	replace
92	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates)  {  if(state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	19	None	replace
93	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
94	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	6	None	replace
95	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  state  =  this.eventsStates)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventsStates)  {  for(final  EventState  state  =  this.eventsStates)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final    EventState    state    :    this.eventsStates)    {    for(final  EventState  state  =  this.eventsStates)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
96	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
97	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.remove(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.remove(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	8	None	replace
98	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates.size())  {  [CE]  cannot  find  symbol  eventStates  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventStates.size())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventStates.size())  {	  for(final    EventState    state    :    eventStates.size())    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	3	None	replace
99	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  isLastStepInterpolator  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(!isLastStepInterpolator)  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  isLastStepInterpolator	20	None	replace
100	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]            AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
101	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	7	None	replace
102	[BUG]  [BUGGY]  for(final  EventState  state  :  this.eventStates.values())  {  [CE]  cannot  find  symbol  eventStates  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  this.eventStates.values())  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  this.eventStates.values())  {	  for(final    EventState    state    :    eventStates.values())    {    	non-compiled	[CE]  cannot  find  symbol  eventStates	2	None	replace
103	[BUG]  [BUGGY]  for(final  EventState  state  :  eventSigns)  {  [CE]  cannot  find  symbol  eventSigns  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventSigns)  {  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventSigns)  {	  for(final    EventState    state    :    eventsInitialized)    {    	non-compiled	[CE]  cannot  find  symbol  eventSigns	1	None	replace
104	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
105	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [CE]  cannot  find  symbol  events  [FE]                  AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!interpolator.evaluateStep(event))  {  continue;  }	      for(final    EventState    event    :    eventsStates)    {    if(!interpolator.evaluateStep(event))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  events	9	None	replace
106	[BUG]  [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [CE]  cannot  find  symbol  eventS  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	if(eventsStates!=  null)  {  for(final  EventState  eventState  :  eventsStates)  {  if(interpolator.evaluateStep(eventS))  {  occuringEvents.add(eventSign);  }  }	      if(eventsStates!=    null)    {    for(final    EventState    eventState    :    eventsStates)    {    if(interpolator.evaluateStep(eventS))    {    occuringEvents.add(eventSign);    }    	non-compiled	[CE]  cannot  find  symbol  eventS	23	None	replace
107	[BUG]  [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]        AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.values())  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
108	[BUG]  [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [CE]  cannot  find  symbol  events  [FE]          AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  event  :  events.events)  {  if(!isLastStep(interpolator))  {  occuringEvents.add(event);  }	      for(final    EventState    event    :    eventsStates)    {    if(!isLastStep(interpolator))    {    occuringEvents.add(event);    }    	non-compiled	[CE]  cannot  find  symbol  events	5	None	replace
109	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)es0.clone();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)es0.clone();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)es0.clone();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  State  state  =(SortedSet  <  EventState>)es1.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  State  state  =(SortedSet  <  EventState>)es1.clone();  [BUGGY]    if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	State  state  =(SortedSet  <  EventState>)es1.clone();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  events  [FE]              AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  events.values())  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  events	22	None	replace
112	[BUG]  [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [CE]  cannot  find  symbol  eventStates  [FE]                AssertionError    [CONTEXT]    final  int  orderingSign  =  interpolator.isForward()  ?  +1  :  -1;  SortedSet<EventState>  occuringEvents  =  new  TreeSet<EventState>(new  Comparator<EventState>()  {  public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });    [BUGGY]  for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  [BUGGY]    for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	301	301	1	replace	for(final  EventState  state  :  eventStates)  {  if(!state.evaluateStep(interpolator))  {  occuringEvents.add(state);  }	      for(final    EventState    state    :    eventsStates)    {    if(!state.evaluateStep(interpolator))    {    occuringEvents.add(state);    }    	non-compiled	[CE]  cannot  find  symbol  eventStates	22	None	replace
