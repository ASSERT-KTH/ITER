bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	throw  new  IllegalArgumentException( " ");	  aughtException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	90	1	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	throw  new  IllegalArgumentException( " ");	  aughtException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	90	1	replace
6	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	throw  new  IllegalStateException( " ");	  aughtException(   "   ");    	compilable	  [FE]  IllegalStateException  	90	1	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	throw  new  IllegalStateException( " ");	  aughtException(   "   ");    	compilable	  [FE]  IllegalStateException  	90	1	replace
8	[BUG]  [BUGGY]  ignoreException( " ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ignoreException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ignoreException( " ");	  aughtException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
9	[BUG]  [BUGGY]  degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  not  a  statement	67	None	replace
10	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	67	None	replace
11	[BUG]  [BUGGY]  degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized  ||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  not  a  statement	67	None	replace
12	[BUG]  [BUGGY]  approveStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  approveStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	approveStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
13	[BUG]  [BUGGY]  luate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
14	[BUG]  [BUGGY]  luate())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luate())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luate())  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
15	[BUG]  [BUGGY]  ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ensureCapacity(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(interpolator,  state.evaluateStep(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  state.evaluate();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate();	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
19	[BUG]  [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    timeout    	non-compiled	[CE]  not  a  statement	27	None	replace
20	[BUG]  [BUGGY]  state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    timeout    	non-compiled	[CE]  not  a  statement	27	None	replace
21	[BUG]  [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    timeout    	non-compiled	[CE]  not  a  statement	27	None	replace
22	[BUG]  [BUGGY]  State.evaluateStep(interpolator);  [CE]  cannot  find  symbol  State  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State.evaluateStep(interpolator);	          state.evaluateStep(interpolator);    State.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  State	37	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(!state.evaluateStep(interpolator))  {  return  1;  }	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	compilable	  [FE]  AssertionError  	61	1	replace
24	[BUG]  [BUGGY]  if(!state.evaluateStep(interpolator))  {  return  1;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!state.evaluateStep(interpolator))  {  return  1;  }	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	compilable	  [FE]  AssertionError  	61	1	replace
25	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	  timeout    	compilable	timeout	26	1	add
26	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  timeout  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }	  timeout    	compilable	timeout	26	1	add
27	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  1);  }	  timeout    	non-compiled	[CE]  ';'  expected	26	None	add
28	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  throw  new  UnsupportedOccurredException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  throw  new  UnsupportedOccurredException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  throw  new  UnsupportedOccurredException( " ");  }	  [Delete]    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
29	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	19	1	add
30	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	19	1	add
31	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	19	None	add
32	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
33	[BUG]  [BUGGY]  safe(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluate(y,  yDot)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
34	[BUG]  [BUGGY]  safe(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
35	[BUG]  [BUGGY]  safely(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(y,  tEnd)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
36	[BUG]  [BUGGY]  aughtExceptionHandler(eventsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(eventsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(eventsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(events,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	95	None	replace
37	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(events,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	95	1	replace
38	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(events,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	95	1	replace
39	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
40	[BUG]  [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  	57	None	replace
41	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
42	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
43	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  resetOccurred);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  resetOccurred);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  resetOccurred);	  state.evaluateStep(resetOccurred);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	33	None	replace
44	[BUG]  [BUGGY]  state.evaluateStep(resetOccurred,  orderingSign);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(resetOccurred,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(resetOccurred,  orderingSign);	  state.evaluateStep(resetOccurred);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	33	None	replace
45	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  event);  [CE]  cannot  find  symbol  event  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  event);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  event);	  occuringEvents.add(eventSign,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  event	63	None	replace
46	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  eventSign);  [CE]  cannot  find  symbol  eventSign  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  eventSign);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  eventSign);	  occuringEvents.add(eventSign,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	63	None	replace
47	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  es1);  [CE]  cannot  find  symbol  es1  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  es1);	  occuringEvents.add(eventSign,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  es1	63	None	replace
48	[BUG]  [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	72	None	replace
49	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  state);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  interpolator,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
50	[BUG]  [BUGGY]  occuringEvents.add(currentEvent,  state);  [CE]  cannot  find  symbol  currentEvent  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(currentEvent,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(currentEvent,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  currentEvent	2	None	replace
51	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  state,  tEnd);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  state,  tEnd);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  state,  tEnd);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
52	[BUG]  [BUGGY]  State  state  =  interpolator.evaluateStep(state,  orderingSign);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interpolator.evaluateStep(state,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interpolator.evaluateStep(state,  orderingSign);	  State    state    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
53	[BUG]  [BUGGY]  State  state  =  interpolator.evaluateStep(eventsInitialized,  state);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interpolator.evaluateStep(eventsInitialized,  state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interpolator.evaluateStep(eventsInitialized,  state);	  State    state    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  safelyStep(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(state))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  safelyStep(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	78	None	replace
58	[BUG]  [BUGGY]  allowEvent(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowEvent(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowEvent(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	78	None	replace
59	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	44	1	add
60	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	44	1	add
61	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluate	  timeout    	non-compiled	[CE]  ')'  expected	44	None	add
62	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator	  timeout    	non-compiled	[CE]  ')'  expected	44	None	add
63	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(inter  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(inter  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(inter	  timeout    	non-compiled	[CE]  ')'  expected	44	None	add
64	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0	  timeout    	non-compiled	[CE]  ';'  expected	44	None	add
65	[BUG]  [BUGGY]  State  state  =  currentEvent.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  currentEvent.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  currentEvent.evaluateStep(interpolator);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
66	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(currentEvent);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interface.evaluateStep(currentEvent);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interface.evaluateStep(currentEvent);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
67	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
68	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')')  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')')  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')')  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
69	[BUG]  [BUGGY]  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
70	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  if(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(!state.evaluateStep(interpolator))    {    return    0;    }    if(!state.evaluateStep(interpolator))  {  return  0;  }	  	compilable	  [FE]  AssertionError  	60	1	add
72	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  if(!state.evaluateStep(interpolator))  {  return  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  if(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))    {    return    0;    }    if(!state.evaluateStep(interpolator))  {  return  0;  }	  	compilable	  [FE]  AssertionError  	60	1	add
73	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  If(!state.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  If(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))    {    return    0;    }    If(!state.evaluateStep(interpolator))  {  return  0;  }	  	non-compiled	[CE]  ';'  expected	60	None	add
74	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interfaces.evaluateStep(interpolator);	  State    state    =    interfaces.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
75	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(state,  orderingSign);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interfaces.evaluateStep(state,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interfaces.evaluateStep(state,  orderingSign);	  State    state    =    interfaces.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
76	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
77	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [CE]  '('  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  '('  expected	30	None	replace
78	[BUG]  [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
79	[BUG]  [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [CE]  '('  expected  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  '('  expected	30	None	replace
80	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	47	None	replace
81	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  interpolator))  {  return  0;	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	47	None	replace
82	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  state))  {  return  0;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  state))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  state))  {  return  0;	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	47	None	replace
83	[BUG]  [BUGGY]  State  state  =  state.evaluate(eventsInitialized);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  state.evaluate(eventsInitialized);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  state.evaluate(eventsInitialized);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
84	[BUG]  [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateStep(throwable))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateStep(throwable))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(interpolator,  state.evaluateStep(throwable))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
85	[BUG]  [BUGGY]  aughtExceptionHandler(exceptionsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(exceptionsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(exceptionsInitialized,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
86	[BUG]  [BUGGY]  state.evaluateStep(interpolator))  {  return  1;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator))  {  return  1;  }	  state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
87	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  es0  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  es0	87	None	replace
88	[BUG]  [BUGGY]  return  t0  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  t0  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  t0  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  t0	87	None	replace
89	[BUG]  [BUGGY]  return  orderY  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  orderY  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderY  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderY  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  orderY	87	None	replace
90	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
91	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
92	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	66	None	add
93	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator  [CE]  [FE]        IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator	  	non-compiled	[CE]  	66	None	add
94	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
95	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  if(state.evaluateStep(interpolator))	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
96	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator)))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	51	None	replace
97	[BUG]  [BUGGY]  groundStep  =  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  groundStep  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  groundStep  =  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	groundStep  =  state.evaluateStep(interpolator);	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  groundStep	51	None	replace
98	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	51	None	replace
99	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	49	None	replace
100	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderingSign);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	49	None	replace
101	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  isLastStep);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  isLastStep);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingSign,  isLastStep);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	49	None	replace
102	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  this.stepSize);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  this.stepSize);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  this.stepSize);	  int    stepStart    =    state.evaluateStep(interpolator,    orderSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	64	None	replace
103	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yEnd);  [CE]  cannot  find  symbol  yEnd  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    orderSign);    	non-compiled	[CE]  cannot  find  symbol  yEnd	64	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	52	1	replace
105	[BUG]  [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	52	1	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
107	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	50	None	add
108	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	50	1	add
109	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	50	1	add
110	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
111	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator  [CE]  [FE]          IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator	  	non-compiled	[CE]  	50	None	add
112	[BUG]  [BUGGY]  State  state  =(State)eventsInitialized.clone();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =(State)eventsInitialized.clone();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =(State)eventsInitialized.clone();	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
113	[BUG]  [BUGGY]  State  state  =  currentEvent.getState();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  currentEvent.getState();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  currentEvent.getState();	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
114	[BUG]  [BUGGY]  State  state  =(State)eventsInitialized.get(interpolator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =(State)eventsInitialized.get(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =(State)eventsInitialized.get(interpolator);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
115	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	non-compiled	[CE]  ';'  expected	103	None	replace
116	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	compilable	timeout	103	1	replace
117	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	compilable	timeout	103	1	replace
118	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  state.evaluate(interpolator)))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
119	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
120	[BUG]  [BUGGY]  parent.evaluate(eventsInitialized,  state))  {  return  0;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluate(eventsInitialized,  state))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluate(eventsInitialized,  state))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
121	[BUG]  [BUGGY]  safe(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  safely(state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	81	None	replace
122	[BUG]  [BUGGY]  safely(state.evaluateStep(currentEvent))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(currentEvent))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(currentEvent))  throw  new  IllegalArgumentException( " ");	  safely(state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	81	None	replace
123	[BUG]  [BUGGY]  allowStep();  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStep();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStep();	  allowState();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
124	[BUG]  [BUGGY]  enableState();  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  enableState();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	enableState();	  allowState();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
125	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
126	[BUG]  [BUGGY]  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	EventState  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
127	[BUG]  [BUGGY]  State  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(0);  if(!state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
128	[BUG]  [BUGGY]  if(!state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(0);    if(!state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
129	[BUG]  [BUGGY]  allowState(state.evaluate(y,  tEnd));  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y,  tEnd));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  tEnd));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
130	[BUG]  [BUGGY]  allowState(state.evaluate(y,  es0));  [CE]  cannot  find  symbol  es0  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y,  es0));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  es0));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol  es0	91	None	replace
131	[BUG]  [BUGGY]  allowState(state.evaluate(y,  t1));  [CE]  cannot  find  symbol  t1  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y,  t1));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  t1));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol  t1	91	None	replace
132	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
133	[BUG]  [BUGGY]  if(isLastStep  ||  isFirstStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep  ||  isFirstStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep  ||  isFirstStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
134	[BUG]  [BUGGY]  if(isLastStep  ||  isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep  ||  isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep  ||  isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
135	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  -1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  return  -1;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
136	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
137	[BUG]  [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [CE]  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
138	[BUG]  [BUGGY]  safelyStep(state))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [CE]  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(state))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(state))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
139	[BUG]  [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [CE]  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionError  	6	1	replace
141	[BUG]  [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionError  	6	1	replace
142	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }	          if(state.evaluateStep(interpolator))    {    return    orderSign    *    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	58	None	replace
143	[BUG]  [BUGGY]  state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator))  {  return  orderingSign  *  state.evaluateStep(interpolator);  }	          if(state.evaluateStep(interpolator))    {    return    orderSign    *    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  ';'  expected	58	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
145	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
146	[BUG]  [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  not  a  statement	24	None	replace
147	[BUG]  [BUGGY]  state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  not  a  statement	24	None	replace
148	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  yDot,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  yDot,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  yDot,  tEnd);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	99	None	replace
149	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  tEnd,  yDot);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  tEnd,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  tEnd,  yDot);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	99	None	replace
150	[BUG]  [BUGGY]  state.evaluateStep(eventsInitialized,  interpolator,  yDot);  [CE]  cannot  find  symbol  eventsInitialized  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(eventsInitialized,  interpolator,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(eventsInitialized,  interpolator,  yDot);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	99	None	replace
151	[BUG]  [BUGGY]  state.evaluateStep(y,  interpolator);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(y,  interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(y,  interpolator);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	99	None	replace
152	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
154	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  state.evaluate(eventsInitialized))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(eventsInitialized))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(eventsInitialized))  {  return  0;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
156	[BUG]  [BUGGY]  state.evaluate(interpolator))  {  return  1;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(interpolator))  {  return  1;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
157	[BUG]  [BUGGY]  occuringEvents.add(existingSign,  interpolator);  [CE]  cannot  find  symbol  existingSign  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(existingSign,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(existingSign,  interpolator);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  existingSign	1	None	replace
158	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
159	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  orderingSign);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  orderingSign);	  int    stepStart    =    state.evaluateStep(interpolator,    stepSize);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	100	None	replace
160	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepHandlers);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepHandlers);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  stepHandlers);	  int    stepStart    =    state.evaluateStep(interpolator,    stepSize);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	100	None	replace
161	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd,  stepSize);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  tEnd,  stepSize);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  tEnd,  stepSize);	  int    stepStart    =    state.evaluateStep(interpolator,    stepSize);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	100	None	replace
162	[BUG]  [BUGGY]  allowState(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }	  allowState(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
163	[BUG]  [BUGGY]  State  state  =  getStep(interpolator);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  getStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  getStep(interpolator);	          state.evaluateStep(interpolator);    State    state    =    getStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
164	[BUG]  [BUGGY]  state.evaluateStep(eventsInitialized);  State  state  =  getStep(interpolator);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(eventsInitialized);  State  state  =  getStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(eventsInitialized);  State  state  =  getStep(interpolator);	          state.evaluateStep(interpolator);    State    state    =    getStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	39	None	replace
165	[BUG]  [BUGGY]  state.evaluateStep(resetOccurred);  State  state  =  getStep(interpolator);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(resetOccurred);  State  state  =  getStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(resetOccurred);  State  state  =  getStep(interpolator);	          state.evaluateStep(interpolator);    State    state    =    getStep(interpolator);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	39	None	replace
166	[BUG]  [BUGGY]  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
167	[BUG]  [BUGGY]  While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
168	[BUG]  [BUGGY]  State  state  =  eventsStates.get(i,  orderingSign);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(i,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(i,  orderingSign);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
169	[BUG]  [BUGGY]  State  state  =  eventsStates.get(i  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(i  +  1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(i  +  1);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
170	[BUG]  [BUGGY]  return  t0  *  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  t0  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  t0  *  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  t0  *  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  t0	59	None	replace
171	[BUG]  [BUGGY]  return  isLastStep  *  state.evaluateStep(interpolator);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  isLastStep  *  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  isLastStep  *  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
172	[BUG]  [BUGGY]  return  y  *  state.evaluateStep(interpolator);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  y  *  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  y  *  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
173	[BUG]  [BUGGY]  return  orderStart  *  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  orderStart  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderStart  *  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderStart  *  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  orderStart	59	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	13	1	add
175	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	13	1	add
176	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	13	None	add
177	[BUG]  [BUGGY]  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }	  tate.evaluate(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
178	[BUG]  [BUGGY]  tate.evaluate(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  tate.evaluate(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	tate.evaluate(eventsInitialized))  {  throw  new  IllegalStateException( " ");  }	  tate.evaluate(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
179	[BUG]  [BUGGY]  luateStep(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(state))  {  throw  new  IllegalStateException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	69	None	replace
180	[BUG]  [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	69	None	replace
181	[BUG]  [BUGGY]  ensureCapacity(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ensureCapacity(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ensureCapacity(interpolator))  {  throw  new  IllegalStateException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	69	None	replace
182	[BUG]  [BUGGY]  approveStep(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  approveStep(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	approveStep(state))  {  throw  new  IllegalStateException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	69	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(!	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
184	[BUG]  [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
185	[BUG]  [BUGGY]  occuringEvents.add(expandable,  state);  [CE]  no  suitable  method  found  for  add(ExpandableStatefulODE,EventState)  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(expandable,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(expandable,  state);	  occuringEvents.add(expandable);    	non-compiled	[CE]  no  suitable  method  found  for  add(ExpandableStatefulODE,EventState)	40	None	replace
186	[BUG]  [BUGGY]  occuringEvents.add(expandable,  es1);  [CE]  cannot  find  symbol  es1  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(expandable,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(expandable,  es1);	  occuringEvents.add(expandable);    	non-compiled	[CE]  cannot  find  symbol  es1	40	None	replace
187	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  expandable);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  expandable);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  expandable);	  occuringEvents.add(expandable);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	40	None	replace
188	[BUG]  [BUGGY]  occuringEvents.add(event,  expandable);  [CE]  cannot  find  symbol  event  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(event,  expandable);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(event,  expandable);	  occuringEvents.add(expandable);    	non-compiled	[CE]  cannot  find  symbol  event	40	None	replace
189	[BUG]  [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  orderingSign);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  interpolator.evaluateStep(state,  orderingSign);	  int    stepStart    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
190	[BUG]  [BUGGY]  occuringEvents.add(y,  interpolator);  [CE]  no  suitable  method  found  for  add(double[],AbstractStepInterpolator)  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(y,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(y,  interpolator);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  no  suitable  method  found  for  add(double[],AbstractStepInterpolator)	4	None	replace
191	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  y);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  interpolator,  y);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  interpolator,  y);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	4	None	replace
192	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  y,  tEnd);  [CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[],double)  [FE]                        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  y,  tEnd);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  y,  tEnd);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[],double)	4	None	replace
193	[BUG]  [BUGGY]  occuringEvents.add(y,  interface);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(y,  interface);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(y,  interface);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
194	[BUG]  [BUGGY]  allowState(interpolator.evaluateStep(state));  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(interpolator.evaluateStep(state));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(interpolator.evaluateStep(state));	  allowState(state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
195	[BUG]  [BUGGY]  allowState(eventsInitialized.evaluateStep(interpolator));  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(eventsInitialized.evaluateStep(interpolator));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(eventsInitialized.evaluateStep(interpolator));	  allowState(state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	88	None	replace
196	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(interpolator);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(interpolator);	  final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	83	None	replace
197	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);	  final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	83	None	replace
198	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(currentT);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(currentT);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(currentT);	  final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	83	None	replace
199	[BUG]  [BUGGY]  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
200	[BUG]  [BUGGY]  While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluate(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
201	[BUG]  [BUGGY]  if(!isLastStep)  {  if(!state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(!state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(!state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
202	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(currentEvent))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(currentEvent))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(currentEvent))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
203	[BUG]  [BUGGY]  if(!isLastStep)  {  if(eventsStates.contains(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(eventsStates.contains(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(eventsStates.contains(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	35	1	add
205	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	35	1	add
206	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  State  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol  State	35	None	add
207	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  ';'  expected	35	None	add
208	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State  state  =  getStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
209	[BUG]  [BUGGY]  safe(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluate(y)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
210	[BUG]  [BUGGY]  safe(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
211	[BUG]  [BUGGY]  safely(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(yDot)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
212	[BUG]  [BUGGY]  degreesInitialized.evaluate(state))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.evaluate(state))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.evaluate(state))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
213	[BUG]  [BUGGY]  degreesInitialized.evaluate(eventSign,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.evaluate(eventSign,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.evaluate(eventSign,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
214	[BUG]  [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
215	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')'  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')'  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)  ==  ')'  {	  final    EventState    state    =    eventsStates.get(i);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  ')'  expected	85	None	replace
216	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator!=  ')')  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator!=  ')')  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator!=  ')')  {	  final    EventState    state    =    eventsStates.get(i);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  ')'  expected	85	None	replace
217	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator  ==  ')')  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator  ==  ')')  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator  ==  ')')  {	  final    EventState    state    =    eventsStates.get(i);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  ')'  expected	85	None	replace
218	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	65	None	replace
219	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  t0,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  t0,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  t0,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  t0	65	None	replace
220	[BUG]  [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  tEnd);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  interpolator.evaluateStep(state,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
221	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  eventSign);  [CE]  cannot  find  symbol  eventSign  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  eventSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  eventSign);	  state.evaluateStep(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	34	None	replace
222	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  eventsInitialized);  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  eventsInitialized);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  eventsInitialized);	  state.evaluateStep(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	34	None	replace
223	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  es1);  [CE]  cannot  find  symbol  es1  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  es1);	  state.evaluateStep(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  es1	34	None	replace
224	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  eventState);  [CE]  cannot  find  symbol  eventState  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  eventState);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  eventState);	  state.evaluateStep(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventState	34	None	replace
225	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  cannot  find  symbol  es0  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  cannot  find  symbol  es0	86	None	replace
226	[BUG]  [BUGGY]  return  es1.getEventTime()  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  cannot  find  symbol  es1  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  es1.getEventTime()  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  es1.getEventTime()  *  Double.compare(es0.getEventTime(),  es1.getEventTime());	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  cannot  find  symbol  es1	86	None	replace
227	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());  [CE]  cannot  find  symbol  es1  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  cannot  find  symbol  es1	86	None	replace
228	[BUG]  [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safe(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
229	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
230	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	21	1	add
231	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	21	1	add
232	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	21	None	add
233	[BUG]  [BUGGY]  return  this.eventsInitialized  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  eventsInitialized  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  this.eventsInitialized  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  this.eventsInitialized  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	42	None	replace
234	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	42	None	replace
235	[BUG]  [BUGGY]  return  t0  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  t0  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  t0  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  t0  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  t0	42	None	replace
236	[BUG]  [BUGGY]  return  this.stepSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  stepSign  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  this.stepSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  this.stepSign  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  stepSign	42	None	replace
237	[BUG]  [BUGGY]  allowStateChanged(eventsInitialized);  [CE]  cannot  find  symbol  eventsInitialized  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStateChanged(eventsInitialized);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateChanged(eventsInitialized);	  allowStateChanged();    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	101	None	replace
238	[BUG]  [BUGGY]  enableStateChanged();  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  enableStateChanged();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	enableStateChanged();	  allowStateChanged();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
239	[BUG]  [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
240	[BUG]  [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
241	[BUG]  [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
242	[BUG]  [BUGGY]  instanceof  UnknownStepInterpolator?(UnknownStepInterpolator)es0  :  state.evaluate(interpolator);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  instanceof  UnknownStepInterpolator?(UnknownStepInterpolator)es0  :  state.evaluate(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	instanceof  UnknownStepInterpolator?(UnknownStepInterpolator)es0  :  state.evaluate(interpolator);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
243	[BUG]  [BUGGY]  luateStep(state))  {  return  0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(state))  {  return  0;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	75	None	replace
244	[BUG]  [BUGGY]  luateStep(interpolator))  {  return  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator))  {  return  1;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator))  {  return  1;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	75	None	replace
245	[BUG]  [BUGGY]  luateStep(state.evaluateStep(interpolator)))  {  return  0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state.evaluateStep(interpolator)))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(state.evaluateStep(interpolator)))  {  return  0;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	75	None	replace
246	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  state,  interpolator);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  state,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  state,  interpolator);	  occuringEvents.add(state,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	3	None	replace
247	[BUG]  [BUGGY]  occuringEvents.add(eventSign,  state,  interpolator);  [CE]  cannot  find  symbol  eventSign  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventSign,  state,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventSign,  state,  interpolator);	  occuringEvents.add(state,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	3	None	replace
248	[BUG]  [BUGGY]  luateStep(state))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(state))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(state))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
249	[BUG]  [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
250	[BUG]  [BUGGY]  ensureCapacity(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ensureCapacity(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ensureCapacity(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
251	[BUG]  [BUGGY]  approveStep(state,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  approveStep(state,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	approveStep(state,  interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
252	[BUG]  [BUGGY]  State  state  =  interpolator.evaluateStep(es0);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interpolator.evaluateStep(es0);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interpolator.evaluateStep(es0);	  State    state    =    es0.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
253	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(es0);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interfaces.evaluateStep(es0);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interfaces.evaluateStep(es0);	  State    state    =    es0.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
254	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(es0);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interface.evaluateStep(es0);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interface.evaluateStep(es0);	  State    state    =    es0.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
255	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	23	1	add
256	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	23	1	add
257	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  If(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  If(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    If(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	non-compiled	[CE]  ';'  expected	23	None	add
258	[BUG]  [BUGGY]  approveStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  approveStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	approveStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
259	[BUG]  [BUGGY]  luate(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luate(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luate(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
260	[BUG]  [BUGGY]  validate(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validate(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validate(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
261	[BUG]  [BUGGY]  this.stepHandlers.add(eventsInitialized,  interpolator);  [CE]  cannot  find  symbol  eventsInitialized  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(eventsInitialized,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(eventsInitialized,  interpolator);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	43	None	replace
262	[BUG]  [BUGGY]  this.stepHandlers.add(state,  interpolator);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(state,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(state,  interpolator);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	43	None	replace
263	[BUG]  [BUGGY]  this.stepHandlers.add(interpolator,  state);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(interpolator,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(interpolator,  state);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	43	None	replace
264	[BUG]  [BUGGY]  this.stepHandlers.add(state.stepHandler,  interpolator);  [CE]  cannot  find  symbol  stepHandler  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(state.stepHandler,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(state.stepHandler,  interpolator);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  stepHandler	43	None	replace
265	[BUG]  [BUGGY]  ExploluatedException(es0,  es1);  [CE]  cannot  find  symbol  es0  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ExploluatedException(es0,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ExploluatedException(es0,  es1);	  aughtException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  es0	90	None	replace
266	[BUG]  [BUGGY]  ProceedException( " ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  ProceedException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	ProceedException( " ");	  aughtException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
267	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
268	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i);  if(state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
269	[BUG]  [BUGGY]  State  state  =  eventsStates.get(interpolator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(interpolator);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
270	[BUG]  [BUGGY]  State  state  =  eventsStates.get(i-1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(i-1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(i-1);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
271	[BUG]  [BUGGY]  luateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(!isLastStep);  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!isLastStep);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!isLastStep);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	77	None	replace
273	[BUG]  [BUGGY]  luateStep(currentEvent))  {  return  0;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  luateStep(currentEvent))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	luateStep(currentEvent))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
274	[BUG]  [BUGGY]  state.evaluateAndReturn(interpolator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateAndReturn(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateAndReturn(interpolator);	          state.evaluateStep(interpolator);    State    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
275	[BUG]  [BUGGY]  State  state  =  getState();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  getState();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  getState();	          state.evaluateStep(interpolator);    State    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
277	[BUG]  [BUGGY]  While(!state.evaluate(y)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  While(!state.evaluate(y)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	While(!state.evaluate(y)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
278	[BUG]  [BUGGY]  state  =  getStep(interpolator);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state  =  getStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state  =  getStep(interpolator);	          state.evaluateStep(interpolator);    State    state    =    getStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
279	[BUG]  [BUGGY]  state.evaluate(y,  tEnd);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(y,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(y,  tEnd);	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
280	[BUG]  [BUGGY]  state.evaluate(y,  es1);  [CE]  cannot  find  symbol  es1  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(y,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(y,  es1);	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  es1	36	None	replace
281	[BUG]  [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [CE]  '('  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(    	non-compiled	[CE]  '('  expected	28	None	replace
282	[BUG]  [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if(	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
283	[BUG]  [BUGGY]  if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(    	non-compiled	[CE]  ';'  expected	28	None	replace
284	[BUG]  [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
285	[BUG]  [BUGGY]  return  orderingSign  *  state.evaluateStep(interpolator);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
286	[BUG]  [BUGGY]  occuringEvents.add(expandableODE,  es1);  [CE]  cannot  find  symbol  expandableODE  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(expandableODE,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(expandableODE,  es1);	  occuringEvents.add(expandable);    	non-compiled	[CE]  cannot  find  symbol  expandableODE	40	None	replace
287	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingEvents);  [CE]  cannot  find  symbol  orderingEvents  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  orderingEvents);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  orderingEvents);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  orderingEvents	49	None	replace
288	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot,  orderSign);	  int    stepStart    =    state.evaluateStep(interpolator,    orderingSign);    	non-compiled	[CE]  cannot  find  symbol  orderSign	49	None	replace
289	[BUG]  [BUGGY]  this.stepHandlers.add(interpolator,  y);  [CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(interpolator,  y);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(interpolator,  y);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  method  add  in  interface  Collection<E>  cannot  be  applied  to  given  types;	43	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
291	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
292	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
293	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  if(!state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	56	1	add
294	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  yDot);  [CE]  cannot  find  symbol  eventsInitialized  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  yDot);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  yDot);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	1	None	replace
295	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	21	1	add
296	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	21	1	add
297	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [CE]  <identifier>  expected  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	21	None	add
298	[BUG]  [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalArgumentException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	78	None	replace
299	[BUG]  [BUGGY]  safeTree(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safeTree(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safeTree(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	78	None	replace
300	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  state);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	2	None	replace
301	[BUG]  [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [CE]  '('  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  '('  expected	30	None	replace
302	[BUG]  [BUGGY]  if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  events  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  events  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(orderingSign)  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  events	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if    	non-compiled	[CE]  ';'  expected	30	None	replace
303	[BUG]  [BUGGY]  occuringEvents.add(eventsInitialized,  y,  tEnd);  [CE]  cannot  find  symbol  eventsInitialized  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventsInitialized,  y,  tEnd);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventsInitialized,  y,  tEnd);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  cannot  find  symbol  eventsInitialized	4	None	replace
304	[BUG]  [BUGGY]  occuringEvents.add(null,  y);  [CE]  no  suitable  method  found  for  add(<null>,double[])  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(null,  y);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(null,  y);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  no  suitable  method  found  for  add(<null>,double[])	4	None	replace
305	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	compilable	timeout	61	1	replace
306	[BUG]  [BUGGY]  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	compilable	timeout	61	1	replace
307	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  allowState(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
308	[BUG]  [BUGGY]  allowState(state.evaluate(y))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y))  {  throw  new  IllegalArgumentException( " ");  }	  allowState(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
309	[BUG]  [BUGGY]  state.evaluateStep(resetOccurred,  es1);  [CE]  cannot  find  symbol  es1  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(resetOccurred,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(resetOccurred,  es1);	  state.evaluateStep(resetOccurred);    	non-compiled	[CE]  cannot  find  symbol  es1	33	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  Preconditions  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluateStep(interpolator));	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	14	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluate(y));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluate(y));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluate(y));	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluate(y,  tEnd));  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluate(y,  tEnd));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluate(y,  tEnd));	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluate(y,  yDot));  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluate(y,  yDot));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluate(y,  yDot));	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
314	[BUG]  [BUGGY]  safely().acceptStep(es0,  es1);  [CE]  cannot  find  symbol  es0  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely().acceptStep(es0,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely().acceptStep(es0,  es1);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  es0	15	None	replace
315	[BUG]  [BUGGY]  return  orderingSign.compareTo(y,  yDot);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign.compareTo(y,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign.compareTo(y,  yDot);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
316	[BUG]  [BUGGY]  safely().acceptStep(es0,  state);  [CE]  cannot  find  symbol  es0  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely().acceptStep(es0,  state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely().acceptStep(es0,  state);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  es0	15	None	replace
317	[BUG]  [BUGGY]  safely().acceptStep(currentEvent);  [CE]  cannot  find  symbol  currentEvent  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely().acceptStep(currentEvent);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely().acceptStep(currentEvent);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  currentEvent	15	None	replace
318	[BUG]  [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(interpolator,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(interpolator,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
319	[BUG]  [BUGGY]  State  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(0);  if(state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
320	[BUG]  [BUGGY]  proceedStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  proceedStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	proceedStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
322	[BUG]  [BUGGY]  validate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validate(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
323	[BUG]  [BUGGY]  proceed(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  proceed(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	proceed(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
324	[BUG]  [BUGGY]  return  orderStart  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  orderStart  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderStart  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderStart  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  orderStart	42	None	replace
325	[BUG]  [BUGGY]  return  orderOccurred  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  orderOccurred  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderOccurred  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderOccurred  *  Double.compare(eventsInitialized,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  orderOccurred	42	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
327	[BUG]  [BUGGY]  State.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State.evaluate(interpolator))  {  throw  new  IllegalStateException( " ");  }	  tate.evaluate(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
328	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  stepSize);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot,  stepSize);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot,  stepSize);	  int    stepStart    =    state.evaluateStep(interpolator,    stepSize);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	100	None	replace
329	[BUG]  [BUGGY]  state.evaluateStep(expandeableODE);  [CE]  cannot  find  symbol  expandeableODE  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(expandeableODE);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(expandeableODE);	  state.evaluateStep(eventsInitialized);    	non-compiled	[CE]  cannot  find  symbol  expandeableODE	32	None	replace
330	[BUG]  [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
331	[BUG]  [BUGGY]  safely(state.evaluateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
332	[BUG]  [BUGGY]  occuringEvents.add(es0,  interpolator);  [CE]  cannot  find  symbol  es0  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(es0,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(es0,  interpolator);	  occuringEvents.add(eventSign,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  es0	63	None	replace
333	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [CE]  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  	22	None	replace
334	[BUG]  [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  	22	None	replace
335	[BUG]  [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator,  state);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interfaces.evaluateStep(interpolator,  state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interfaces.evaluateStep(interpolator,  state);	  State    state    =    interfaces.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
336	[BUG]  [BUGGY]  degreeHandlers.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreeHandlers.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreeHandlers.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
337	[BUG]  [BUGGY]  degreesInitialized.evaluate(expandableODE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.evaluate(expandableODE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.evaluate(expandableODE))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
338	[BUG]  [BUGGY]  proceedStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  proceedStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	proceedStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
339	[BUG]  [BUGGY]  safely(state.evaluate(y,  t)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluate(y,  t)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(y,  t)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	35	1	add
341	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateStep(interpolator);	  	compilable	  [FE]  AssertionError  	35	1	add
342	[BUG]  [BUGGY]  state.evaluateStep(yDot,  interpolator);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(yDot,  interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(yDot,  interpolator);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	99	None	replace
343	[BUG]  [BUGGY]  state.evaluateStep(interpolator,  yDot,  orderSign);  [CE]  cannot  find  symbol  orderSign  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator,  yDot,  orderSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator,  yDot,  orderSign);	  state.evaluateStep(interpolator,    yDot);    	non-compiled	[CE]  cannot  find  symbol  orderSign	99	None	replace
344	[BUG]  [BUGGY]  return  orderStart  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  orderStart  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderStart  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderStart  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  orderStart	87	None	replace
345	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es1.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  es1  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(es1.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(es1.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  es1	87	None	replace
346	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(step,  tEnd);  [CE]  cannot  find  symbol  step  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(step,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(step,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  step	65	None	replace
347	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
348	[BUG]  [BUGGY]  allowState(events.evaluateStep(interpolator));  [CE]  cannot  find  symbol  events  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(events.evaluateStep(interpolator));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(events.evaluateStep(interpolator));	  allowState(state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  events	88	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(isLastStep);  [CE]  cannot  find  symbol  Preconditions  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(isLastStep);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(isLastStep);	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	51	None	replace
350	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i  -  1);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(i  -  1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i  -  1);	  final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	83	None	replace
351	[BUG]  [BUGGY]  allowStateChanged(state);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStateChanged(state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateChanged(state);	  allowStateChanged();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
352	[BUG]  [BUGGY]  allowState(state.evaluate(y,  es2));  [CE]  cannot  find  symbol  es2  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y,  es2));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  es2));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol  es2	91	None	replace
353	[BUG]  [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  int  if(!state.evaluateStep(interpolator))  {  return  0;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(!state.evaluateStep(interpolator))  {  return  0;  }  int  if(!state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(!state.evaluateStep(interpolator))    {    return    0;    }    int  if(!state.evaluateStep(interpolator))  {  return  0;  }	  	non-compiled	[CE]  not  a  statement	60	None	add
354	[BUG]  [BUGGY]  enableStep();  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  enableStep();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	enableStep();	  allowState();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
355	[BUG]  [BUGGY]  proceed(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  proceed(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	proceed(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
356	[BUG]  [BUGGY]  State  state  =  es1.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  es1.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  es1.evaluateStep(interpolator);	  State    state    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
357	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(interpolator))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(interpolator))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(i);  if(!state.evaluateStep(interpolator))  {	  final    EventState    state    =    eventsStates.get(i);    if(!state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!isLastStepInterpolator  &&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	20	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePadding(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePadding(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePadding(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	20	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePaint(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePaint(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!isLastStepInterpolator  ||  state.evaluatePaint(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	20	None	replace
361	[BUG]  [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluateStep(orderingSign))  {  throw  new  IllegalStateException( " ");	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	72	None	replace
362	[BUG]  [BUGGY]  safeThan(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safeThan(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safeThan(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  safely(state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	81	None	replace
363	[BUG]  [BUGGY]  occuringEvents.add(state,  yDot,  interpolator);  [CE]  no  suitable  method  found  for  add(EventState,double[],AbstractStepInterpolator)  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(state,  yDot,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(state,  yDot,  interpolator);	  occuringEvents.add(state,    interpolator);    	non-compiled	[CE]  no  suitable  method  found  for  add(EventState,double[],AbstractStepInterpolator)	3	None	replace
364	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	44	1	add
365	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	compilable	timeout	44	1	add
366	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;	  timeout    	non-compiled	[CE]  illegal  start  of  expression	44	None	add
367	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        return        0;        }        if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return  0;  }  if(state.evaluateStep(interpolator))  {  return	  timeout    	non-compiled	[CE]  illegal  start  of  expression	44	None	add
368	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
369	[BUG]  [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [CE]  '('  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  if	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!    	non-compiled	[CE]  '('  expected	29	None	replace
370	[BUG]  [BUGGY]  if(!isLastStep)  {  if(state.evaluateOccurred(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!isLastStep)  {  if(state.evaluateOccurred(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!isLastStep)  {  if(state.evaluateOccurred(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    if(!    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
371	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
372	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( "   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	66	1	add
373	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".   ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	66	None	add
374	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  <  0)  {  return  0;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  <  0)  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  <  0)  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	103	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	55	None	replace
376	[BUG]  [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
377	[BUG]  [BUGGY]  degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
378	[BUG]  [BUGGY]  State  state  =  interface.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interface.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interface.evaluateStep(interpolator);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
379	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	24	1	replace
380	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	timeout	24	1	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	Preconditions.checkState(!state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
382	[BUG]  [BUGGY]  state.evaluate(expandableODE))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(expandableODE))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(expandableODE))  {  return  0;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
383	[BUG]  [BUGGY]  state.evaluate(stepStart))  {  return  0;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(stepStart))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(stepStart))  {  return  0;  }	  state.evaluate(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
384	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  yDot);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  yDot);	  int    stepStart    =    state.evaluateStep(interpolator,    orderSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	64	None	replace
385	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  es1);  [CE]  cannot  find  symbol  es1  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  es1);	  int    stepStart    =    state.evaluateStep(interpolator,    orderSign);    	non-compiled	[CE]  cannot  find  symbol  es1	64	None	replace
386	[BUG]  [BUGGY]  State.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State.evaluateStep(interpolator))  {  return  0;  }	  state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
387	[BUG]  [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(interpolator,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
388	[BUG]  [BUGGY]  degreeHandlers.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreeHandlers.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreeHandlers.add(eventsInitialized,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
389	[BUG]  [BUGGY]  validateStep(interpolator))  {  return  0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(interpolator))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(interpolator))  {  return  0;	  luateStep(interpolator))    {    return    0;    	non-compiled	[CE]  ';'  expected	75	None	replace
390	[BUG]  [BUGGY]  return  orderSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());  [CE]  cannot  find  symbol  orderSign  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderSign  *  Double.compare(es1.getEventTime(),  es0.getEventTime());	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  cannot  find  symbol  orderSign	86	None	replace
391	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  eventInitialized);  [CE]  cannot  find  symbol  eventInitialized  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  eventInitialized);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  eventInitialized);	  occuringEvents.add(eventsInitialized,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventInitialized	1	None	replace
392	[BUG]  [BUGGY]  degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	degreesInitialized.add(state,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	11	None	replace
393	[BUG]  [BUGGY]  fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  not  a  statement	11	None	replace
394	[BUG]  [BUGGY]  stopStep();  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  stopStep();  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	stopStep();	  allowState();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
395	[BUG]  [BUGGY]  occuringEvents.add(eventSign,  state);  [CE]  cannot  find  symbol  eventSign  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventSign,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventSign,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  eventSign	2	None	replace
396	[BUG]  [BUGGY]  occuringEvents.add(event,  state);  [CE]  cannot  find  symbol  event  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(event,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(event,  state);	  occuringEvents.add(interpolator,    state);    	non-compiled	[CE]  cannot  find  symbol  event	2	None	replace
397	[BUG]  [BUGGY]  previousT  =  state.evaluateStep(interpolator);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  =  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	previousT  =  state.evaluateStep(interpolator);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    	non-compiled	[CE]  incompatible  types	47	None	replace
398	[BUG]  [BUGGY]  aughtExceptionHandler.handleEvent(es0,  es1);  [CE]  cannot  find  symbol  es0  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler.handleEvent(es0,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler.handleEvent(es0,  es1);	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol  es0	61	None	replace
399	[BUG]  [BUGGY]  aughtExceptionHandler.handleStep(es0,  es1);  [CE]  cannot  find  symbol  es0  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler.handleStep(es0,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler.handleStep(es0,  es1);	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol  es0	61	None	replace
400	[BUG]  [BUGGY]  aughtExceptionHandler.handleState(es0,  es1);  [CE]  cannot  find  symbol  es0  [FE]        AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler.handleState(es0,  es1);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler.handleState(es0,  es1);	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  cannot  find  symbol  es0	61	None	replace
401	[BUG]  [BUGGY]  parent.evaluateStep(interpolator))  {  return  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  parent.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	parent.evaluateStep(interpolator))  {  return  0;  }	          if(!state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
402	[BUG]  [BUGGY]  validateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
403	[BUG]  [BUGGY]  removeAllSteps(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  removeAllSteps(currentEvent))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	removeAllSteps(currentEvent))  {  throw  new  IllegalStateException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	71	None	replace
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	}  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	compilable	  [FE]  AssertionError  	20	1	replace
405	[BUG]  [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	compilable	  [FE]  AssertionError  	20	1	replace
406	[BUG]  [BUGGY]  }  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]      IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
407	[BUG]  [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]        IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
408	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  yDot,  state);  [CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[],EventState)  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  yDot,  state);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  yDot,  state);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[],EventState)	4	None	replace
409	[BUG]  [BUGGY]  occuringEvents.add(eventSign,  y);  [CE]  cannot  find  symbol  eventSign  [FE]                      AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(eventSign,  y);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(eventSign,  y);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  cannot  find  symbol  eventSign	4	None	replace
410	[BUG]  [BUGGY]  occuringEvents.add(interpolator,  yDot);  [CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[])  [FE]                        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(interpolator,  yDot);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(interpolator,  yDot);	  occuringEvents.add(interpolator,    y);    	non-compiled	[CE]  no  suitable  method  found  for  add(AbstractStepInterpolator,double[])	4	None	replace
411	[BUG]  [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalStateException( " ");  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(events,  state.evaluateStep(interpolator))  throw  new  IllegalStateException( " ");	  aughtExceptionHandler(events,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	95	None	replace
412	[BUG]  [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator)),  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(events,  state.evaluateStep(interpolator)),  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(events,  state.evaluateStep(interpolator)),  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(events,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	95	None	replace
413	[BUG]  [BUGGY]  if(eventsStates.contains(state))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(eventsStates.contains(state))  {  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(eventsStates.contains(state))  {	  final    EventState    state    =    eventsStates.get(0);    if(state.evaluateStep(inter    >>    ')')    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
414	[BUG]  [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  es1);  [CE]  cannot  find  symbol  es1  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  interpolator.evaluateStep(state,  es1);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  interpolator.evaluateStep(state,  es1);	  int    stepStart    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol  es1	48	None	replace
415	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalStateException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	19	None	add
416	[BUG]  [BUGGY]  aughtExceptionHandler(annotation,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(annotation,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(annotation,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
417	[BUG]  [BUGGY]  aughtExceptionHandler(exceptions,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(exceptions,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(exceptions,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
418	[BUG]  [BUGGY]  aughtExceptionHandler(ignorable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler(ignorable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler(ignorable,  state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  aughtExceptionHandler(throwable,    state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	94	None	replace
419	[BUG]  [BUGGY]  allowState(state.evaluate(yDot,  es1));  [CE]  cannot  find  symbol  es1  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(yDot,  es1));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(yDot,  es1));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol  es1	91	None	replace
420	[BUG]  [BUGGY]  allowState(state.evaluate(es0,  es1));  [CE]  cannot  find  symbol  es0  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(es0,  es1));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(es0,  es1));	  allowState(state.evaluate(y,    es1));    	non-compiled	[CE]  cannot  find  symbol  es0	91	None	replace
421	[BUG]  [BUGGY]  state.evaluateStep(interpolator))  {  return  -1;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateStep(interpolator))  {  return  -1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateStep(interpolator))  {  return  -1;  }	  state.evaluateStep(interpolator))    {    return    0;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
422	[BUG]  [BUGGY]  result.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  result.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	result.evaluate(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  degreesInitialized.evaluate(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
423	[BUG]  [BUGGY]  enableState(interpolator.evaluateStep(state));  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  enableState(interpolator.evaluateStep(state));  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	enableState(interpolator.evaluateStep(state));	  allowState(state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
424	[BUG]  [BUGGY]  return  orderingSign  /  state.evaluateStep(interpolator);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  /  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  /  state.evaluateStep(interpolator);	          return    orderSign    *    state.evaluateStep(interpolator);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	59	None	replace
425	[BUG]  [BUGGY]  return  orderingSign  *  Double.compare(es1,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  es1  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  *  Double.compare(es1,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  *  Double.compare(es1,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  es1	42	None	replace
426	[BUG]  [BUGGY]  return  orderSign  *  Double.compare(es1,  state.evaluateStep(interpolator));  [CE]  cannot  find  symbol  orderSign  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderSign  *  Double.compare(es1,  state.evaluateStep(interpolator));  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderSign  *  Double.compare(es1,  state.evaluateStep(interpolator));	  return    orderSign    *    Double.compare(eventsInitialized,    state.evaluateStep(interpolator));    	non-compiled	[CE]  cannot  find  symbol  orderSign	42	None	replace
427	[BUG]  [BUGGY]  State  state  =  state.evaluateStep(interpolators);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  state.evaluateStep(interpolators);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  state.evaluateStep(interpolators);	  State    state    =    interfaces.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
428	[BUG]  [BUGGY]  try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
429	[BUG]  [BUGGY]  State  state  =  interpolator.evaluateStep(state,  state);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  interpolator.evaluateStep(state,  state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  interpolator.evaluateStep(state,  state);	  State    state    =    interpolator.evaluateStep(state);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
430	[BUG]  [BUGGY]  sweepStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  sweepStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	sweepStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
431	[BUG]  [BUGGY]  es0.evaluateStep(interpolator);  [CE]  cannot  find  symbol  es0  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  es0.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	es0.evaluateStep(interpolator);	  aughtException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  es0	90	None	replace
432	[BUG]  [BUGGY]  es0.evaluateStep(interpolator):   " ";  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  es0.evaluateStep(interpolator):   " ";  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	es0.evaluateStep(interpolator):   " ";	  aughtException(   "   ");    	non-compiled	[CE]  	90	None	replace
433	[BUG]  [BUGGY]  aughtExceptionHandler.handleEvent(es0,  es1,  tEnd,  orderingSign);  [CE]  cannot  find  symbol  es0  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  aughtExceptionHandler.handleEvent(es0,  es1,  tEnd,  orderingSign);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	aughtExceptionHandler.handleEvent(es0,  es1,  tEnd,  orderingSign);	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    ==    return    0;    }    	non-compiled	[CE]  cannot  find  symbol  es0	77	None	replace
434	[BUG]  [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [CE]  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  interpolator.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
435	[BUG]  [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [CE]  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ".compare(state.getMethod(),  state.getMethod());  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ".compare(state.getMethod(),    interpolator.getMethod());    }    	non-compiled	[CE]  	12	None	replace
436	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ".);  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  <identifier>  expected	50	None	add
437	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	50	1	add
438	[BUG]  [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(     "     ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException(   "     ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                if(state.evaluateStep(interpolator))        {        throw        new        IllegalArgumentException(       "       ");        }        if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( ". ");  }  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	50	1	add
439	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	  [FE]  AssertionError  	24	1	replace
440	[BUG]  [BUGGY]  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  0;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    timeout    	compilable	  [FE]  AssertionError  	24	1	replace
441	[BUG]  [BUGGY]  State  state  =  eventsStates.get(state);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(state);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
442	[BUG]  [BUGGY]  State  state  =  eventsStates.get(i,  state);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  eventsStates.get(i,  state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  eventsStates.get(i,  state);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
443	[BUG]  [BUGGY]  State  state  =  this.eventsStates.get(i);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  State  state  =  this.eventsStates.get(i);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	State  state  =  this.eventsStates.get(i);	  State    state    =    eventsStates.get(i);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
444	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  this);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  this);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  this);	  int    stepStart    =    state.evaluateStep(interpolator,    orderSign);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	64	None	replace
445	[BUG]  [BUGGY]  final  EventState  state  =  eventsStates.get(state);  [CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  final  EventState  state  =  eventsStates.get(state);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	final  EventState  state  =  eventsStates.get(state);	  final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  acceptStep(AbstractStepInterpolator,double[],double[],double)	83	None	replace
446	[BUG]  [BUGGY]  sweepStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  sweepStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	sweepStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  luateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	69	None	replace
447	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  1;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    timeout    	compilable	timeout	27	1	replace
448	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  1;  }  timeout  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  return  1;  }	  if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    1;    }    timeout    	compilable	timeout	27	1	replace
449	[BUG]  [BUGGY]  try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
450	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  allowState(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	96	None	replace
451	[BUG]  [BUGGY]  return  orderingSign  -  state.evaluateStep(interpolator);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderingSign  -  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderingSign  -  state.evaluateStep(interpolator);	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	15	None	replace
452	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [CE]  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalStateException( " ".);  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    If(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "       ");    }    	non-compiled	[CE]  	15	None	replace
453	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    State  state  =  state.evaluateStep(interpolator);  state.evaluateStep(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
454	[BUG]  [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateChild(interpolator);  state.evaluateChild(interpolator);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);  state.evaluateChild(interpolator);  state.evaluateChild(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	                state.evaluateStep(interpolator);        state.evaluateStep(interpolator);    state.evaluateChild(interpolator);  state.evaluateChild(interpolator);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
455	[BUG]  [BUGGY]  state  =  state.evaluateStep(interpolator);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state  =  state.evaluateStep(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state  =  state.evaluateStep(interpolator);	  State    state    =    interface.evaluateStep(state);    	non-compiled	[CE]  incompatible  types	62	None	replace
456	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  return  orderStart  *  state.evaluateStep(interpolator);  }  [CE]  cannot  find  symbol  orderStart  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  return  orderStart  *  state.evaluateStep(interpolator);  }  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  return  orderStart  *  state.evaluateStep(interpolator);  }	          if(state.evaluateStep(interpolator))    {    return    orderSign    *    state.evaluateStep(interpolator);    }    	non-compiled	[CE]  cannot  find  symbol  orderStart	58	None	replace
457	[BUG]  [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowStateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
458	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator)))  {  throw  new  IllegalStateException( " ");  }	  safelyStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
459	[BUG]  [BUGGY]  safely(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safely(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safely(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
460	[BUG]  [BUGGY]  allowState(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluate(y,  t0)))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluate(y,    yDot)))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
461	[BUG]  [BUGGY]  safeThanIgnoreWhitespace(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safeThanIgnoreWhitespace(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safeThanIgnoreWhitespace(state.evaluateStep(interpolator))  throw  new  IllegalArgumentException( " ");	  safely(state.evaluateStep(interpolator))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	81	None	replace
462	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize,  interpolator,  tEnd);  [CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(stepSize,  interpolator,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(stepSize,  interpolator,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  method  evaluateStep  in  class  EventState  cannot  be  applied  to  given  types;	65	None	replace
463	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(step,  interpolator,  tEnd);  [CE]  cannot  find  symbol  step  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(step,  interpolator,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(step,  interpolator,  tEnd);	  int    stepStart    =    state.evaluateStep(interpolator,    tEnd);    	non-compiled	[CE]  cannot  find  symbol  step	65	None	replace
464	[BUG]  [BUGGY]  safelyStep(interpolator)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(interpolator)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator)  {  throw  new  IllegalStateException( " ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  	57	None	replace
465	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [CE]  [FE]      AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalStateException( ". ");  }	          if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(!state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  	57	None	replace
466	[BUG]  [BUGGY]  occuringEvents.add(currentEvent,  interpolator);  [CE]  cannot  find  symbol  currentEvent  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  occuringEvents.add(currentEvent,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	occuringEvents.add(currentEvent,  interpolator);	  occuringEvents.add(state,    interpolator);    	non-compiled	[CE]  cannot  find  symbol  currentEvent	3	None	replace
467	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  eventsStates.get(i);  }	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
468	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator))  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator))  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator))  {  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  for(int  i  =  0;  i  <  eventsStates.size();  ++i)  {  final  EventState  state  =	  if(!isLastStep)    {    if(state.evaluateStep(interpolator))    {    for(int    i    =    0;    i    <    eventsStates.size();    ++i)    {    final    EventState    state    =    eventsStates.get(i);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
469	[BUG]  [BUGGY]  try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	try  {  while(!state.evaluate(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  While(!state.evaluate(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
470	[BUG]  [BUGGY]  this.stepHandlers.add(currentStep,  interpolator);  [CE]  cannot  find  symbol  currentStep  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(currentStep,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(currentStep,  interpolator);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  currentStep	43	None	replace
471	[BUG]  [BUGGY]  this.stepHandlers.add(eventSign,  interpolator);  [CE]  cannot  find  symbol  eventSign  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  this.stepHandlers.add(eventSign,  interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	this.stepHandlers.add(eventSign,  interpolator);	  this.stepHandlers.add(interpolator);    	non-compiled	[CE]  cannot  find  symbol  eventSign	43	None	replace
472	[BUG]  [BUGGY]  return  ordering_Sign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [CE]  cannot  find  symbol  ordering_Sign  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  ordering_Sign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  ordering_Sign  *  Double.compare(es0.getEventTime(),  es1)-  state.evaluateStep(interpolator);	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1)-    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  ordering_Sign	87	None	replace
473	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  -1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  -1;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	compilable	timeout	103	1	replace
474	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  -1;  }  timeout  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  -1;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  -1;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    <    return    0;    }    	compilable	timeout	103	1	replace
475	[BUG]  [BUGGY]  state.evaluateAndSet(interpolator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluateAndSet(interpolator);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluateAndSet(interpolator);	          state.evaluateStep(interpolator);    State    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
476	[BUG]  [BUGGY]  try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	try  {  while(!state.evaluateStep(interpolator)&&  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  While(!state.evaluateStep(interpolator)&&    state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
477	[BUG]  [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowState(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  	72	None	replace
478	[BUG]  [BUGGY]  }  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalStateException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
479	[BUG]  [BUGGY]  return  orderStart  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [CE]  cannot  find  symbol  orderStart  [FE]        AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  return  orderStart  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  [BUGGY]      }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	return  orderStart  *  Double.compare(es0.getEventTime(),  es1.getEventTime());	          return    orderSign    *    Double.compare(es0.getEventTime(),    es1.getEventTime());    	non-compiled	[CE]  cannot  find  symbol  orderStart	86	None	replace
480	[BUG]  [BUGGY]  allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
481	[BUG]  [BUGGY]  state.evaluate(y,  t0,  tEnd);  [CE]  cannot  find  symbol  t0  [FE]    AssertionError    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  state.evaluate(y,  t0,  tEnd);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	state.evaluate(y,  t0,  tEnd);	          state.evaluateStep(interpolator);    state.evaluateStep(interpolator);    	non-compiled	[CE]  cannot  find  symbol  t0	36	None	replace
482	[BUG]  [BUGGY]  tate.evaluate(state))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  tate.evaluate(state))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	tate.evaluate(state))  {  throw  new  IllegalStateException( " ");  }	  tate.evaluate(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
483	[BUG]  [BUGGY]  tate.evaluate(stepStart))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  tate.evaluate(stepStart))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	tate.evaluate(stepStart))  {  throw  new  IllegalStateException( " ");  }	  tate.evaluate(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
484	[BUG]  [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(tate.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  cannot  find  symbol  tate  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  if(tate.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	if(state.evaluateStep(interpolator)||    state.evaluateStep(interpolator))    {    return    0;    }    if(tate.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  return  0;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  tate	23	None	add
485	[BUG]  [BUGGY]  allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	allowEvents(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	  safely(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	78	None	replace
486	[BUG]  [BUGGY]  fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	fortunately,  state.evaluateStep(interpolator))  {  throw  new  IllegalStateException( " ");  }	  degreesInitialized.add(eventsInitialized,    state.evaluateStep(interpolator))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
487	[BUG]  [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
488	[BUG]  [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	previousT  <  =  state.evaluateStep(interpolator))  {  return  0;	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
489	[BUG]  [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  ==  null)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  ==  null)  {  return  0;  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	previousT  <  =  state.evaluateStep(interpolator))  {  return  0;  }  else  if(state.evaluateStep(interpolator)  ==  null)  {  return  0;  }	          if(state.evaluateStep(interpolator))    {    return    0;    }    if(state.evaluateStep(interpolator))    {    return    0;    }    timeout    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
490	[BUG]  [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  order);  [CE]  cannot  find  symbol  order  [FE]              AssertionError      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  order);  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	int  stepStart  =  state.evaluateStep(interpolator,  stepSize,  order);	  int    stepStart    =    state.evaluateStep(interpolator,    stepSize);    	non-compiled	[CE]  cannot  find  symbol  order	100	None	replace
491	[BUG]  [BUGGY]  }  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
492	[BUG]  [BUGGY]  }  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
493	[BUG]  [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  safelyStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	safelyStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	67	None	replace
494	[BUG]  [BUGGY]  validateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  validateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	validateStep(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
495	[BUG]  [BUGGY]  removeAllSteps(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              IllegalArgumentException      [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  removeAllSteps(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	removeAllSteps(currentEvent))  {  throw  new  IllegalArgumentException( " ");  }	  luateStep(currentEvent))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
496	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	add	}  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	51	1	replace
497	[BUG]  [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]    IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  }  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	}  else  if(!isLastStep)  {  if(state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	51	1	replace
498	[BUG]  [BUGGY]  [Delete]  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]        public  int  compare(EventState  es0,  EventState  es1)  {  return  orderingSign  *  Double.compare(es0.getEventTime(),  es1.getEventTime());  }  });  for  (final  EventState  state  :  eventsStates)  {  if  (state.evaluateStep(interpolator))  {        [BUGGY]  [Delete]  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      occuringEvents.add(state);  }  }  while  (!occuringEvents.isEmpty())  {  final  Iterator<EventState>  iterator  =  occuringEvents.iterator();  final  EventState  currentEvent  =  iterator.next();  iterator.remove();  [CLASS]  AbstractIntegrator  1  [METHOD]  acceptStep  [RETURN_TYPE]  double  AbstractStepInterpolator  interpolator  final  double[]  y  final  double[]  yDot  final  double  tEnd  [VARIABLES]  ExpandableStatefulODE  equations  expandable  expandableODE  EventState  currentEvent  es0  es1  state  double  convergence  currentT  eventT  maxCheckInterval  previousT  stepSize  stepStart  t  t0  tEnd  Incrementor  evaluations  StepHandler  handler  String  name  SortedSet  occuringEvents  int  orderingSign  boolean  isLastStep  resetOccurred  stateInitialized  statesInitialized  double[]  currentY  eventY  y  yDot  Iterator  iterator  Collection  eventsStates  stepHandlers  AbstractStepInterpolator  interpolator  	projects/Math44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java	1.0	304	304	1	replace	[Delete]  else  if(state.evaluateStep(interpolator)||  state.evaluateStep(interpolator))  {  throw  new  IllegalArgumentException( " ");  }	          if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(       "       ");    }    if(state.evaluateStep(interpolator))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
